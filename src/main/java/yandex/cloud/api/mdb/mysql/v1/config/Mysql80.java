// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yandex/cloud/mdb/mysql/v1/config/mysql8_0.proto

package yandex.cloud.api.mdb.mysql.v1.config;

public final class Mysql80 {
  private Mysql80() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MysqlConfig8_0OrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    boolean hasInnodbBufferPoolSize();
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    com.google.protobuf.Int64Value getInnodbBufferPoolSize();
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbBufferPoolSizeOrBuilder();

    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    boolean hasMaxConnections();
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    com.google.protobuf.Int64Value getMaxConnections();
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder();

    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    boolean hasLongQueryTime();
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    com.google.protobuf.DoubleValue getLongQueryTime();
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    com.google.protobuf.DoubleValueOrBuilder getLongQueryTimeOrBuilder();

    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    boolean hasGeneralLog();
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    com.google.protobuf.BoolValue getGeneralLog();
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getGeneralLogOrBuilder();

    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    boolean hasAuditLog();
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    com.google.protobuf.BoolValue getAuditLog();
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getAuditLogOrBuilder();

    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     */
    java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode> getSqlModeList();
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     */
    int getSqlModeCount();
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode getSqlMode(int index);
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     */
    java.util.List<java.lang.Integer>
    getSqlModeValueList();
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     */
    int getSqlModeValue(int index);

    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    boolean hasMaxAllowedPacket();
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    com.google.protobuf.Int64Value getMaxAllowedPacket();
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxAllowedPacketOrBuilder();

    /**
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
     */
    int getDefaultAuthenticationPluginValue();
    /**
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin getDefaultAuthenticationPlugin();
  }
  /**
   * <pre>
   * Options and structure of `MysqlConfig8_0` reflects MySQL 8.0 configuration file
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0}
   */
  public  static final class MysqlConfig8_0 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0)
      MysqlConfig8_0OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MysqlConfig8_0.newBuilder() to construct.
    private MysqlConfig8_0(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MysqlConfig8_0() {
      sqlMode_ = java.util.Collections.emptyList();
      defaultAuthenticationPlugin_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MysqlConfig8_0(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbBufferPoolSize_ != null) {
                subBuilder = innodbBufferPoolSize_.toBuilder();
              }
              innodbBufferPoolSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbBufferPoolSize_);
                innodbBufferPoolSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxConnections_ != null) {
                subBuilder = maxConnections_.toBuilder();
              }
              maxConnections_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxConnections_);
                maxConnections_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.google.protobuf.DoubleValue.Builder subBuilder = null;
              if (longQueryTime_ != null) {
                subBuilder = longQueryTime_.toBuilder();
              }
              longQueryTime_ = input.readMessage(com.google.protobuf.DoubleValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(longQueryTime_);
                longQueryTime_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (generalLog_ != null) {
                subBuilder = generalLog_.toBuilder();
              }
              generalLog_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(generalLog_);
                generalLog_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (auditLog_ != null) {
                subBuilder = auditLog_.toBuilder();
              }
              auditLog_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auditLog_);
                auditLog_ = subBuilder.buildPartial();
              }

              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                sqlMode_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              sqlMode_.add(rawValue);
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  sqlMode_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                sqlMode_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 58: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxAllowedPacket_ != null) {
                subBuilder = maxAllowedPacket_.toBuilder();
              }
              maxAllowedPacket_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxAllowedPacket_);
                maxAllowedPacket_ = subBuilder.buildPartial();
              }

              break;
            }
            case 64: {
              int rawValue = input.readEnum();

              defaultAuthenticationPlugin_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          sqlMode_ = java.util.Collections.unmodifiableList(sqlMode_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder.class);
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode}
     */
    public enum SQLMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SQLMODE_UNSPECIFIED = 0;</code>
       */
      SQLMODE_UNSPECIFIED(0),
      /**
       * <code>ALLOW_INVALID_DATES = 1;</code>
       */
      ALLOW_INVALID_DATES(1),
      /**
       * <code>ANSI_QUOTES = 2;</code>
       */
      ANSI_QUOTES(2),
      /**
       * <code>ERROR_FOR_DIVISION_BY_ZERO = 3;</code>
       */
      ERROR_FOR_DIVISION_BY_ZERO(3),
      /**
       * <code>HIGH_NOT_PRECEDENCE = 4;</code>
       */
      HIGH_NOT_PRECEDENCE(4),
      /**
       * <code>IGNORE_SPACE = 5;</code>
       */
      IGNORE_SPACE(5),
      /**
       * <code>NO_AUTO_VALUE_ON_ZERO = 6;</code>
       */
      NO_AUTO_VALUE_ON_ZERO(6),
      /**
       * <code>NO_BACKSLASH_ESCAPES = 7;</code>
       */
      NO_BACKSLASH_ESCAPES(7),
      /**
       * <code>NO_ENGINE_SUBSTITUTION = 8;</code>
       */
      NO_ENGINE_SUBSTITUTION(8),
      /**
       * <code>NO_UNSIGNED_SUBTRACTION = 9;</code>
       */
      NO_UNSIGNED_SUBTRACTION(9),
      /**
       * <code>NO_ZERO_DATE = 10;</code>
       */
      NO_ZERO_DATE(10),
      /**
       * <code>NO_ZERO_IN_DATE = 11;</code>
       */
      NO_ZERO_IN_DATE(11),
      /**
       * <code>ONLY_FULL_GROUP_BY = 15;</code>
       */
      ONLY_FULL_GROUP_BY(15),
      /**
       * <code>PAD_CHAR_TO_FULL_LENGTH = 16;</code>
       */
      PAD_CHAR_TO_FULL_LENGTH(16),
      /**
       * <code>PIPES_AS_CONCAT = 17;</code>
       */
      PIPES_AS_CONCAT(17),
      /**
       * <code>REAL_AS_FLOAT = 18;</code>
       */
      REAL_AS_FLOAT(18),
      /**
       * <code>STRICT_ALL_TABLES = 19;</code>
       */
      STRICT_ALL_TABLES(19),
      /**
       * <code>STRICT_TRANS_TABLES = 20;</code>
       */
      STRICT_TRANS_TABLES(20),
      /**
       * <code>TIME_TRUNCATE_FRACTIONAL = 21;</code>
       */
      TIME_TRUNCATE_FRACTIONAL(21),
      /**
       * <code>ANSI = 22;</code>
       */
      ANSI(22),
      /**
       * <code>TRADITIONAL = 23;</code>
       */
      TRADITIONAL(23),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SQLMODE_UNSPECIFIED = 0;</code>
       */
      public static final int SQLMODE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>ALLOW_INVALID_DATES = 1;</code>
       */
      public static final int ALLOW_INVALID_DATES_VALUE = 1;
      /**
       * <code>ANSI_QUOTES = 2;</code>
       */
      public static final int ANSI_QUOTES_VALUE = 2;
      /**
       * <code>ERROR_FOR_DIVISION_BY_ZERO = 3;</code>
       */
      public static final int ERROR_FOR_DIVISION_BY_ZERO_VALUE = 3;
      /**
       * <code>HIGH_NOT_PRECEDENCE = 4;</code>
       */
      public static final int HIGH_NOT_PRECEDENCE_VALUE = 4;
      /**
       * <code>IGNORE_SPACE = 5;</code>
       */
      public static final int IGNORE_SPACE_VALUE = 5;
      /**
       * <code>NO_AUTO_VALUE_ON_ZERO = 6;</code>
       */
      public static final int NO_AUTO_VALUE_ON_ZERO_VALUE = 6;
      /**
       * <code>NO_BACKSLASH_ESCAPES = 7;</code>
       */
      public static final int NO_BACKSLASH_ESCAPES_VALUE = 7;
      /**
       * <code>NO_ENGINE_SUBSTITUTION = 8;</code>
       */
      public static final int NO_ENGINE_SUBSTITUTION_VALUE = 8;
      /**
       * <code>NO_UNSIGNED_SUBTRACTION = 9;</code>
       */
      public static final int NO_UNSIGNED_SUBTRACTION_VALUE = 9;
      /**
       * <code>NO_ZERO_DATE = 10;</code>
       */
      public static final int NO_ZERO_DATE_VALUE = 10;
      /**
       * <code>NO_ZERO_IN_DATE = 11;</code>
       */
      public static final int NO_ZERO_IN_DATE_VALUE = 11;
      /**
       * <code>ONLY_FULL_GROUP_BY = 15;</code>
       */
      public static final int ONLY_FULL_GROUP_BY_VALUE = 15;
      /**
       * <code>PAD_CHAR_TO_FULL_LENGTH = 16;</code>
       */
      public static final int PAD_CHAR_TO_FULL_LENGTH_VALUE = 16;
      /**
       * <code>PIPES_AS_CONCAT = 17;</code>
       */
      public static final int PIPES_AS_CONCAT_VALUE = 17;
      /**
       * <code>REAL_AS_FLOAT = 18;</code>
       */
      public static final int REAL_AS_FLOAT_VALUE = 18;
      /**
       * <code>STRICT_ALL_TABLES = 19;</code>
       */
      public static final int STRICT_ALL_TABLES_VALUE = 19;
      /**
       * <code>STRICT_TRANS_TABLES = 20;</code>
       */
      public static final int STRICT_TRANS_TABLES_VALUE = 20;
      /**
       * <code>TIME_TRUNCATE_FRACTIONAL = 21;</code>
       */
      public static final int TIME_TRUNCATE_FRACTIONAL_VALUE = 21;
      /**
       * <code>ANSI = 22;</code>
       */
      public static final int ANSI_VALUE = 22;
      /**
       * <code>TRADITIONAL = 23;</code>
       */
      public static final int TRADITIONAL_VALUE = 23;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SQLMode valueOf(int value) {
        return forNumber(value);
      }

      public static SQLMode forNumber(int value) {
        switch (value) {
          case 0: return SQLMODE_UNSPECIFIED;
          case 1: return ALLOW_INVALID_DATES;
          case 2: return ANSI_QUOTES;
          case 3: return ERROR_FOR_DIVISION_BY_ZERO;
          case 4: return HIGH_NOT_PRECEDENCE;
          case 5: return IGNORE_SPACE;
          case 6: return NO_AUTO_VALUE_ON_ZERO;
          case 7: return NO_BACKSLASH_ESCAPES;
          case 8: return NO_ENGINE_SUBSTITUTION;
          case 9: return NO_UNSIGNED_SUBTRACTION;
          case 10: return NO_ZERO_DATE;
          case 11: return NO_ZERO_IN_DATE;
          case 15: return ONLY_FULL_GROUP_BY;
          case 16: return PAD_CHAR_TO_FULL_LENGTH;
          case 17: return PIPES_AS_CONCAT;
          case 18: return REAL_AS_FLOAT;
          case 19: return STRICT_ALL_TABLES;
          case 20: return STRICT_TRANS_TABLES;
          case 21: return TIME_TRUNCATE_FRACTIONAL;
          case 22: return ANSI;
          case 23: return TRADITIONAL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SQLMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SQLMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SQLMode>() {
              public SQLMode findValueByNumber(int number) {
                return SQLMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(0);
      }

      private static final SQLMode[] VALUES = values();

      public static SQLMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SQLMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin}
     */
    public enum AuthPlugin
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>AUTH_PLUGIN_UNSPECIFIED = 0;</code>
       */
      AUTH_PLUGIN_UNSPECIFIED(0),
      /**
       * <code>MYSQL_NATIVE_PASSWORD = 1;</code>
       */
      MYSQL_NATIVE_PASSWORD(1),
      /**
       * <code>CACHING_SHA2_PASSWORD = 2;</code>
       */
      CACHING_SHA2_PASSWORD(2),
      /**
       * <code>SHA256_PASSWORD = 3;</code>
       */
      SHA256_PASSWORD(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>AUTH_PLUGIN_UNSPECIFIED = 0;</code>
       */
      public static final int AUTH_PLUGIN_UNSPECIFIED_VALUE = 0;
      /**
       * <code>MYSQL_NATIVE_PASSWORD = 1;</code>
       */
      public static final int MYSQL_NATIVE_PASSWORD_VALUE = 1;
      /**
       * <code>CACHING_SHA2_PASSWORD = 2;</code>
       */
      public static final int CACHING_SHA2_PASSWORD_VALUE = 2;
      /**
       * <code>SHA256_PASSWORD = 3;</code>
       */
      public static final int SHA256_PASSWORD_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AuthPlugin valueOf(int value) {
        return forNumber(value);
      }

      public static AuthPlugin forNumber(int value) {
        switch (value) {
          case 0: return AUTH_PLUGIN_UNSPECIFIED;
          case 1: return MYSQL_NATIVE_PASSWORD;
          case 2: return CACHING_SHA2_PASSWORD;
          case 3: return SHA256_PASSWORD;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AuthPlugin>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          AuthPlugin> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AuthPlugin>() {
              public AuthPlugin findValueByNumber(int number) {
                return AuthPlugin.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(1);
      }

      private static final AuthPlugin[] VALUES = values();

      public static AuthPlugin valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private AuthPlugin(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin)
    }

    private int bitField0_;
    public static final int INNODB_BUFFER_POOL_SIZE_FIELD_NUMBER = 1;
    private com.google.protobuf.Int64Value innodbBufferPoolSize_;
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    public boolean hasInnodbBufferPoolSize() {
      return innodbBufferPoolSize_ != null;
    }
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    public com.google.protobuf.Int64Value getInnodbBufferPoolSize() {
      return innodbBufferPoolSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbBufferPoolSize_;
    }
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getInnodbBufferPoolSizeOrBuilder() {
      return getInnodbBufferPoolSize();
    }

    public static final int MAX_CONNECTIONS_FIELD_NUMBER = 2;
    private com.google.protobuf.Int64Value maxConnections_;
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    public boolean hasMaxConnections() {
      return maxConnections_ != null;
    }
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    public com.google.protobuf.Int64Value getMaxConnections() {
      return maxConnections_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
    }
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder() {
      return getMaxConnections();
    }

    public static final int LONG_QUERY_TIME_FIELD_NUMBER = 3;
    private com.google.protobuf.DoubleValue longQueryTime_;
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    public boolean hasLongQueryTime() {
      return longQueryTime_ != null;
    }
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    public com.google.protobuf.DoubleValue getLongQueryTime() {
      return longQueryTime_ == null ? com.google.protobuf.DoubleValue.getDefaultInstance() : longQueryTime_;
    }
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    public com.google.protobuf.DoubleValueOrBuilder getLongQueryTimeOrBuilder() {
      return getLongQueryTime();
    }

    public static final int GENERAL_LOG_FIELD_NUMBER = 4;
    private com.google.protobuf.BoolValue generalLog_;
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    public boolean hasGeneralLog() {
      return generalLog_ != null;
    }
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    public com.google.protobuf.BoolValue getGeneralLog() {
      return generalLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : generalLog_;
    }
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getGeneralLogOrBuilder() {
      return getGeneralLog();
    }

    public static final int AUDIT_LOG_FIELD_NUMBER = 5;
    private com.google.protobuf.BoolValue auditLog_;
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    public boolean hasAuditLog() {
      return auditLog_ != null;
    }
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    public com.google.protobuf.BoolValue getAuditLog() {
      return auditLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : auditLog_;
    }
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getAuditLogOrBuilder() {
      return getAuditLog();
    }

    public static final int SQL_MODE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> sqlMode_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode> sqlMode_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode>() {
              public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode.valueOf(from);
                return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode.UNRECOGNIZED : result;
              }
            };
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     */
    public java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode> getSqlModeList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode>(sqlMode_, sqlMode_converter_);
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     */
    public int getSqlModeCount() {
      return sqlMode_.size();
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode getSqlMode(int index) {
      return sqlMode_converter_.convert(sqlMode_.get(index));
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     */
    public java.util.List<java.lang.Integer>
    getSqlModeValueList() {
      return sqlMode_;
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     */
    public int getSqlModeValue(int index) {
      return sqlMode_.get(index);
    }
    private int sqlModeMemoizedSerializedSize;

    public static final int MAX_ALLOWED_PACKET_FIELD_NUMBER = 7;
    private com.google.protobuf.Int64Value maxAllowedPacket_;
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public boolean hasMaxAllowedPacket() {
      return maxAllowedPacket_ != null;
    }
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public com.google.protobuf.Int64Value getMaxAllowedPacket() {
      return maxAllowedPacket_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxAllowedPacket_;
    }
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getMaxAllowedPacketOrBuilder() {
      return getMaxAllowedPacket();
    }

    public static final int DEFAULT_AUTHENTICATION_PLUGIN_FIELD_NUMBER = 8;
    private int defaultAuthenticationPlugin_;
    /**
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
     */
    public int getDefaultAuthenticationPluginValue() {
      return defaultAuthenticationPlugin_;
    }
    /**
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin getDefaultAuthenticationPlugin() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.valueOf(defaultAuthenticationPlugin_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (innodbBufferPoolSize_ != null) {
        output.writeMessage(1, getInnodbBufferPoolSize());
      }
      if (maxConnections_ != null) {
        output.writeMessage(2, getMaxConnections());
      }
      if (longQueryTime_ != null) {
        output.writeMessage(3, getLongQueryTime());
      }
      if (generalLog_ != null) {
        output.writeMessage(4, getGeneralLog());
      }
      if (auditLog_ != null) {
        output.writeMessage(5, getAuditLog());
      }
      if (getSqlModeList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(sqlModeMemoizedSerializedSize);
      }
      for (int i = 0; i < sqlMode_.size(); i++) {
        output.writeEnumNoTag(sqlMode_.get(i));
      }
      if (maxAllowedPacket_ != null) {
        output.writeMessage(7, getMaxAllowedPacket());
      }
      if (defaultAuthenticationPlugin_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.AUTH_PLUGIN_UNSPECIFIED.getNumber()) {
        output.writeEnum(8, defaultAuthenticationPlugin_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (innodbBufferPoolSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getInnodbBufferPoolSize());
      }
      if (maxConnections_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMaxConnections());
      }
      if (longQueryTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLongQueryTime());
      }
      if (generalLog_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getGeneralLog());
      }
      if (auditLog_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getAuditLog());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sqlMode_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(sqlMode_.get(i));
        }
        size += dataSize;
        if (!getSqlModeList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }sqlModeMemoizedSerializedSize = dataSize;
      }
      if (maxAllowedPacket_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getMaxAllowedPacket());
      }
      if (defaultAuthenticationPlugin_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.AUTH_PLUGIN_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, defaultAuthenticationPlugin_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 other = (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0) obj;

      boolean result = true;
      result = result && (hasInnodbBufferPoolSize() == other.hasInnodbBufferPoolSize());
      if (hasInnodbBufferPoolSize()) {
        result = result && getInnodbBufferPoolSize()
            .equals(other.getInnodbBufferPoolSize());
      }
      result = result && (hasMaxConnections() == other.hasMaxConnections());
      if (hasMaxConnections()) {
        result = result && getMaxConnections()
            .equals(other.getMaxConnections());
      }
      result = result && (hasLongQueryTime() == other.hasLongQueryTime());
      if (hasLongQueryTime()) {
        result = result && getLongQueryTime()
            .equals(other.getLongQueryTime());
      }
      result = result && (hasGeneralLog() == other.hasGeneralLog());
      if (hasGeneralLog()) {
        result = result && getGeneralLog()
            .equals(other.getGeneralLog());
      }
      result = result && (hasAuditLog() == other.hasAuditLog());
      if (hasAuditLog()) {
        result = result && getAuditLog()
            .equals(other.getAuditLog());
      }
      result = result && sqlMode_.equals(other.sqlMode_);
      result = result && (hasMaxAllowedPacket() == other.hasMaxAllowedPacket());
      if (hasMaxAllowedPacket()) {
        result = result && getMaxAllowedPacket()
            .equals(other.getMaxAllowedPacket());
      }
      result = result && defaultAuthenticationPlugin_ == other.defaultAuthenticationPlugin_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInnodbBufferPoolSize()) {
        hash = (37 * hash) + INNODB_BUFFER_POOL_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbBufferPoolSize().hashCode();
      }
      if (hasMaxConnections()) {
        hash = (37 * hash) + MAX_CONNECTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxConnections().hashCode();
      }
      if (hasLongQueryTime()) {
        hash = (37 * hash) + LONG_QUERY_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getLongQueryTime().hashCode();
      }
      if (hasGeneralLog()) {
        hash = (37 * hash) + GENERAL_LOG_FIELD_NUMBER;
        hash = (53 * hash) + getGeneralLog().hashCode();
      }
      if (hasAuditLog()) {
        hash = (37 * hash) + AUDIT_LOG_FIELD_NUMBER;
        hash = (53 * hash) + getAuditLog().hashCode();
      }
      if (getSqlModeCount() > 0) {
        hash = (37 * hash) + SQL_MODE_FIELD_NUMBER;
        hash = (53 * hash) + sqlMode_.hashCode();
      }
      if (hasMaxAllowedPacket()) {
        hash = (37 * hash) + MAX_ALLOWED_PACKET_FIELD_NUMBER;
        hash = (53 * hash) + getMaxAllowedPacket().hashCode();
      }
      hash = (37 * hash) + DEFAULT_AUTHENTICATION_PLUGIN_FIELD_NUMBER;
      hash = (53 * hash) + defaultAuthenticationPlugin_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Options and structure of `MysqlConfig8_0` reflects MySQL 8.0 configuration file
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0)
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSize_ = null;
        } else {
          innodbBufferPoolSize_ = null;
          innodbBufferPoolSizeBuilder_ = null;
        }
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = null;
        } else {
          maxConnections_ = null;
          maxConnectionsBuilder_ = null;
        }
        if (longQueryTimeBuilder_ == null) {
          longQueryTime_ = null;
        } else {
          longQueryTime_ = null;
          longQueryTimeBuilder_ = null;
        }
        if (generalLogBuilder_ == null) {
          generalLog_ = null;
        } else {
          generalLog_ = null;
          generalLogBuilder_ = null;
        }
        if (auditLogBuilder_ == null) {
          auditLog_ = null;
        } else {
          auditLog_ = null;
          auditLogBuilder_ = null;
        }
        sqlMode_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacket_ = null;
        } else {
          maxAllowedPacket_ = null;
          maxAllowedPacketBuilder_ = null;
        }
        defaultAuthenticationPlugin_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 build() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 buildPartial() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 result = new yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (innodbBufferPoolSizeBuilder_ == null) {
          result.innodbBufferPoolSize_ = innodbBufferPoolSize_;
        } else {
          result.innodbBufferPoolSize_ = innodbBufferPoolSizeBuilder_.build();
        }
        if (maxConnectionsBuilder_ == null) {
          result.maxConnections_ = maxConnections_;
        } else {
          result.maxConnections_ = maxConnectionsBuilder_.build();
        }
        if (longQueryTimeBuilder_ == null) {
          result.longQueryTime_ = longQueryTime_;
        } else {
          result.longQueryTime_ = longQueryTimeBuilder_.build();
        }
        if (generalLogBuilder_ == null) {
          result.generalLog_ = generalLog_;
        } else {
          result.generalLog_ = generalLogBuilder_.build();
        }
        if (auditLogBuilder_ == null) {
          result.auditLog_ = auditLog_;
        } else {
          result.auditLog_ = auditLogBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          sqlMode_ = java.util.Collections.unmodifiableList(sqlMode_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.sqlMode_ = sqlMode_;
        if (maxAllowedPacketBuilder_ == null) {
          result.maxAllowedPacket_ = maxAllowedPacket_;
        } else {
          result.maxAllowedPacket_ = maxAllowedPacketBuilder_.build();
        }
        result.defaultAuthenticationPlugin_ = defaultAuthenticationPlugin_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0) {
          return mergeFrom((yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 other) {
        if (other == yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance()) return this;
        if (other.hasInnodbBufferPoolSize()) {
          mergeInnodbBufferPoolSize(other.getInnodbBufferPoolSize());
        }
        if (other.hasMaxConnections()) {
          mergeMaxConnections(other.getMaxConnections());
        }
        if (other.hasLongQueryTime()) {
          mergeLongQueryTime(other.getLongQueryTime());
        }
        if (other.hasGeneralLog()) {
          mergeGeneralLog(other.getGeneralLog());
        }
        if (other.hasAuditLog()) {
          mergeAuditLog(other.getAuditLog());
        }
        if (!other.sqlMode_.isEmpty()) {
          if (sqlMode_.isEmpty()) {
            sqlMode_ = other.sqlMode_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureSqlModeIsMutable();
            sqlMode_.addAll(other.sqlMode_);
          }
          onChanged();
        }
        if (other.hasMaxAllowedPacket()) {
          mergeMaxAllowedPacket(other.getMaxAllowedPacket());
        }
        if (other.defaultAuthenticationPlugin_ != 0) {
          setDefaultAuthenticationPluginValue(other.getDefaultAuthenticationPluginValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Int64Value innodbBufferPoolSize_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbBufferPoolSizeBuilder_;
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public boolean hasInnodbBufferPoolSize() {
        return innodbBufferPoolSizeBuilder_ != null || innodbBufferPoolSize_ != null;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public com.google.protobuf.Int64Value getInnodbBufferPoolSize() {
        if (innodbBufferPoolSizeBuilder_ == null) {
          return innodbBufferPoolSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbBufferPoolSize_;
        } else {
          return innodbBufferPoolSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder setInnodbBufferPoolSize(com.google.protobuf.Int64Value value) {
        if (innodbBufferPoolSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbBufferPoolSize_ = value;
          onChanged();
        } else {
          innodbBufferPoolSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder setInnodbBufferPoolSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSize_ = builderForValue.build();
          onChanged();
        } else {
          innodbBufferPoolSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder mergeInnodbBufferPoolSize(com.google.protobuf.Int64Value value) {
        if (innodbBufferPoolSizeBuilder_ == null) {
          if (innodbBufferPoolSize_ != null) {
            innodbBufferPoolSize_ =
              com.google.protobuf.Int64Value.newBuilder(innodbBufferPoolSize_).mergeFrom(value).buildPartial();
          } else {
            innodbBufferPoolSize_ = value;
          }
          onChanged();
        } else {
          innodbBufferPoolSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder clearInnodbBufferPoolSize() {
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSize_ = null;
          onChanged();
        } else {
          innodbBufferPoolSize_ = null;
          innodbBufferPoolSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbBufferPoolSizeBuilder() {
        
        onChanged();
        return getInnodbBufferPoolSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbBufferPoolSizeOrBuilder() {
        if (innodbBufferPoolSizeBuilder_ != null) {
          return innodbBufferPoolSizeBuilder_.getMessageOrBuilder();
        } else {
          return innodbBufferPoolSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbBufferPoolSize_;
        }
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbBufferPoolSizeFieldBuilder() {
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbBufferPoolSize(),
                  getParentForChildren(),
                  isClean());
          innodbBufferPoolSize_ = null;
        }
        return innodbBufferPoolSizeBuilder_;
      }

      private com.google.protobuf.Int64Value maxConnections_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxConnectionsBuilder_;
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public boolean hasMaxConnections() {
        return maxConnectionsBuilder_ != null || maxConnections_ != null;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public com.google.protobuf.Int64Value getMaxConnections() {
        if (maxConnectionsBuilder_ == null) {
          return maxConnections_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
        } else {
          return maxConnectionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder setMaxConnections(com.google.protobuf.Int64Value value) {
        if (maxConnectionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxConnections_ = value;
          onChanged();
        } else {
          maxConnectionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder setMaxConnections(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = builderForValue.build();
          onChanged();
        } else {
          maxConnectionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder mergeMaxConnections(com.google.protobuf.Int64Value value) {
        if (maxConnectionsBuilder_ == null) {
          if (maxConnections_ != null) {
            maxConnections_ =
              com.google.protobuf.Int64Value.newBuilder(maxConnections_).mergeFrom(value).buildPartial();
          } else {
            maxConnections_ = value;
          }
          onChanged();
        } else {
          maxConnectionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder clearMaxConnections() {
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = null;
          onChanged();
        } else {
          maxConnections_ = null;
          maxConnectionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxConnectionsBuilder() {
        
        onChanged();
        return getMaxConnectionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder() {
        if (maxConnectionsBuilder_ != null) {
          return maxConnectionsBuilder_.getMessageOrBuilder();
        } else {
          return maxConnections_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
        }
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxConnectionsFieldBuilder() {
        if (maxConnectionsBuilder_ == null) {
          maxConnectionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxConnections(),
                  getParentForChildren(),
                  isClean());
          maxConnections_ = null;
        }
        return maxConnectionsBuilder_;
      }

      private com.google.protobuf.DoubleValue longQueryTime_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder> longQueryTimeBuilder_;
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public boolean hasLongQueryTime() {
        return longQueryTimeBuilder_ != null || longQueryTime_ != null;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public com.google.protobuf.DoubleValue getLongQueryTime() {
        if (longQueryTimeBuilder_ == null) {
          return longQueryTime_ == null ? com.google.protobuf.DoubleValue.getDefaultInstance() : longQueryTime_;
        } else {
          return longQueryTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder setLongQueryTime(com.google.protobuf.DoubleValue value) {
        if (longQueryTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          longQueryTime_ = value;
          onChanged();
        } else {
          longQueryTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder setLongQueryTime(
          com.google.protobuf.DoubleValue.Builder builderForValue) {
        if (longQueryTimeBuilder_ == null) {
          longQueryTime_ = builderForValue.build();
          onChanged();
        } else {
          longQueryTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder mergeLongQueryTime(com.google.protobuf.DoubleValue value) {
        if (longQueryTimeBuilder_ == null) {
          if (longQueryTime_ != null) {
            longQueryTime_ =
              com.google.protobuf.DoubleValue.newBuilder(longQueryTime_).mergeFrom(value).buildPartial();
          } else {
            longQueryTime_ = value;
          }
          onChanged();
        } else {
          longQueryTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder clearLongQueryTime() {
        if (longQueryTimeBuilder_ == null) {
          longQueryTime_ = null;
          onChanged();
        } else {
          longQueryTime_ = null;
          longQueryTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public com.google.protobuf.DoubleValue.Builder getLongQueryTimeBuilder() {
        
        onChanged();
        return getLongQueryTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public com.google.protobuf.DoubleValueOrBuilder getLongQueryTimeOrBuilder() {
        if (longQueryTimeBuilder_ != null) {
          return longQueryTimeBuilder_.getMessageOrBuilder();
        } else {
          return longQueryTime_ == null ?
              com.google.protobuf.DoubleValue.getDefaultInstance() : longQueryTime_;
        }
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder> 
          getLongQueryTimeFieldBuilder() {
        if (longQueryTimeBuilder_ == null) {
          longQueryTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder>(
                  getLongQueryTime(),
                  getParentForChildren(),
                  isClean());
          longQueryTime_ = null;
        }
        return longQueryTimeBuilder_;
      }

      private com.google.protobuf.BoolValue generalLog_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> generalLogBuilder_;
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public boolean hasGeneralLog() {
        return generalLogBuilder_ != null || generalLog_ != null;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public com.google.protobuf.BoolValue getGeneralLog() {
        if (generalLogBuilder_ == null) {
          return generalLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : generalLog_;
        } else {
          return generalLogBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder setGeneralLog(com.google.protobuf.BoolValue value) {
        if (generalLogBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          generalLog_ = value;
          onChanged();
        } else {
          generalLogBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder setGeneralLog(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (generalLogBuilder_ == null) {
          generalLog_ = builderForValue.build();
          onChanged();
        } else {
          generalLogBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder mergeGeneralLog(com.google.protobuf.BoolValue value) {
        if (generalLogBuilder_ == null) {
          if (generalLog_ != null) {
            generalLog_ =
              com.google.protobuf.BoolValue.newBuilder(generalLog_).mergeFrom(value).buildPartial();
          } else {
            generalLog_ = value;
          }
          onChanged();
        } else {
          generalLogBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder clearGeneralLog() {
        if (generalLogBuilder_ == null) {
          generalLog_ = null;
          onChanged();
        } else {
          generalLog_ = null;
          generalLogBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public com.google.protobuf.BoolValue.Builder getGeneralLogBuilder() {
        
        onChanged();
        return getGeneralLogFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getGeneralLogOrBuilder() {
        if (generalLogBuilder_ != null) {
          return generalLogBuilder_.getMessageOrBuilder();
        } else {
          return generalLog_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : generalLog_;
        }
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getGeneralLogFieldBuilder() {
        if (generalLogBuilder_ == null) {
          generalLogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getGeneralLog(),
                  getParentForChildren(),
                  isClean());
          generalLog_ = null;
        }
        return generalLogBuilder_;
      }

      private com.google.protobuf.BoolValue auditLog_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> auditLogBuilder_;
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public boolean hasAuditLog() {
        return auditLogBuilder_ != null || auditLog_ != null;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public com.google.protobuf.BoolValue getAuditLog() {
        if (auditLogBuilder_ == null) {
          return auditLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : auditLog_;
        } else {
          return auditLogBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder setAuditLog(com.google.protobuf.BoolValue value) {
        if (auditLogBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auditLog_ = value;
          onChanged();
        } else {
          auditLogBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder setAuditLog(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (auditLogBuilder_ == null) {
          auditLog_ = builderForValue.build();
          onChanged();
        } else {
          auditLogBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder mergeAuditLog(com.google.protobuf.BoolValue value) {
        if (auditLogBuilder_ == null) {
          if (auditLog_ != null) {
            auditLog_ =
              com.google.protobuf.BoolValue.newBuilder(auditLog_).mergeFrom(value).buildPartial();
          } else {
            auditLog_ = value;
          }
          onChanged();
        } else {
          auditLogBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder clearAuditLog() {
        if (auditLogBuilder_ == null) {
          auditLog_ = null;
          onChanged();
        } else {
          auditLog_ = null;
          auditLogBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public com.google.protobuf.BoolValue.Builder getAuditLogBuilder() {
        
        onChanged();
        return getAuditLogFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getAuditLogOrBuilder() {
        if (auditLogBuilder_ != null) {
          return auditLogBuilder_.getMessageOrBuilder();
        } else {
          return auditLog_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : auditLog_;
        }
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getAuditLogFieldBuilder() {
        if (auditLogBuilder_ == null) {
          auditLogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getAuditLog(),
                  getParentForChildren(),
                  isClean());
          auditLog_ = null;
        }
        return auditLogBuilder_;
      }

      private java.util.List<java.lang.Integer> sqlMode_ =
        java.util.Collections.emptyList();
      private void ensureSqlModeIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          sqlMode_ = new java.util.ArrayList<java.lang.Integer>(sqlMode_);
          bitField0_ |= 0x00000020;
        }
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode> getSqlModeList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode>(sqlMode_, sqlMode_converter_);
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public int getSqlModeCount() {
        return sqlMode_.size();
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode getSqlMode(int index) {
        return sqlMode_converter_.convert(sqlMode_.get(index));
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public Builder setSqlMode(
          int index, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSqlModeIsMutable();
        sqlMode_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public Builder addSqlMode(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSqlModeIsMutable();
        sqlMode_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public Builder addAllSqlMode(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode> values) {
        ensureSqlModeIsMutable();
        for (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode value : values) {
          sqlMode_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public Builder clearSqlMode() {
        sqlMode_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public java.util.List<java.lang.Integer>
      getSqlModeValueList() {
        return java.util.Collections.unmodifiableList(sqlMode_);
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public int getSqlModeValue(int index) {
        return sqlMode_.get(index);
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public Builder setSqlModeValue(
          int index, int value) {
        ensureSqlModeIsMutable();
        sqlMode_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public Builder addSqlModeValue(int value) {
        ensureSqlModeIsMutable();
        sqlMode_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       */
      public Builder addAllSqlModeValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureSqlModeIsMutable();
        for (int value : values) {
          sqlMode_.add(value);
        }
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxAllowedPacket_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxAllowedPacketBuilder_;
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public boolean hasMaxAllowedPacket() {
        return maxAllowedPacketBuilder_ != null || maxAllowedPacket_ != null;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64Value getMaxAllowedPacket() {
        if (maxAllowedPacketBuilder_ == null) {
          return maxAllowedPacket_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxAllowedPacket_;
        } else {
          return maxAllowedPacketBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder setMaxAllowedPacket(com.google.protobuf.Int64Value value) {
        if (maxAllowedPacketBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxAllowedPacket_ = value;
          onChanged();
        } else {
          maxAllowedPacketBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder setMaxAllowedPacket(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacket_ = builderForValue.build();
          onChanged();
        } else {
          maxAllowedPacketBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder mergeMaxAllowedPacket(com.google.protobuf.Int64Value value) {
        if (maxAllowedPacketBuilder_ == null) {
          if (maxAllowedPacket_ != null) {
            maxAllowedPacket_ =
              com.google.protobuf.Int64Value.newBuilder(maxAllowedPacket_).mergeFrom(value).buildPartial();
          } else {
            maxAllowedPacket_ = value;
          }
          onChanged();
        } else {
          maxAllowedPacketBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder clearMaxAllowedPacket() {
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacket_ = null;
          onChanged();
        } else {
          maxAllowedPacket_ = null;
          maxAllowedPacketBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxAllowedPacketBuilder() {
        
        onChanged();
        return getMaxAllowedPacketFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxAllowedPacketOrBuilder() {
        if (maxAllowedPacketBuilder_ != null) {
          return maxAllowedPacketBuilder_.getMessageOrBuilder();
        } else {
          return maxAllowedPacket_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxAllowedPacket_;
        }
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxAllowedPacketFieldBuilder() {
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacketBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxAllowedPacket(),
                  getParentForChildren(),
                  isClean());
          maxAllowedPacket_ = null;
        }
        return maxAllowedPacketBuilder_;
      }

      private int defaultAuthenticationPlugin_ = 0;
      /**
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
       */
      public int getDefaultAuthenticationPluginValue() {
        return defaultAuthenticationPlugin_;
      }
      /**
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
       */
      public Builder setDefaultAuthenticationPluginValue(int value) {
        defaultAuthenticationPlugin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin getDefaultAuthenticationPlugin() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.valueOf(defaultAuthenticationPlugin_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.UNRECOGNIZED : result;
      }
      /**
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
       */
      public Builder setDefaultAuthenticationPlugin(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        defaultAuthenticationPlugin_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
       */
      public Builder clearDefaultAuthenticationPlugin() {
        
        defaultAuthenticationPlugin_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0)
    private static final yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0();
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MysqlConfig8_0>
        PARSER = new com.google.protobuf.AbstractParser<MysqlConfig8_0>() {
      @java.lang.Override
      public MysqlConfig8_0 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MysqlConfig8_0(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MysqlConfig8_0> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MysqlConfig8_0> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MysqlConfigSet8_0OrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     */
    boolean hasEffectiveConfig();
    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getEffectiveConfig();
    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getEffectiveConfigOrBuilder();

    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     */
    boolean hasUserConfig();
    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getUserConfig();
    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getUserConfigOrBuilder();

    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     */
    boolean hasDefaultConfig();
    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultConfig();
    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getDefaultConfigOrBuilder();
  }
  /**
   * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0}
   */
  public  static final class MysqlConfigSet8_0 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0)
      MysqlConfigSet8_0OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MysqlConfigSet8_0.newBuilder() to construct.
    private MysqlConfigSet8_0(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MysqlConfigSet8_0() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MysqlConfigSet8_0(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder subBuilder = null;
              if (effectiveConfig_ != null) {
                subBuilder = effectiveConfig_.toBuilder();
              }
              effectiveConfig_ = input.readMessage(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(effectiveConfig_);
                effectiveConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder subBuilder = null;
              if (userConfig_ != null) {
                subBuilder = userConfig_.toBuilder();
              }
              userConfig_ = input.readMessage(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userConfig_);
                userConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder subBuilder = null;
              if (defaultConfig_ != null) {
                subBuilder = defaultConfig_.toBuilder();
              }
              defaultConfig_ = input.readMessage(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(defaultConfig_);
                defaultConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.Builder.class);
    }

    public static final int EFFECTIVE_CONFIG_FIELD_NUMBER = 1;
    private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 effectiveConfig_;
    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     */
    public boolean hasEffectiveConfig() {
      return effectiveConfig_ != null;
    }
    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getEffectiveConfig() {
      return effectiveConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : effectiveConfig_;
    }
    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getEffectiveConfigOrBuilder() {
      return getEffectiveConfig();
    }

    public static final int USER_CONFIG_FIELD_NUMBER = 2;
    private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 userConfig_;
    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     */
    public boolean hasUserConfig() {
      return userConfig_ != null;
    }
    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getUserConfig() {
      return userConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : userConfig_;
    }
    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getUserConfigOrBuilder() {
      return getUserConfig();
    }

    public static final int DEFAULT_CONFIG_FIELD_NUMBER = 3;
    private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 defaultConfig_;
    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     */
    public boolean hasDefaultConfig() {
      return defaultConfig_ != null;
    }
    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultConfig() {
      return defaultConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : defaultConfig_;
    }
    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getDefaultConfigOrBuilder() {
      return getDefaultConfig();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (effectiveConfig_ != null) {
        output.writeMessage(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        output.writeMessage(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        output.writeMessage(3, getDefaultConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (effectiveConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDefaultConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 other = (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0) obj;

      boolean result = true;
      result = result && (hasEffectiveConfig() == other.hasEffectiveConfig());
      if (hasEffectiveConfig()) {
        result = result && getEffectiveConfig()
            .equals(other.getEffectiveConfig());
      }
      result = result && (hasUserConfig() == other.hasUserConfig());
      if (hasUserConfig()) {
        result = result && getUserConfig()
            .equals(other.getUserConfig());
      }
      result = result && (hasDefaultConfig() == other.hasDefaultConfig());
      if (hasDefaultConfig()) {
        result = result && getDefaultConfig()
            .equals(other.getDefaultConfig());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEffectiveConfig()) {
        hash = (37 * hash) + EFFECTIVE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getEffectiveConfig().hashCode();
      }
      if (hasUserConfig()) {
        hash = (37 * hash) + USER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getUserConfig().hashCode();
      }
      if (hasDefaultConfig()) {
        hash = (37 * hash) + DEFAULT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getDefaultConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0)
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 build() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 buildPartial() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 result = new yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0(this);
        if (effectiveConfigBuilder_ == null) {
          result.effectiveConfig_ = effectiveConfig_;
        } else {
          result.effectiveConfig_ = effectiveConfigBuilder_.build();
        }
        if (userConfigBuilder_ == null) {
          result.userConfig_ = userConfig_;
        } else {
          result.userConfig_ = userConfigBuilder_.build();
        }
        if (defaultConfigBuilder_ == null) {
          result.defaultConfig_ = defaultConfig_;
        } else {
          result.defaultConfig_ = defaultConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0) {
          return mergeFrom((yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 other) {
        if (other == yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.getDefaultInstance()) return this;
        if (other.hasEffectiveConfig()) {
          mergeEffectiveConfig(other.getEffectiveConfig());
        }
        if (other.hasUserConfig()) {
          mergeUserConfig(other.getUserConfig());
        }
        if (other.hasDefaultConfig()) {
          mergeDefaultConfig(other.getDefaultConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 effectiveConfig_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> effectiveConfigBuilder_;
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public boolean hasEffectiveConfig() {
        return effectiveConfigBuilder_ != null || effectiveConfig_ != null;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          return effectiveConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : effectiveConfig_;
        } else {
          return effectiveConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public Builder setEffectiveConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (effectiveConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          effectiveConfig_ = value;
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public Builder setEffectiveConfig(
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder builderForValue) {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = builderForValue.build();
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public Builder mergeEffectiveConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (effectiveConfigBuilder_ == null) {
          if (effectiveConfig_ != null) {
            effectiveConfig_ =
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.newBuilder(effectiveConfig_).mergeFrom(value).buildPartial();
          } else {
            effectiveConfig_ = value;
          }
          onChanged();
        } else {
          effectiveConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public Builder clearEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
          onChanged();
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder getEffectiveConfigBuilder() {
        
        onChanged();
        return getEffectiveConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getEffectiveConfigOrBuilder() {
        if (effectiveConfigBuilder_ != null) {
          return effectiveConfigBuilder_.getMessageOrBuilder();
        } else {
          return effectiveConfig_ == null ?
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : effectiveConfig_;
        }
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> 
          getEffectiveConfigFieldBuilder() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder>(
                  getEffectiveConfig(),
                  getParentForChildren(),
                  isClean());
          effectiveConfig_ = null;
        }
        return effectiveConfigBuilder_;
      }

      private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 userConfig_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> userConfigBuilder_;
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public boolean hasUserConfig() {
        return userConfigBuilder_ != null || userConfig_ != null;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getUserConfig() {
        if (userConfigBuilder_ == null) {
          return userConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : userConfig_;
        } else {
          return userConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public Builder setUserConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (userConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userConfig_ = value;
          onChanged();
        } else {
          userConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public Builder setUserConfig(
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder builderForValue) {
        if (userConfigBuilder_ == null) {
          userConfig_ = builderForValue.build();
          onChanged();
        } else {
          userConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public Builder mergeUserConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (userConfigBuilder_ == null) {
          if (userConfig_ != null) {
            userConfig_ =
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.newBuilder(userConfig_).mergeFrom(value).buildPartial();
          } else {
            userConfig_ = value;
          }
          onChanged();
        } else {
          userConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public Builder clearUserConfig() {
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
          onChanged();
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder getUserConfigBuilder() {
        
        onChanged();
        return getUserConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getUserConfigOrBuilder() {
        if (userConfigBuilder_ != null) {
          return userConfigBuilder_.getMessageOrBuilder();
        } else {
          return userConfig_ == null ?
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : userConfig_;
        }
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> 
          getUserConfigFieldBuilder() {
        if (userConfigBuilder_ == null) {
          userConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder>(
                  getUserConfig(),
                  getParentForChildren(),
                  isClean());
          userConfig_ = null;
        }
        return userConfigBuilder_;
      }

      private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 defaultConfig_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> defaultConfigBuilder_;
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public boolean hasDefaultConfig() {
        return defaultConfigBuilder_ != null || defaultConfig_ != null;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          return defaultConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : defaultConfig_;
        } else {
          return defaultConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public Builder setDefaultConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (defaultConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          defaultConfig_ = value;
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public Builder setDefaultConfig(
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder builderForValue) {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = builderForValue.build();
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public Builder mergeDefaultConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (defaultConfigBuilder_ == null) {
          if (defaultConfig_ != null) {
            defaultConfig_ =
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.newBuilder(defaultConfig_).mergeFrom(value).buildPartial();
          } else {
            defaultConfig_ = value;
          }
          onChanged();
        } else {
          defaultConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public Builder clearDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
          onChanged();
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder getDefaultConfigBuilder() {
        
        onChanged();
        return getDefaultConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getDefaultConfigOrBuilder() {
        if (defaultConfigBuilder_ != null) {
          return defaultConfigBuilder_.getMessageOrBuilder();
        } else {
          return defaultConfig_ == null ?
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : defaultConfig_;
        }
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> 
          getDefaultConfigFieldBuilder() {
        if (defaultConfigBuilder_ == null) {
          defaultConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder>(
                  getDefaultConfig(),
                  getParentForChildren(),
                  isClean());
          defaultConfig_ = null;
        }
        return defaultConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0)
    private static final yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0();
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MysqlConfigSet8_0>
        PARSER = new com.google.protobuf.AbstractParser<MysqlConfigSet8_0>() {
      @java.lang.Override
      public MysqlConfigSet8_0 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MysqlConfigSet8_0(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MysqlConfigSet8_0> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MysqlConfigSet8_0> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n/yandex/cloud/mdb/mysql/v1/config/mysql" +
      "8_0.proto\022 yandex.cloud.mdb.mysql.v1.con" +
      "fig\032\036google/protobuf/wrappers.proto\032\035yan" +
      "dex/cloud/validation.proto\"\240\t\n\016MysqlConf" +
      "ig8_0\022K\n\027innodb_buffer_pool_size\030\001 \001(\0132\033" +
      ".google.protobuf.Int64ValueB\r\372\3071\t>=52428" +
      "80\022B\n\017max_connections\030\002 \001(\0132\033.google.pro" +
      "tobuf.Int64ValueB\014\372\3071\01010-10000\0225\n\017long_q" +
      "uery_time\030\003 \001(\0132\034.google.protobuf.Double" +
      "Value\022/\n\013general_log\030\004 \001(\0132\032.google.prot" +
      "obuf.BoolValue\022-\n\taudit_log\030\005 \001(\0132\032.goog" +
      "le.protobuf.BoolValue\022J\n\010sql_mode\030\006 \003(\0162" +
      "8.yandex.cloud.mdb.mysql.v1.config.Mysql" +
      "Config8_0.SQLMode\022K\n\022max_allowed_packet\030" +
      "\007 \001(\0132\033.google.protobuf.Int64ValueB\022\372\3071\016" +
      "1024-134217728\022b\n\035default_authentication" +
      "_plugin\030\010 \001(\0162;.yandex.cloud.mdb.mysql.v" +
      "1.config.MysqlConfig8_0.AuthPlugin\"\362\003\n\007S" +
      "QLMode\022\027\n\023SQLMODE_UNSPECIFIED\020\000\022\027\n\023ALLOW" +
      "_INVALID_DATES\020\001\022\017\n\013ANSI_QUOTES\020\002\022\036\n\032ERR" +
      "OR_FOR_DIVISION_BY_ZERO\020\003\022\027\n\023HIGH_NOT_PR" +
      "ECEDENCE\020\004\022\020\n\014IGNORE_SPACE\020\005\022\031\n\025NO_AUTO_" +
      "VALUE_ON_ZERO\020\006\022\030\n\024NO_BACKSLASH_ESCAPES\020" +
      "\007\022\032\n\026NO_ENGINE_SUBSTITUTION\020\010\022\033\n\027NO_UNSI" +
      "GNED_SUBTRACTION\020\t\022\020\n\014NO_ZERO_DATE\020\n\022\023\n\017" +
      "NO_ZERO_IN_DATE\020\013\022\026\n\022ONLY_FULL_GROUP_BY\020" +
      "\017\022\033\n\027PAD_CHAR_TO_FULL_LENGTH\020\020\022\023\n\017PIPES_" +
      "AS_CONCAT\020\021\022\021\n\rREAL_AS_FLOAT\020\022\022\025\n\021STRICT" +
      "_ALL_TABLES\020\023\022\027\n\023STRICT_TRANS_TABLES\020\024\022\034" +
      "\n\030TIME_TRUNCATE_FRACTIONAL\020\025\022\010\n\004ANSI\020\026\022\017" +
      "\n\013TRADITIONAL\020\027\"t\n\nAuthPlugin\022\033\n\027AUTH_PL" +
      "UGIN_UNSPECIFIED\020\000\022\031\n\025MYSQL_NATIVE_PASSW" +
      "ORD\020\001\022\031\n\025CACHING_SHA2_PASSWORD\020\002\022\023\n\017SHA2" +
      "56_PASSWORD\020\003\"\360\001\n\021MysqlConfigSet8_0\022J\n\020e" +
      "ffective_config\030\001 \001(\01320.yandex.cloud.mdb" +
      ".mysql.v1.config.MysqlConfig8_0\022E\n\013user_" +
      "config\030\002 \001(\01320.yandex.cloud.mdb.mysql.v1" +
      ".config.MysqlConfig8_0\022H\n\016default_config" +
      "\030\003 \001(\01320.yandex.cloud.mdb.mysql.v1.confi" +
      "g.MysqlConfig8_0Br\n$yandex.cloud.api.mdb" +
      ".mysql.v1.configZJgithub.com/yandex-clou" +
      "d/go-genproto/yandex/cloud/mdb/mysql/v1/" +
      "config;mysqlb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.WrappersProto.getDescriptor(),
          yandex.cloud.api.Validation.getDescriptor(),
        }, assigner);
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor,
        new java.lang.String[] { "InnodbBufferPoolSize", "MaxConnections", "LongQueryTime", "GeneralLog", "AuditLog", "SqlMode", "MaxAllowedPacket", "DefaultAuthenticationPlugin", });
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor,
        new java.lang.String[] { "EffectiveConfig", "UserConfig", "DefaultConfig", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(yandex.cloud.api.Validation.value);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.WrappersProto.getDescriptor();
    yandex.cloud.api.Validation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}

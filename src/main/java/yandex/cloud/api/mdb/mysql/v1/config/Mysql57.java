// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yandex/cloud/mdb/mysql/v1/config/mysql5_7.proto

package yandex.cloud.api.mdb.mysql.v1.config;

public final class Mysql57 {
  private Mysql57() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MysqlConfig5_7OrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    boolean hasInnodbBufferPoolSize();
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    com.google.protobuf.Int64Value getInnodbBufferPoolSize();
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbBufferPoolSizeOrBuilder();

    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    boolean hasMaxConnections();
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    com.google.protobuf.Int64Value getMaxConnections();
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder();

    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    boolean hasLongQueryTime();
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    com.google.protobuf.DoubleValue getLongQueryTime();
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    com.google.protobuf.DoubleValueOrBuilder getLongQueryTimeOrBuilder();

    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    boolean hasGeneralLog();
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    com.google.protobuf.BoolValue getGeneralLog();
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getGeneralLogOrBuilder();

    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    boolean hasAuditLog();
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    com.google.protobuf.BoolValue getAuditLog();
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getAuditLogOrBuilder();

    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
     */
    java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode> getSqlModeList();
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
     */
    int getSqlModeCount();
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode getSqlMode(int index);
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
     */
    java.util.List<java.lang.Integer>
    getSqlModeValueList();
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
     */
    int getSqlModeValue(int index);

    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    boolean hasMaxAllowedPacket();
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    com.google.protobuf.Int64Value getMaxAllowedPacket();
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxAllowedPacketOrBuilder();

    /**
     * <pre>
     * Authentication plugin used in the managed MySQL cluster.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin default_authentication_plugin = 8;</code>
     */
    int getDefaultAuthenticationPluginValue();
    /**
     * <pre>
     * Authentication plugin used in the managed MySQL cluster.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin default_authentication_plugin = 8;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin getDefaultAuthenticationPlugin();

    /**
     * <pre>
     * Transaction log flush behaviour.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     */
    boolean hasInnodbFlushLogAtTrxCommit();
    /**
     * <pre>
     * Transaction log flush behaviour.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     */
    com.google.protobuf.Int64Value getInnodbFlushLogAtTrxCommit();
    /**
     * <pre>
     * Transaction log flush behaviour.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbFlushLogAtTrxCommitOrBuilder();

    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     */
    boolean hasInnodbLockWaitTimeout();
    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     */
    com.google.protobuf.Int64Value getInnodbLockWaitTimeout();
    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbLockWaitTimeoutOrBuilder();

    /**
     * <pre>
     * Default transaction isolation level.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation transaction_isolation = 11;</code>
     */
    int getTransactionIsolationValue();
    /**
     * <pre>
     * Default transaction isolation level.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation transaction_isolation = 11;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation getTransactionIsolation();

    /**
     * <pre>
     * Print information about deadlocks in error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     */
    boolean hasInnodbPrintAllDeadlocks();
    /**
     * <pre>
     * Print information about deadlocks in error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     */
    com.google.protobuf.BoolValue getInnodbPrintAllDeadlocks();
    /**
     * <pre>
     * Print information about deadlocks in error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInnodbPrintAllDeadlocksOrBuilder();

    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    boolean hasNetReadTimeout();
    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    com.google.protobuf.Int64Value getNetReadTimeout();
    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getNetReadTimeoutOrBuilder();

    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    boolean hasNetWriteTimeout();
    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    com.google.protobuf.Int64Value getNetWriteTimeout();
    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getNetWriteTimeoutOrBuilder();

    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     */
    boolean hasGroupConcatMaxLen();
    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     */
    com.google.protobuf.Int64Value getGroupConcatMaxLen();
    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getGroupConcatMaxLenOrBuilder();

    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    boolean hasTmpTableSize();
    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    com.google.protobuf.Int64Value getTmpTableSize();
    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getTmpTableSizeOrBuilder();

    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    boolean hasMaxHeapTableSize();
    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    com.google.protobuf.Int64Value getMaxHeapTableSize();
    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxHeapTableSizeOrBuilder();

    /**
     * <pre>
     * The servers default time zone.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone)
     * </pre>
     *
     * <code>string default_time_zone = 18;</code>
     */
    java.lang.String getDefaultTimeZone();
    /**
     * <pre>
     * The servers default time zone.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone)
     * </pre>
     *
     * <code>string default_time_zone = 18;</code>
     */
    com.google.protobuf.ByteString
        getDefaultTimeZoneBytes();

    /**
     * <pre>
     * The servers default character set.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server)
     * </pre>
     *
     * <code>string character_set_server = 19;</code>
     */
    java.lang.String getCharacterSetServer();
    /**
     * <pre>
     * The servers default character set.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server)
     * </pre>
     *
     * <code>string character_set_server = 19;</code>
     */
    com.google.protobuf.ByteString
        getCharacterSetServerBytes();

    /**
     * <pre>
     * The server default collation.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server)
     * </pre>
     *
     * <code>string collation_server = 20;</code>
     */
    java.lang.String getCollationServer();
    /**
     * <pre>
     * The server default collation.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server)
     * </pre>
     *
     * <code>string collation_server = 20;</code>
     */
    com.google.protobuf.ByteString
        getCollationServerBytes();
  }
  /**
   * <pre>
   * Options and structure of `MysqlConfig5_7` reflects MySQL 5.7 configuration file
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7}
   */
  public  static final class MysqlConfig5_7 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7)
      MysqlConfig5_7OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MysqlConfig5_7.newBuilder() to construct.
    private MysqlConfig5_7(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MysqlConfig5_7() {
      sqlMode_ = java.util.Collections.emptyList();
      defaultAuthenticationPlugin_ = 0;
      transactionIsolation_ = 0;
      defaultTimeZone_ = "";
      characterSetServer_ = "";
      collationServer_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MysqlConfig5_7(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbBufferPoolSize_ != null) {
                subBuilder = innodbBufferPoolSize_.toBuilder();
              }
              innodbBufferPoolSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbBufferPoolSize_);
                innodbBufferPoolSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxConnections_ != null) {
                subBuilder = maxConnections_.toBuilder();
              }
              maxConnections_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxConnections_);
                maxConnections_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.google.protobuf.DoubleValue.Builder subBuilder = null;
              if (longQueryTime_ != null) {
                subBuilder = longQueryTime_.toBuilder();
              }
              longQueryTime_ = input.readMessage(com.google.protobuf.DoubleValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(longQueryTime_);
                longQueryTime_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (generalLog_ != null) {
                subBuilder = generalLog_.toBuilder();
              }
              generalLog_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(generalLog_);
                generalLog_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (auditLog_ != null) {
                subBuilder = auditLog_.toBuilder();
              }
              auditLog_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auditLog_);
                auditLog_ = subBuilder.buildPartial();
              }

              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                sqlMode_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              sqlMode_.add(rawValue);
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  sqlMode_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                sqlMode_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 58: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxAllowedPacket_ != null) {
                subBuilder = maxAllowedPacket_.toBuilder();
              }
              maxAllowedPacket_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxAllowedPacket_);
                maxAllowedPacket_ = subBuilder.buildPartial();
              }

              break;
            }
            case 64: {
              int rawValue = input.readEnum();

              defaultAuthenticationPlugin_ = rawValue;
              break;
            }
            case 74: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbFlushLogAtTrxCommit_ != null) {
                subBuilder = innodbFlushLogAtTrxCommit_.toBuilder();
              }
              innodbFlushLogAtTrxCommit_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbFlushLogAtTrxCommit_);
                innodbFlushLogAtTrxCommit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 82: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbLockWaitTimeout_ != null) {
                subBuilder = innodbLockWaitTimeout_.toBuilder();
              }
              innodbLockWaitTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbLockWaitTimeout_);
                innodbLockWaitTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 88: {
              int rawValue = input.readEnum();

              transactionIsolation_ = rawValue;
              break;
            }
            case 98: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (innodbPrintAllDeadlocks_ != null) {
                subBuilder = innodbPrintAllDeadlocks_.toBuilder();
              }
              innodbPrintAllDeadlocks_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbPrintAllDeadlocks_);
                innodbPrintAllDeadlocks_ = subBuilder.buildPartial();
              }

              break;
            }
            case 106: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (netReadTimeout_ != null) {
                subBuilder = netReadTimeout_.toBuilder();
              }
              netReadTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(netReadTimeout_);
                netReadTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 114: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (netWriteTimeout_ != null) {
                subBuilder = netWriteTimeout_.toBuilder();
              }
              netWriteTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(netWriteTimeout_);
                netWriteTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 122: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (groupConcatMaxLen_ != null) {
                subBuilder = groupConcatMaxLen_.toBuilder();
              }
              groupConcatMaxLen_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(groupConcatMaxLen_);
                groupConcatMaxLen_ = subBuilder.buildPartial();
              }

              break;
            }
            case 130: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (tmpTableSize_ != null) {
                subBuilder = tmpTableSize_.toBuilder();
              }
              tmpTableSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tmpTableSize_);
                tmpTableSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 138: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxHeapTableSize_ != null) {
                subBuilder = maxHeapTableSize_.toBuilder();
              }
              maxHeapTableSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxHeapTableSize_);
                maxHeapTableSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 146: {
              java.lang.String s = input.readStringRequireUtf8();

              defaultTimeZone_ = s;
              break;
            }
            case 154: {
              java.lang.String s = input.readStringRequireUtf8();

              characterSetServer_ = s;
              break;
            }
            case 162: {
              java.lang.String s = input.readStringRequireUtf8();

              collationServer_ = s;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          sqlMode_ = java.util.Collections.unmodifiableList(sqlMode_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig5_7_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig5_7_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder.class);
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode}
     */
    public enum SQLMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SQLMODE_UNSPECIFIED = 0;</code>
       */
      SQLMODE_UNSPECIFIED(0),
      /**
       * <code>ALLOW_INVALID_DATES = 1;</code>
       */
      ALLOW_INVALID_DATES(1),
      /**
       * <code>ANSI_QUOTES = 2;</code>
       */
      ANSI_QUOTES(2),
      /**
       * <code>ERROR_FOR_DIVISION_BY_ZERO = 3;</code>
       */
      ERROR_FOR_DIVISION_BY_ZERO(3),
      /**
       * <code>HIGH_NOT_PRECEDENCE = 4;</code>
       */
      HIGH_NOT_PRECEDENCE(4),
      /**
       * <code>IGNORE_SPACE = 5;</code>
       */
      IGNORE_SPACE(5),
      /**
       * <code>NO_AUTO_VALUE_ON_ZERO = 6;</code>
       */
      NO_AUTO_VALUE_ON_ZERO(6),
      /**
       * <code>NO_BACKSLASH_ESCAPES = 7;</code>
       */
      NO_BACKSLASH_ESCAPES(7),
      /**
       * <code>NO_ENGINE_SUBSTITUTION = 8;</code>
       */
      NO_ENGINE_SUBSTITUTION(8),
      /**
       * <code>NO_UNSIGNED_SUBTRACTION = 9;</code>
       */
      NO_UNSIGNED_SUBTRACTION(9),
      /**
       * <code>NO_ZERO_DATE = 10;</code>
       */
      NO_ZERO_DATE(10),
      /**
       * <code>NO_ZERO_IN_DATE = 11;</code>
       */
      NO_ZERO_IN_DATE(11),
      /**
       * <code>NO_FIELD_OPTIONS = 12;</code>
       */
      NO_FIELD_OPTIONS(12),
      /**
       * <code>NO_KEY_OPTIONS = 13;</code>
       */
      NO_KEY_OPTIONS(13),
      /**
       * <code>NO_TABLE_OPTIONS = 14;</code>
       */
      NO_TABLE_OPTIONS(14),
      /**
       * <code>ONLY_FULL_GROUP_BY = 15;</code>
       */
      ONLY_FULL_GROUP_BY(15),
      /**
       * <code>PAD_CHAR_TO_FULL_LENGTH = 16;</code>
       */
      PAD_CHAR_TO_FULL_LENGTH(16),
      /**
       * <code>PIPES_AS_CONCAT = 17;</code>
       */
      PIPES_AS_CONCAT(17),
      /**
       * <code>REAL_AS_FLOAT = 18;</code>
       */
      REAL_AS_FLOAT(18),
      /**
       * <code>STRICT_ALL_TABLES = 19;</code>
       */
      STRICT_ALL_TABLES(19),
      /**
       * <code>STRICT_TRANS_TABLES = 20;</code>
       */
      STRICT_TRANS_TABLES(20),
      /**
       * <code>ANSI = 21;</code>
       */
      ANSI(21),
      /**
       * <code>TRADITIONAL = 22;</code>
       */
      TRADITIONAL(22),
      /**
       * <code>DB2 = 23;</code>
       */
      DB2(23),
      /**
       * <code>MAXDB = 24;</code>
       */
      MAXDB(24),
      /**
       * <code>MSSQL = 25;</code>
       */
      MSSQL(25),
      /**
       * <code>MYSQL323 = 26;</code>
       */
      MYSQL323(26),
      /**
       * <code>MYSQL40 = 27;</code>
       */
      MYSQL40(27),
      /**
       * <code>ORACLE = 28;</code>
       */
      ORACLE(28),
      /**
       * <code>POSTGRESQL = 29;</code>
       */
      POSTGRESQL(29),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SQLMODE_UNSPECIFIED = 0;</code>
       */
      public static final int SQLMODE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>ALLOW_INVALID_DATES = 1;</code>
       */
      public static final int ALLOW_INVALID_DATES_VALUE = 1;
      /**
       * <code>ANSI_QUOTES = 2;</code>
       */
      public static final int ANSI_QUOTES_VALUE = 2;
      /**
       * <code>ERROR_FOR_DIVISION_BY_ZERO = 3;</code>
       */
      public static final int ERROR_FOR_DIVISION_BY_ZERO_VALUE = 3;
      /**
       * <code>HIGH_NOT_PRECEDENCE = 4;</code>
       */
      public static final int HIGH_NOT_PRECEDENCE_VALUE = 4;
      /**
       * <code>IGNORE_SPACE = 5;</code>
       */
      public static final int IGNORE_SPACE_VALUE = 5;
      /**
       * <code>NO_AUTO_VALUE_ON_ZERO = 6;</code>
       */
      public static final int NO_AUTO_VALUE_ON_ZERO_VALUE = 6;
      /**
       * <code>NO_BACKSLASH_ESCAPES = 7;</code>
       */
      public static final int NO_BACKSLASH_ESCAPES_VALUE = 7;
      /**
       * <code>NO_ENGINE_SUBSTITUTION = 8;</code>
       */
      public static final int NO_ENGINE_SUBSTITUTION_VALUE = 8;
      /**
       * <code>NO_UNSIGNED_SUBTRACTION = 9;</code>
       */
      public static final int NO_UNSIGNED_SUBTRACTION_VALUE = 9;
      /**
       * <code>NO_ZERO_DATE = 10;</code>
       */
      public static final int NO_ZERO_DATE_VALUE = 10;
      /**
       * <code>NO_ZERO_IN_DATE = 11;</code>
       */
      public static final int NO_ZERO_IN_DATE_VALUE = 11;
      /**
       * <code>NO_FIELD_OPTIONS = 12;</code>
       */
      public static final int NO_FIELD_OPTIONS_VALUE = 12;
      /**
       * <code>NO_KEY_OPTIONS = 13;</code>
       */
      public static final int NO_KEY_OPTIONS_VALUE = 13;
      /**
       * <code>NO_TABLE_OPTIONS = 14;</code>
       */
      public static final int NO_TABLE_OPTIONS_VALUE = 14;
      /**
       * <code>ONLY_FULL_GROUP_BY = 15;</code>
       */
      public static final int ONLY_FULL_GROUP_BY_VALUE = 15;
      /**
       * <code>PAD_CHAR_TO_FULL_LENGTH = 16;</code>
       */
      public static final int PAD_CHAR_TO_FULL_LENGTH_VALUE = 16;
      /**
       * <code>PIPES_AS_CONCAT = 17;</code>
       */
      public static final int PIPES_AS_CONCAT_VALUE = 17;
      /**
       * <code>REAL_AS_FLOAT = 18;</code>
       */
      public static final int REAL_AS_FLOAT_VALUE = 18;
      /**
       * <code>STRICT_ALL_TABLES = 19;</code>
       */
      public static final int STRICT_ALL_TABLES_VALUE = 19;
      /**
       * <code>STRICT_TRANS_TABLES = 20;</code>
       */
      public static final int STRICT_TRANS_TABLES_VALUE = 20;
      /**
       * <code>ANSI = 21;</code>
       */
      public static final int ANSI_VALUE = 21;
      /**
       * <code>TRADITIONAL = 22;</code>
       */
      public static final int TRADITIONAL_VALUE = 22;
      /**
       * <code>DB2 = 23;</code>
       */
      public static final int DB2_VALUE = 23;
      /**
       * <code>MAXDB = 24;</code>
       */
      public static final int MAXDB_VALUE = 24;
      /**
       * <code>MSSQL = 25;</code>
       */
      public static final int MSSQL_VALUE = 25;
      /**
       * <code>MYSQL323 = 26;</code>
       */
      public static final int MYSQL323_VALUE = 26;
      /**
       * <code>MYSQL40 = 27;</code>
       */
      public static final int MYSQL40_VALUE = 27;
      /**
       * <code>ORACLE = 28;</code>
       */
      public static final int ORACLE_VALUE = 28;
      /**
       * <code>POSTGRESQL = 29;</code>
       */
      public static final int POSTGRESQL_VALUE = 29;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SQLMode valueOf(int value) {
        return forNumber(value);
      }

      public static SQLMode forNumber(int value) {
        switch (value) {
          case 0: return SQLMODE_UNSPECIFIED;
          case 1: return ALLOW_INVALID_DATES;
          case 2: return ANSI_QUOTES;
          case 3: return ERROR_FOR_DIVISION_BY_ZERO;
          case 4: return HIGH_NOT_PRECEDENCE;
          case 5: return IGNORE_SPACE;
          case 6: return NO_AUTO_VALUE_ON_ZERO;
          case 7: return NO_BACKSLASH_ESCAPES;
          case 8: return NO_ENGINE_SUBSTITUTION;
          case 9: return NO_UNSIGNED_SUBTRACTION;
          case 10: return NO_ZERO_DATE;
          case 11: return NO_ZERO_IN_DATE;
          case 12: return NO_FIELD_OPTIONS;
          case 13: return NO_KEY_OPTIONS;
          case 14: return NO_TABLE_OPTIONS;
          case 15: return ONLY_FULL_GROUP_BY;
          case 16: return PAD_CHAR_TO_FULL_LENGTH;
          case 17: return PIPES_AS_CONCAT;
          case 18: return REAL_AS_FLOAT;
          case 19: return STRICT_ALL_TABLES;
          case 20: return STRICT_TRANS_TABLES;
          case 21: return ANSI;
          case 22: return TRADITIONAL;
          case 23: return DB2;
          case 24: return MAXDB;
          case 25: return MSSQL;
          case 26: return MYSQL323;
          case 27: return MYSQL40;
          case 28: return ORACLE;
          case 29: return POSTGRESQL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SQLMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SQLMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SQLMode>() {
              public SQLMode findValueByNumber(int number) {
                return SQLMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDescriptor().getEnumTypes().get(0);
      }

      private static final SQLMode[] VALUES = values();

      public static SQLMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SQLMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin}
     */
    public enum AuthPlugin
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>AUTH_PLUGIN_UNSPECIFIED = 0;</code>
       */
      AUTH_PLUGIN_UNSPECIFIED(0),
      /**
       * <pre>
       * Using [Native Pluggable Authentication](https://dev.mysql.com/doc/refman/5.7/en/native-pluggable-authentication.html).
       * </pre>
       *
       * <code>MYSQL_NATIVE_PASSWORD = 1;</code>
       */
      MYSQL_NATIVE_PASSWORD(1),
      /**
       * <code>CACHING_SHA2_PASSWORD = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated
      CACHING_SHA2_PASSWORD(2),
      /**
       * <pre>
       * Using [SHA-256 Pluggable Authentication](https://dev.mysql.com/doc/refman/5.7/en/sha256-pluggable-authentication.html).
       * </pre>
       *
       * <code>SHA256_PASSWORD = 3;</code>
       */
      SHA256_PASSWORD(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>AUTH_PLUGIN_UNSPECIFIED = 0;</code>
       */
      public static final int AUTH_PLUGIN_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * Using [Native Pluggable Authentication](https://dev.mysql.com/doc/refman/5.7/en/native-pluggable-authentication.html).
       * </pre>
       *
       * <code>MYSQL_NATIVE_PASSWORD = 1;</code>
       */
      public static final int MYSQL_NATIVE_PASSWORD_VALUE = 1;
      /**
       * <code>CACHING_SHA2_PASSWORD = 2 [deprecated = true];</code>
       */
      public static final int CACHING_SHA2_PASSWORD_VALUE = 2;
      /**
       * <pre>
       * Using [SHA-256 Pluggable Authentication](https://dev.mysql.com/doc/refman/5.7/en/sha256-pluggable-authentication.html).
       * </pre>
       *
       * <code>SHA256_PASSWORD = 3;</code>
       */
      public static final int SHA256_PASSWORD_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AuthPlugin valueOf(int value) {
        return forNumber(value);
      }

      public static AuthPlugin forNumber(int value) {
        switch (value) {
          case 0: return AUTH_PLUGIN_UNSPECIFIED;
          case 1: return MYSQL_NATIVE_PASSWORD;
          case 2: return CACHING_SHA2_PASSWORD;
          case 3: return SHA256_PASSWORD;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AuthPlugin>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          AuthPlugin> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AuthPlugin>() {
              public AuthPlugin findValueByNumber(int number) {
                return AuthPlugin.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDescriptor().getEnumTypes().get(1);
      }

      private static final AuthPlugin[] VALUES = values();

      public static AuthPlugin valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private AuthPlugin(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation}
     */
    public enum TransactionIsolation
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TRANSACTION_ISOLATION_UNSPECIFIED = 0;</code>
       */
      TRANSACTION_ISOLATION_UNSPECIFIED(0),
      /**
       * <code>READ_COMMITTED = 1;</code>
       */
      READ_COMMITTED(1),
      /**
       * <code>REPEATABLE_READ = 2;</code>
       */
      REPEATABLE_READ(2),
      /**
       * <code>SERIALIZABLE = 3;</code>
       */
      SERIALIZABLE(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>TRANSACTION_ISOLATION_UNSPECIFIED = 0;</code>
       */
      public static final int TRANSACTION_ISOLATION_UNSPECIFIED_VALUE = 0;
      /**
       * <code>READ_COMMITTED = 1;</code>
       */
      public static final int READ_COMMITTED_VALUE = 1;
      /**
       * <code>REPEATABLE_READ = 2;</code>
       */
      public static final int REPEATABLE_READ_VALUE = 2;
      /**
       * <code>SERIALIZABLE = 3;</code>
       */
      public static final int SERIALIZABLE_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TransactionIsolation valueOf(int value) {
        return forNumber(value);
      }

      public static TransactionIsolation forNumber(int value) {
        switch (value) {
          case 0: return TRANSACTION_ISOLATION_UNSPECIFIED;
          case 1: return READ_COMMITTED;
          case 2: return REPEATABLE_READ;
          case 3: return SERIALIZABLE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TransactionIsolation>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TransactionIsolation> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TransactionIsolation>() {
              public TransactionIsolation findValueByNumber(int number) {
                return TransactionIsolation.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDescriptor().getEnumTypes().get(2);
      }

      private static final TransactionIsolation[] VALUES = values();

      public static TransactionIsolation valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TransactionIsolation(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation)
    }

    private int bitField0_;
    public static final int INNODB_BUFFER_POOL_SIZE_FIELD_NUMBER = 1;
    private com.google.protobuf.Int64Value innodbBufferPoolSize_;
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    public boolean hasInnodbBufferPoolSize() {
      return innodbBufferPoolSize_ != null;
    }
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    public com.google.protobuf.Int64Value getInnodbBufferPoolSize() {
      return innodbBufferPoolSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbBufferPoolSize_;
    }
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getInnodbBufferPoolSizeOrBuilder() {
      return getInnodbBufferPoolSize();
    }

    public static final int MAX_CONNECTIONS_FIELD_NUMBER = 2;
    private com.google.protobuf.Int64Value maxConnections_;
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    public boolean hasMaxConnections() {
      return maxConnections_ != null;
    }
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    public com.google.protobuf.Int64Value getMaxConnections() {
      return maxConnections_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
    }
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder() {
      return getMaxConnections();
    }

    public static final int LONG_QUERY_TIME_FIELD_NUMBER = 3;
    private com.google.protobuf.DoubleValue longQueryTime_;
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    public boolean hasLongQueryTime() {
      return longQueryTime_ != null;
    }
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    public com.google.protobuf.DoubleValue getLongQueryTime() {
      return longQueryTime_ == null ? com.google.protobuf.DoubleValue.getDefaultInstance() : longQueryTime_;
    }
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    public com.google.protobuf.DoubleValueOrBuilder getLongQueryTimeOrBuilder() {
      return getLongQueryTime();
    }

    public static final int GENERAL_LOG_FIELD_NUMBER = 4;
    private com.google.protobuf.BoolValue generalLog_;
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    public boolean hasGeneralLog() {
      return generalLog_ != null;
    }
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    public com.google.protobuf.BoolValue getGeneralLog() {
      return generalLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : generalLog_;
    }
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getGeneralLogOrBuilder() {
      return getGeneralLog();
    }

    public static final int AUDIT_LOG_FIELD_NUMBER = 5;
    private com.google.protobuf.BoolValue auditLog_;
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    public boolean hasAuditLog() {
      return auditLog_ != null;
    }
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    public com.google.protobuf.BoolValue getAuditLog() {
      return auditLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : auditLog_;
    }
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getAuditLogOrBuilder() {
      return getAuditLog();
    }

    public static final int SQL_MODE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> sqlMode_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode> sqlMode_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode>() {
              public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode result = yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode.valueOf(from);
                return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode.UNRECOGNIZED : result;
              }
            };
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
     */
    public java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode> getSqlModeList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode>(sqlMode_, sqlMode_converter_);
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
     */
    public int getSqlModeCount() {
      return sqlMode_.size();
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode getSqlMode(int index) {
      return sqlMode_converter_.convert(sqlMode_.get(index));
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
     */
    public java.util.List<java.lang.Integer>
    getSqlModeValueList() {
      return sqlMode_;
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
     */
    public int getSqlModeValue(int index) {
      return sqlMode_.get(index);
    }
    private int sqlModeMemoizedSerializedSize;

    public static final int MAX_ALLOWED_PACKET_FIELD_NUMBER = 7;
    private com.google.protobuf.Int64Value maxAllowedPacket_;
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public boolean hasMaxAllowedPacket() {
      return maxAllowedPacket_ != null;
    }
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public com.google.protobuf.Int64Value getMaxAllowedPacket() {
      return maxAllowedPacket_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxAllowedPacket_;
    }
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getMaxAllowedPacketOrBuilder() {
      return getMaxAllowedPacket();
    }

    public static final int DEFAULT_AUTHENTICATION_PLUGIN_FIELD_NUMBER = 8;
    private int defaultAuthenticationPlugin_;
    /**
     * <pre>
     * Authentication plugin used in the managed MySQL cluster.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin default_authentication_plugin = 8;</code>
     */
    public int getDefaultAuthenticationPluginValue() {
      return defaultAuthenticationPlugin_;
    }
    /**
     * <pre>
     * Authentication plugin used in the managed MySQL cluster.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin default_authentication_plugin = 8;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin getDefaultAuthenticationPlugin() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin result = yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin.valueOf(defaultAuthenticationPlugin_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin.UNRECOGNIZED : result;
    }

    public static final int INNODB_FLUSH_LOG_AT_TRX_COMMIT_FIELD_NUMBER = 9;
    private com.google.protobuf.Int64Value innodbFlushLogAtTrxCommit_;
    /**
     * <pre>
     * Transaction log flush behaviour.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     */
    public boolean hasInnodbFlushLogAtTrxCommit() {
      return innodbFlushLogAtTrxCommit_ != null;
    }
    /**
     * <pre>
     * Transaction log flush behaviour.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     */
    public com.google.protobuf.Int64Value getInnodbFlushLogAtTrxCommit() {
      return innodbFlushLogAtTrxCommit_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbFlushLogAtTrxCommit_;
    }
    /**
     * <pre>
     * Transaction log flush behaviour.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getInnodbFlushLogAtTrxCommitOrBuilder() {
      return getInnodbFlushLogAtTrxCommit();
    }

    public static final int INNODB_LOCK_WAIT_TIMEOUT_FIELD_NUMBER = 10;
    private com.google.protobuf.Int64Value innodbLockWaitTimeout_;
    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     */
    public boolean hasInnodbLockWaitTimeout() {
      return innodbLockWaitTimeout_ != null;
    }
    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     */
    public com.google.protobuf.Int64Value getInnodbLockWaitTimeout() {
      return innodbLockWaitTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbLockWaitTimeout_;
    }
    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getInnodbLockWaitTimeoutOrBuilder() {
      return getInnodbLockWaitTimeout();
    }

    public static final int TRANSACTION_ISOLATION_FIELD_NUMBER = 11;
    private int transactionIsolation_;
    /**
     * <pre>
     * Default transaction isolation level.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation transaction_isolation = 11;</code>
     */
    public int getTransactionIsolationValue() {
      return transactionIsolation_;
    }
    /**
     * <pre>
     * Default transaction isolation level.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation transaction_isolation = 11;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation getTransactionIsolation() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation result = yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation.valueOf(transactionIsolation_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation.UNRECOGNIZED : result;
    }

    public static final int INNODB_PRINT_ALL_DEADLOCKS_FIELD_NUMBER = 12;
    private com.google.protobuf.BoolValue innodbPrintAllDeadlocks_;
    /**
     * <pre>
     * Print information about deadlocks in error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     */
    public boolean hasInnodbPrintAllDeadlocks() {
      return innodbPrintAllDeadlocks_ != null;
    }
    /**
     * <pre>
     * Print information about deadlocks in error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     */
    public com.google.protobuf.BoolValue getInnodbPrintAllDeadlocks() {
      return innodbPrintAllDeadlocks_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbPrintAllDeadlocks_;
    }
    /**
     * <pre>
     * Print information about deadlocks in error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getInnodbPrintAllDeadlocksOrBuilder() {
      return getInnodbPrintAllDeadlocks();
    }

    public static final int NET_READ_TIMEOUT_FIELD_NUMBER = 13;
    private com.google.protobuf.Int64Value netReadTimeout_;
    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    public boolean hasNetReadTimeout() {
      return netReadTimeout_ != null;
    }
    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    public com.google.protobuf.Int64Value getNetReadTimeout() {
      return netReadTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : netReadTimeout_;
    }
    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getNetReadTimeoutOrBuilder() {
      return getNetReadTimeout();
    }

    public static final int NET_WRITE_TIMEOUT_FIELD_NUMBER = 14;
    private com.google.protobuf.Int64Value netWriteTimeout_;
    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    public boolean hasNetWriteTimeout() {
      return netWriteTimeout_ != null;
    }
    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    public com.google.protobuf.Int64Value getNetWriteTimeout() {
      return netWriteTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : netWriteTimeout_;
    }
    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getNetWriteTimeoutOrBuilder() {
      return getNetWriteTimeout();
    }

    public static final int GROUP_CONCAT_MAX_LEN_FIELD_NUMBER = 15;
    private com.google.protobuf.Int64Value groupConcatMaxLen_;
    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     */
    public boolean hasGroupConcatMaxLen() {
      return groupConcatMaxLen_ != null;
    }
    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     */
    public com.google.protobuf.Int64Value getGroupConcatMaxLen() {
      return groupConcatMaxLen_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : groupConcatMaxLen_;
    }
    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getGroupConcatMaxLenOrBuilder() {
      return getGroupConcatMaxLen();
    }

    public static final int TMP_TABLE_SIZE_FIELD_NUMBER = 16;
    private com.google.protobuf.Int64Value tmpTableSize_;
    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public boolean hasTmpTableSize() {
      return tmpTableSize_ != null;
    }
    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public com.google.protobuf.Int64Value getTmpTableSize() {
      return tmpTableSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : tmpTableSize_;
    }
    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getTmpTableSizeOrBuilder() {
      return getTmpTableSize();
    }

    public static final int MAX_HEAP_TABLE_SIZE_FIELD_NUMBER = 17;
    private com.google.protobuf.Int64Value maxHeapTableSize_;
    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public boolean hasMaxHeapTableSize() {
      return maxHeapTableSize_ != null;
    }
    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public com.google.protobuf.Int64Value getMaxHeapTableSize() {
      return maxHeapTableSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxHeapTableSize_;
    }
    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getMaxHeapTableSizeOrBuilder() {
      return getMaxHeapTableSize();
    }

    public static final int DEFAULT_TIME_ZONE_FIELD_NUMBER = 18;
    private volatile java.lang.Object defaultTimeZone_;
    /**
     * <pre>
     * The servers default time zone.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone)
     * </pre>
     *
     * <code>string default_time_zone = 18;</code>
     */
    public java.lang.String getDefaultTimeZone() {
      java.lang.Object ref = defaultTimeZone_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        defaultTimeZone_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The servers default time zone.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone)
     * </pre>
     *
     * <code>string default_time_zone = 18;</code>
     */
    public com.google.protobuf.ByteString
        getDefaultTimeZoneBytes() {
      java.lang.Object ref = defaultTimeZone_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        defaultTimeZone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CHARACTER_SET_SERVER_FIELD_NUMBER = 19;
    private volatile java.lang.Object characterSetServer_;
    /**
     * <pre>
     * The servers default character set.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server)
     * </pre>
     *
     * <code>string character_set_server = 19;</code>
     */
    public java.lang.String getCharacterSetServer() {
      java.lang.Object ref = characterSetServer_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        characterSetServer_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The servers default character set.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server)
     * </pre>
     *
     * <code>string character_set_server = 19;</code>
     */
    public com.google.protobuf.ByteString
        getCharacterSetServerBytes() {
      java.lang.Object ref = characterSetServer_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        characterSetServer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLLATION_SERVER_FIELD_NUMBER = 20;
    private volatile java.lang.Object collationServer_;
    /**
     * <pre>
     * The server default collation.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server)
     * </pre>
     *
     * <code>string collation_server = 20;</code>
     */
    public java.lang.String getCollationServer() {
      java.lang.Object ref = collationServer_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        collationServer_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The server default collation.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server)
     * </pre>
     *
     * <code>string collation_server = 20;</code>
     */
    public com.google.protobuf.ByteString
        getCollationServerBytes() {
      java.lang.Object ref = collationServer_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        collationServer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (innodbBufferPoolSize_ != null) {
        output.writeMessage(1, getInnodbBufferPoolSize());
      }
      if (maxConnections_ != null) {
        output.writeMessage(2, getMaxConnections());
      }
      if (longQueryTime_ != null) {
        output.writeMessage(3, getLongQueryTime());
      }
      if (generalLog_ != null) {
        output.writeMessage(4, getGeneralLog());
      }
      if (auditLog_ != null) {
        output.writeMessage(5, getAuditLog());
      }
      if (getSqlModeList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(sqlModeMemoizedSerializedSize);
      }
      for (int i = 0; i < sqlMode_.size(); i++) {
        output.writeEnumNoTag(sqlMode_.get(i));
      }
      if (maxAllowedPacket_ != null) {
        output.writeMessage(7, getMaxAllowedPacket());
      }
      if (defaultAuthenticationPlugin_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin.AUTH_PLUGIN_UNSPECIFIED.getNumber()) {
        output.writeEnum(8, defaultAuthenticationPlugin_);
      }
      if (innodbFlushLogAtTrxCommit_ != null) {
        output.writeMessage(9, getInnodbFlushLogAtTrxCommit());
      }
      if (innodbLockWaitTimeout_ != null) {
        output.writeMessage(10, getInnodbLockWaitTimeout());
      }
      if (transactionIsolation_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation.TRANSACTION_ISOLATION_UNSPECIFIED.getNumber()) {
        output.writeEnum(11, transactionIsolation_);
      }
      if (innodbPrintAllDeadlocks_ != null) {
        output.writeMessage(12, getInnodbPrintAllDeadlocks());
      }
      if (netReadTimeout_ != null) {
        output.writeMessage(13, getNetReadTimeout());
      }
      if (netWriteTimeout_ != null) {
        output.writeMessage(14, getNetWriteTimeout());
      }
      if (groupConcatMaxLen_ != null) {
        output.writeMessage(15, getGroupConcatMaxLen());
      }
      if (tmpTableSize_ != null) {
        output.writeMessage(16, getTmpTableSize());
      }
      if (maxHeapTableSize_ != null) {
        output.writeMessage(17, getMaxHeapTableSize());
      }
      if (!getDefaultTimeZoneBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 18, defaultTimeZone_);
      }
      if (!getCharacterSetServerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 19, characterSetServer_);
      }
      if (!getCollationServerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 20, collationServer_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (innodbBufferPoolSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getInnodbBufferPoolSize());
      }
      if (maxConnections_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMaxConnections());
      }
      if (longQueryTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLongQueryTime());
      }
      if (generalLog_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getGeneralLog());
      }
      if (auditLog_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getAuditLog());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sqlMode_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(sqlMode_.get(i));
        }
        size += dataSize;
        if (!getSqlModeList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }sqlModeMemoizedSerializedSize = dataSize;
      }
      if (maxAllowedPacket_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getMaxAllowedPacket());
      }
      if (defaultAuthenticationPlugin_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin.AUTH_PLUGIN_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, defaultAuthenticationPlugin_);
      }
      if (innodbFlushLogAtTrxCommit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getInnodbFlushLogAtTrxCommit());
      }
      if (innodbLockWaitTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getInnodbLockWaitTimeout());
      }
      if (transactionIsolation_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation.TRANSACTION_ISOLATION_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, transactionIsolation_);
      }
      if (innodbPrintAllDeadlocks_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getInnodbPrintAllDeadlocks());
      }
      if (netReadTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getNetReadTimeout());
      }
      if (netWriteTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getNetWriteTimeout());
      }
      if (groupConcatMaxLen_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getGroupConcatMaxLen());
      }
      if (tmpTableSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getTmpTableSize());
      }
      if (maxHeapTableSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getMaxHeapTableSize());
      }
      if (!getDefaultTimeZoneBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18, defaultTimeZone_);
      }
      if (!getCharacterSetServerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(19, characterSetServer_);
      }
      if (!getCollationServerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(20, collationServer_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 other = (yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7) obj;

      boolean result = true;
      result = result && (hasInnodbBufferPoolSize() == other.hasInnodbBufferPoolSize());
      if (hasInnodbBufferPoolSize()) {
        result = result && getInnodbBufferPoolSize()
            .equals(other.getInnodbBufferPoolSize());
      }
      result = result && (hasMaxConnections() == other.hasMaxConnections());
      if (hasMaxConnections()) {
        result = result && getMaxConnections()
            .equals(other.getMaxConnections());
      }
      result = result && (hasLongQueryTime() == other.hasLongQueryTime());
      if (hasLongQueryTime()) {
        result = result && getLongQueryTime()
            .equals(other.getLongQueryTime());
      }
      result = result && (hasGeneralLog() == other.hasGeneralLog());
      if (hasGeneralLog()) {
        result = result && getGeneralLog()
            .equals(other.getGeneralLog());
      }
      result = result && (hasAuditLog() == other.hasAuditLog());
      if (hasAuditLog()) {
        result = result && getAuditLog()
            .equals(other.getAuditLog());
      }
      result = result && sqlMode_.equals(other.sqlMode_);
      result = result && (hasMaxAllowedPacket() == other.hasMaxAllowedPacket());
      if (hasMaxAllowedPacket()) {
        result = result && getMaxAllowedPacket()
            .equals(other.getMaxAllowedPacket());
      }
      result = result && defaultAuthenticationPlugin_ == other.defaultAuthenticationPlugin_;
      result = result && (hasInnodbFlushLogAtTrxCommit() == other.hasInnodbFlushLogAtTrxCommit());
      if (hasInnodbFlushLogAtTrxCommit()) {
        result = result && getInnodbFlushLogAtTrxCommit()
            .equals(other.getInnodbFlushLogAtTrxCommit());
      }
      result = result && (hasInnodbLockWaitTimeout() == other.hasInnodbLockWaitTimeout());
      if (hasInnodbLockWaitTimeout()) {
        result = result && getInnodbLockWaitTimeout()
            .equals(other.getInnodbLockWaitTimeout());
      }
      result = result && transactionIsolation_ == other.transactionIsolation_;
      result = result && (hasInnodbPrintAllDeadlocks() == other.hasInnodbPrintAllDeadlocks());
      if (hasInnodbPrintAllDeadlocks()) {
        result = result && getInnodbPrintAllDeadlocks()
            .equals(other.getInnodbPrintAllDeadlocks());
      }
      result = result && (hasNetReadTimeout() == other.hasNetReadTimeout());
      if (hasNetReadTimeout()) {
        result = result && getNetReadTimeout()
            .equals(other.getNetReadTimeout());
      }
      result = result && (hasNetWriteTimeout() == other.hasNetWriteTimeout());
      if (hasNetWriteTimeout()) {
        result = result && getNetWriteTimeout()
            .equals(other.getNetWriteTimeout());
      }
      result = result && (hasGroupConcatMaxLen() == other.hasGroupConcatMaxLen());
      if (hasGroupConcatMaxLen()) {
        result = result && getGroupConcatMaxLen()
            .equals(other.getGroupConcatMaxLen());
      }
      result = result && (hasTmpTableSize() == other.hasTmpTableSize());
      if (hasTmpTableSize()) {
        result = result && getTmpTableSize()
            .equals(other.getTmpTableSize());
      }
      result = result && (hasMaxHeapTableSize() == other.hasMaxHeapTableSize());
      if (hasMaxHeapTableSize()) {
        result = result && getMaxHeapTableSize()
            .equals(other.getMaxHeapTableSize());
      }
      result = result && getDefaultTimeZone()
          .equals(other.getDefaultTimeZone());
      result = result && getCharacterSetServer()
          .equals(other.getCharacterSetServer());
      result = result && getCollationServer()
          .equals(other.getCollationServer());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInnodbBufferPoolSize()) {
        hash = (37 * hash) + INNODB_BUFFER_POOL_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbBufferPoolSize().hashCode();
      }
      if (hasMaxConnections()) {
        hash = (37 * hash) + MAX_CONNECTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxConnections().hashCode();
      }
      if (hasLongQueryTime()) {
        hash = (37 * hash) + LONG_QUERY_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getLongQueryTime().hashCode();
      }
      if (hasGeneralLog()) {
        hash = (37 * hash) + GENERAL_LOG_FIELD_NUMBER;
        hash = (53 * hash) + getGeneralLog().hashCode();
      }
      if (hasAuditLog()) {
        hash = (37 * hash) + AUDIT_LOG_FIELD_NUMBER;
        hash = (53 * hash) + getAuditLog().hashCode();
      }
      if (getSqlModeCount() > 0) {
        hash = (37 * hash) + SQL_MODE_FIELD_NUMBER;
        hash = (53 * hash) + sqlMode_.hashCode();
      }
      if (hasMaxAllowedPacket()) {
        hash = (37 * hash) + MAX_ALLOWED_PACKET_FIELD_NUMBER;
        hash = (53 * hash) + getMaxAllowedPacket().hashCode();
      }
      hash = (37 * hash) + DEFAULT_AUTHENTICATION_PLUGIN_FIELD_NUMBER;
      hash = (53 * hash) + defaultAuthenticationPlugin_;
      if (hasInnodbFlushLogAtTrxCommit()) {
        hash = (37 * hash) + INNODB_FLUSH_LOG_AT_TRX_COMMIT_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbFlushLogAtTrxCommit().hashCode();
      }
      if (hasInnodbLockWaitTimeout()) {
        hash = (37 * hash) + INNODB_LOCK_WAIT_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbLockWaitTimeout().hashCode();
      }
      hash = (37 * hash) + TRANSACTION_ISOLATION_FIELD_NUMBER;
      hash = (53 * hash) + transactionIsolation_;
      if (hasInnodbPrintAllDeadlocks()) {
        hash = (37 * hash) + INNODB_PRINT_ALL_DEADLOCKS_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbPrintAllDeadlocks().hashCode();
      }
      if (hasNetReadTimeout()) {
        hash = (37 * hash) + NET_READ_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getNetReadTimeout().hashCode();
      }
      if (hasNetWriteTimeout()) {
        hash = (37 * hash) + NET_WRITE_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getNetWriteTimeout().hashCode();
      }
      if (hasGroupConcatMaxLen()) {
        hash = (37 * hash) + GROUP_CONCAT_MAX_LEN_FIELD_NUMBER;
        hash = (53 * hash) + getGroupConcatMaxLen().hashCode();
      }
      if (hasTmpTableSize()) {
        hash = (37 * hash) + TMP_TABLE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getTmpTableSize().hashCode();
      }
      if (hasMaxHeapTableSize()) {
        hash = (37 * hash) + MAX_HEAP_TABLE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxHeapTableSize().hashCode();
      }
      hash = (37 * hash) + DEFAULT_TIME_ZONE_FIELD_NUMBER;
      hash = (53 * hash) + getDefaultTimeZone().hashCode();
      hash = (37 * hash) + CHARACTER_SET_SERVER_FIELD_NUMBER;
      hash = (53 * hash) + getCharacterSetServer().hashCode();
      hash = (37 * hash) + COLLATION_SERVER_FIELD_NUMBER;
      hash = (53 * hash) + getCollationServer().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Options and structure of `MysqlConfig5_7` reflects MySQL 5.7 configuration file
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7)
        yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig5_7_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig5_7_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSize_ = null;
        } else {
          innodbBufferPoolSize_ = null;
          innodbBufferPoolSizeBuilder_ = null;
        }
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = null;
        } else {
          maxConnections_ = null;
          maxConnectionsBuilder_ = null;
        }
        if (longQueryTimeBuilder_ == null) {
          longQueryTime_ = null;
        } else {
          longQueryTime_ = null;
          longQueryTimeBuilder_ = null;
        }
        if (generalLogBuilder_ == null) {
          generalLog_ = null;
        } else {
          generalLog_ = null;
          generalLogBuilder_ = null;
        }
        if (auditLogBuilder_ == null) {
          auditLog_ = null;
        } else {
          auditLog_ = null;
          auditLogBuilder_ = null;
        }
        sqlMode_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacket_ = null;
        } else {
          maxAllowedPacket_ = null;
          maxAllowedPacketBuilder_ = null;
        }
        defaultAuthenticationPlugin_ = 0;

        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          innodbFlushLogAtTrxCommit_ = null;
        } else {
          innodbFlushLogAtTrxCommit_ = null;
          innodbFlushLogAtTrxCommitBuilder_ = null;
        }
        if (innodbLockWaitTimeoutBuilder_ == null) {
          innodbLockWaitTimeout_ = null;
        } else {
          innodbLockWaitTimeout_ = null;
          innodbLockWaitTimeoutBuilder_ = null;
        }
        transactionIsolation_ = 0;

        if (innodbPrintAllDeadlocksBuilder_ == null) {
          innodbPrintAllDeadlocks_ = null;
        } else {
          innodbPrintAllDeadlocks_ = null;
          innodbPrintAllDeadlocksBuilder_ = null;
        }
        if (netReadTimeoutBuilder_ == null) {
          netReadTimeout_ = null;
        } else {
          netReadTimeout_ = null;
          netReadTimeoutBuilder_ = null;
        }
        if (netWriteTimeoutBuilder_ == null) {
          netWriteTimeout_ = null;
        } else {
          netWriteTimeout_ = null;
          netWriteTimeoutBuilder_ = null;
        }
        if (groupConcatMaxLenBuilder_ == null) {
          groupConcatMaxLen_ = null;
        } else {
          groupConcatMaxLen_ = null;
          groupConcatMaxLenBuilder_ = null;
        }
        if (tmpTableSizeBuilder_ == null) {
          tmpTableSize_ = null;
        } else {
          tmpTableSize_ = null;
          tmpTableSizeBuilder_ = null;
        }
        if (maxHeapTableSizeBuilder_ == null) {
          maxHeapTableSize_ = null;
        } else {
          maxHeapTableSize_ = null;
          maxHeapTableSizeBuilder_ = null;
        }
        defaultTimeZone_ = "";

        characterSetServer_ = "";

        collationServer_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig5_7_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 build() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 buildPartial() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 result = new yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (innodbBufferPoolSizeBuilder_ == null) {
          result.innodbBufferPoolSize_ = innodbBufferPoolSize_;
        } else {
          result.innodbBufferPoolSize_ = innodbBufferPoolSizeBuilder_.build();
        }
        if (maxConnectionsBuilder_ == null) {
          result.maxConnections_ = maxConnections_;
        } else {
          result.maxConnections_ = maxConnectionsBuilder_.build();
        }
        if (longQueryTimeBuilder_ == null) {
          result.longQueryTime_ = longQueryTime_;
        } else {
          result.longQueryTime_ = longQueryTimeBuilder_.build();
        }
        if (generalLogBuilder_ == null) {
          result.generalLog_ = generalLog_;
        } else {
          result.generalLog_ = generalLogBuilder_.build();
        }
        if (auditLogBuilder_ == null) {
          result.auditLog_ = auditLog_;
        } else {
          result.auditLog_ = auditLogBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          sqlMode_ = java.util.Collections.unmodifiableList(sqlMode_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.sqlMode_ = sqlMode_;
        if (maxAllowedPacketBuilder_ == null) {
          result.maxAllowedPacket_ = maxAllowedPacket_;
        } else {
          result.maxAllowedPacket_ = maxAllowedPacketBuilder_.build();
        }
        result.defaultAuthenticationPlugin_ = defaultAuthenticationPlugin_;
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          result.innodbFlushLogAtTrxCommit_ = innodbFlushLogAtTrxCommit_;
        } else {
          result.innodbFlushLogAtTrxCommit_ = innodbFlushLogAtTrxCommitBuilder_.build();
        }
        if (innodbLockWaitTimeoutBuilder_ == null) {
          result.innodbLockWaitTimeout_ = innodbLockWaitTimeout_;
        } else {
          result.innodbLockWaitTimeout_ = innodbLockWaitTimeoutBuilder_.build();
        }
        result.transactionIsolation_ = transactionIsolation_;
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          result.innodbPrintAllDeadlocks_ = innodbPrintAllDeadlocks_;
        } else {
          result.innodbPrintAllDeadlocks_ = innodbPrintAllDeadlocksBuilder_.build();
        }
        if (netReadTimeoutBuilder_ == null) {
          result.netReadTimeout_ = netReadTimeout_;
        } else {
          result.netReadTimeout_ = netReadTimeoutBuilder_.build();
        }
        if (netWriteTimeoutBuilder_ == null) {
          result.netWriteTimeout_ = netWriteTimeout_;
        } else {
          result.netWriteTimeout_ = netWriteTimeoutBuilder_.build();
        }
        if (groupConcatMaxLenBuilder_ == null) {
          result.groupConcatMaxLen_ = groupConcatMaxLen_;
        } else {
          result.groupConcatMaxLen_ = groupConcatMaxLenBuilder_.build();
        }
        if (tmpTableSizeBuilder_ == null) {
          result.tmpTableSize_ = tmpTableSize_;
        } else {
          result.tmpTableSize_ = tmpTableSizeBuilder_.build();
        }
        if (maxHeapTableSizeBuilder_ == null) {
          result.maxHeapTableSize_ = maxHeapTableSize_;
        } else {
          result.maxHeapTableSize_ = maxHeapTableSizeBuilder_.build();
        }
        result.defaultTimeZone_ = defaultTimeZone_;
        result.characterSetServer_ = characterSetServer_;
        result.collationServer_ = collationServer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7) {
          return mergeFrom((yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 other) {
        if (other == yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance()) return this;
        if (other.hasInnodbBufferPoolSize()) {
          mergeInnodbBufferPoolSize(other.getInnodbBufferPoolSize());
        }
        if (other.hasMaxConnections()) {
          mergeMaxConnections(other.getMaxConnections());
        }
        if (other.hasLongQueryTime()) {
          mergeLongQueryTime(other.getLongQueryTime());
        }
        if (other.hasGeneralLog()) {
          mergeGeneralLog(other.getGeneralLog());
        }
        if (other.hasAuditLog()) {
          mergeAuditLog(other.getAuditLog());
        }
        if (!other.sqlMode_.isEmpty()) {
          if (sqlMode_.isEmpty()) {
            sqlMode_ = other.sqlMode_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureSqlModeIsMutable();
            sqlMode_.addAll(other.sqlMode_);
          }
          onChanged();
        }
        if (other.hasMaxAllowedPacket()) {
          mergeMaxAllowedPacket(other.getMaxAllowedPacket());
        }
        if (other.defaultAuthenticationPlugin_ != 0) {
          setDefaultAuthenticationPluginValue(other.getDefaultAuthenticationPluginValue());
        }
        if (other.hasInnodbFlushLogAtTrxCommit()) {
          mergeInnodbFlushLogAtTrxCommit(other.getInnodbFlushLogAtTrxCommit());
        }
        if (other.hasInnodbLockWaitTimeout()) {
          mergeInnodbLockWaitTimeout(other.getInnodbLockWaitTimeout());
        }
        if (other.transactionIsolation_ != 0) {
          setTransactionIsolationValue(other.getTransactionIsolationValue());
        }
        if (other.hasInnodbPrintAllDeadlocks()) {
          mergeInnodbPrintAllDeadlocks(other.getInnodbPrintAllDeadlocks());
        }
        if (other.hasNetReadTimeout()) {
          mergeNetReadTimeout(other.getNetReadTimeout());
        }
        if (other.hasNetWriteTimeout()) {
          mergeNetWriteTimeout(other.getNetWriteTimeout());
        }
        if (other.hasGroupConcatMaxLen()) {
          mergeGroupConcatMaxLen(other.getGroupConcatMaxLen());
        }
        if (other.hasTmpTableSize()) {
          mergeTmpTableSize(other.getTmpTableSize());
        }
        if (other.hasMaxHeapTableSize()) {
          mergeMaxHeapTableSize(other.getMaxHeapTableSize());
        }
        if (!other.getDefaultTimeZone().isEmpty()) {
          defaultTimeZone_ = other.defaultTimeZone_;
          onChanged();
        }
        if (!other.getCharacterSetServer().isEmpty()) {
          characterSetServer_ = other.characterSetServer_;
          onChanged();
        }
        if (!other.getCollationServer().isEmpty()) {
          collationServer_ = other.collationServer_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Int64Value innodbBufferPoolSize_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbBufferPoolSizeBuilder_;
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public boolean hasInnodbBufferPoolSize() {
        return innodbBufferPoolSizeBuilder_ != null || innodbBufferPoolSize_ != null;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public com.google.protobuf.Int64Value getInnodbBufferPoolSize() {
        if (innodbBufferPoolSizeBuilder_ == null) {
          return innodbBufferPoolSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbBufferPoolSize_;
        } else {
          return innodbBufferPoolSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder setInnodbBufferPoolSize(com.google.protobuf.Int64Value value) {
        if (innodbBufferPoolSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbBufferPoolSize_ = value;
          onChanged();
        } else {
          innodbBufferPoolSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder setInnodbBufferPoolSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSize_ = builderForValue.build();
          onChanged();
        } else {
          innodbBufferPoolSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder mergeInnodbBufferPoolSize(com.google.protobuf.Int64Value value) {
        if (innodbBufferPoolSizeBuilder_ == null) {
          if (innodbBufferPoolSize_ != null) {
            innodbBufferPoolSize_ =
              com.google.protobuf.Int64Value.newBuilder(innodbBufferPoolSize_).mergeFrom(value).buildPartial();
          } else {
            innodbBufferPoolSize_ = value;
          }
          onChanged();
        } else {
          innodbBufferPoolSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder clearInnodbBufferPoolSize() {
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSize_ = null;
          onChanged();
        } else {
          innodbBufferPoolSize_ = null;
          innodbBufferPoolSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbBufferPoolSizeBuilder() {
        
        onChanged();
        return getInnodbBufferPoolSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbBufferPoolSizeOrBuilder() {
        if (innodbBufferPoolSizeBuilder_ != null) {
          return innodbBufferPoolSizeBuilder_.getMessageOrBuilder();
        } else {
          return innodbBufferPoolSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbBufferPoolSize_;
        }
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbBufferPoolSizeFieldBuilder() {
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbBufferPoolSize(),
                  getParentForChildren(),
                  isClean());
          innodbBufferPoolSize_ = null;
        }
        return innodbBufferPoolSizeBuilder_;
      }

      private com.google.protobuf.Int64Value maxConnections_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxConnectionsBuilder_;
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public boolean hasMaxConnections() {
        return maxConnectionsBuilder_ != null || maxConnections_ != null;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public com.google.protobuf.Int64Value getMaxConnections() {
        if (maxConnectionsBuilder_ == null) {
          return maxConnections_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
        } else {
          return maxConnectionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder setMaxConnections(com.google.protobuf.Int64Value value) {
        if (maxConnectionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxConnections_ = value;
          onChanged();
        } else {
          maxConnectionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder setMaxConnections(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = builderForValue.build();
          onChanged();
        } else {
          maxConnectionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder mergeMaxConnections(com.google.protobuf.Int64Value value) {
        if (maxConnectionsBuilder_ == null) {
          if (maxConnections_ != null) {
            maxConnections_ =
              com.google.protobuf.Int64Value.newBuilder(maxConnections_).mergeFrom(value).buildPartial();
          } else {
            maxConnections_ = value;
          }
          onChanged();
        } else {
          maxConnectionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder clearMaxConnections() {
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = null;
          onChanged();
        } else {
          maxConnections_ = null;
          maxConnectionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxConnectionsBuilder() {
        
        onChanged();
        return getMaxConnectionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder() {
        if (maxConnectionsBuilder_ != null) {
          return maxConnectionsBuilder_.getMessageOrBuilder();
        } else {
          return maxConnections_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
        }
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxConnectionsFieldBuilder() {
        if (maxConnectionsBuilder_ == null) {
          maxConnectionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxConnections(),
                  getParentForChildren(),
                  isClean());
          maxConnections_ = null;
        }
        return maxConnectionsBuilder_;
      }

      private com.google.protobuf.DoubleValue longQueryTime_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder> longQueryTimeBuilder_;
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public boolean hasLongQueryTime() {
        return longQueryTimeBuilder_ != null || longQueryTime_ != null;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public com.google.protobuf.DoubleValue getLongQueryTime() {
        if (longQueryTimeBuilder_ == null) {
          return longQueryTime_ == null ? com.google.protobuf.DoubleValue.getDefaultInstance() : longQueryTime_;
        } else {
          return longQueryTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder setLongQueryTime(com.google.protobuf.DoubleValue value) {
        if (longQueryTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          longQueryTime_ = value;
          onChanged();
        } else {
          longQueryTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder setLongQueryTime(
          com.google.protobuf.DoubleValue.Builder builderForValue) {
        if (longQueryTimeBuilder_ == null) {
          longQueryTime_ = builderForValue.build();
          onChanged();
        } else {
          longQueryTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder mergeLongQueryTime(com.google.protobuf.DoubleValue value) {
        if (longQueryTimeBuilder_ == null) {
          if (longQueryTime_ != null) {
            longQueryTime_ =
              com.google.protobuf.DoubleValue.newBuilder(longQueryTime_).mergeFrom(value).buildPartial();
          } else {
            longQueryTime_ = value;
          }
          onChanged();
        } else {
          longQueryTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder clearLongQueryTime() {
        if (longQueryTimeBuilder_ == null) {
          longQueryTime_ = null;
          onChanged();
        } else {
          longQueryTime_ = null;
          longQueryTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public com.google.protobuf.DoubleValue.Builder getLongQueryTimeBuilder() {
        
        onChanged();
        return getLongQueryTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public com.google.protobuf.DoubleValueOrBuilder getLongQueryTimeOrBuilder() {
        if (longQueryTimeBuilder_ != null) {
          return longQueryTimeBuilder_.getMessageOrBuilder();
        } else {
          return longQueryTime_ == null ?
              com.google.protobuf.DoubleValue.getDefaultInstance() : longQueryTime_;
        }
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder> 
          getLongQueryTimeFieldBuilder() {
        if (longQueryTimeBuilder_ == null) {
          longQueryTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder>(
                  getLongQueryTime(),
                  getParentForChildren(),
                  isClean());
          longQueryTime_ = null;
        }
        return longQueryTimeBuilder_;
      }

      private com.google.protobuf.BoolValue generalLog_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> generalLogBuilder_;
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public boolean hasGeneralLog() {
        return generalLogBuilder_ != null || generalLog_ != null;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public com.google.protobuf.BoolValue getGeneralLog() {
        if (generalLogBuilder_ == null) {
          return generalLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : generalLog_;
        } else {
          return generalLogBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder setGeneralLog(com.google.protobuf.BoolValue value) {
        if (generalLogBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          generalLog_ = value;
          onChanged();
        } else {
          generalLogBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder setGeneralLog(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (generalLogBuilder_ == null) {
          generalLog_ = builderForValue.build();
          onChanged();
        } else {
          generalLogBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder mergeGeneralLog(com.google.protobuf.BoolValue value) {
        if (generalLogBuilder_ == null) {
          if (generalLog_ != null) {
            generalLog_ =
              com.google.protobuf.BoolValue.newBuilder(generalLog_).mergeFrom(value).buildPartial();
          } else {
            generalLog_ = value;
          }
          onChanged();
        } else {
          generalLogBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder clearGeneralLog() {
        if (generalLogBuilder_ == null) {
          generalLog_ = null;
          onChanged();
        } else {
          generalLog_ = null;
          generalLogBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public com.google.protobuf.BoolValue.Builder getGeneralLogBuilder() {
        
        onChanged();
        return getGeneralLogFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getGeneralLogOrBuilder() {
        if (generalLogBuilder_ != null) {
          return generalLogBuilder_.getMessageOrBuilder();
        } else {
          return generalLog_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : generalLog_;
        }
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getGeneralLogFieldBuilder() {
        if (generalLogBuilder_ == null) {
          generalLogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getGeneralLog(),
                  getParentForChildren(),
                  isClean());
          generalLog_ = null;
        }
        return generalLogBuilder_;
      }

      private com.google.protobuf.BoolValue auditLog_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> auditLogBuilder_;
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public boolean hasAuditLog() {
        return auditLogBuilder_ != null || auditLog_ != null;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public com.google.protobuf.BoolValue getAuditLog() {
        if (auditLogBuilder_ == null) {
          return auditLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : auditLog_;
        } else {
          return auditLogBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder setAuditLog(com.google.protobuf.BoolValue value) {
        if (auditLogBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auditLog_ = value;
          onChanged();
        } else {
          auditLogBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder setAuditLog(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (auditLogBuilder_ == null) {
          auditLog_ = builderForValue.build();
          onChanged();
        } else {
          auditLogBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder mergeAuditLog(com.google.protobuf.BoolValue value) {
        if (auditLogBuilder_ == null) {
          if (auditLog_ != null) {
            auditLog_ =
              com.google.protobuf.BoolValue.newBuilder(auditLog_).mergeFrom(value).buildPartial();
          } else {
            auditLog_ = value;
          }
          onChanged();
        } else {
          auditLogBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder clearAuditLog() {
        if (auditLogBuilder_ == null) {
          auditLog_ = null;
          onChanged();
        } else {
          auditLog_ = null;
          auditLogBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public com.google.protobuf.BoolValue.Builder getAuditLogBuilder() {
        
        onChanged();
        return getAuditLogFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getAuditLogOrBuilder() {
        if (auditLogBuilder_ != null) {
          return auditLogBuilder_.getMessageOrBuilder();
        } else {
          return auditLog_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : auditLog_;
        }
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getAuditLogFieldBuilder() {
        if (auditLogBuilder_ == null) {
          auditLogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getAuditLog(),
                  getParentForChildren(),
                  isClean());
          auditLog_ = null;
        }
        return auditLogBuilder_;
      }

      private java.util.List<java.lang.Integer> sqlMode_ =
        java.util.Collections.emptyList();
      private void ensureSqlModeIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          sqlMode_ = new java.util.ArrayList<java.lang.Integer>(sqlMode_);
          bitField0_ |= 0x00000020;
        }
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode> getSqlModeList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode>(sqlMode_, sqlMode_converter_);
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public int getSqlModeCount() {
        return sqlMode_.size();
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode getSqlMode(int index) {
        return sqlMode_converter_.convert(sqlMode_.get(index));
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public Builder setSqlMode(
          int index, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSqlModeIsMutable();
        sqlMode_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public Builder addSqlMode(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSqlModeIsMutable();
        sqlMode_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public Builder addAllSqlMode(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode> values) {
        ensureSqlModeIsMutable();
        for (yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.SQLMode value : values) {
          sqlMode_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public Builder clearSqlMode() {
        sqlMode_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public java.util.List<java.lang.Integer>
      getSqlModeValueList() {
        return java.util.Collections.unmodifiableList(sqlMode_);
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public int getSqlModeValue(int index) {
        return sqlMode_.get(index);
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public Builder setSqlModeValue(
          int index, int value) {
        ensureSqlModeIsMutable();
        sqlMode_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public Builder addSqlModeValue(int value) {
        ensureSqlModeIsMutable();
        sqlMode_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode sql_mode = 6;</code>
       */
      public Builder addAllSqlModeValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureSqlModeIsMutable();
        for (int value : values) {
          sqlMode_.add(value);
        }
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxAllowedPacket_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxAllowedPacketBuilder_;
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public boolean hasMaxAllowedPacket() {
        return maxAllowedPacketBuilder_ != null || maxAllowedPacket_ != null;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64Value getMaxAllowedPacket() {
        if (maxAllowedPacketBuilder_ == null) {
          return maxAllowedPacket_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxAllowedPacket_;
        } else {
          return maxAllowedPacketBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder setMaxAllowedPacket(com.google.protobuf.Int64Value value) {
        if (maxAllowedPacketBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxAllowedPacket_ = value;
          onChanged();
        } else {
          maxAllowedPacketBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder setMaxAllowedPacket(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacket_ = builderForValue.build();
          onChanged();
        } else {
          maxAllowedPacketBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder mergeMaxAllowedPacket(com.google.protobuf.Int64Value value) {
        if (maxAllowedPacketBuilder_ == null) {
          if (maxAllowedPacket_ != null) {
            maxAllowedPacket_ =
              com.google.protobuf.Int64Value.newBuilder(maxAllowedPacket_).mergeFrom(value).buildPartial();
          } else {
            maxAllowedPacket_ = value;
          }
          onChanged();
        } else {
          maxAllowedPacketBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder clearMaxAllowedPacket() {
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacket_ = null;
          onChanged();
        } else {
          maxAllowedPacket_ = null;
          maxAllowedPacketBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxAllowedPacketBuilder() {
        
        onChanged();
        return getMaxAllowedPacketFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxAllowedPacketOrBuilder() {
        if (maxAllowedPacketBuilder_ != null) {
          return maxAllowedPacketBuilder_.getMessageOrBuilder();
        } else {
          return maxAllowedPacket_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxAllowedPacket_;
        }
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxAllowedPacketFieldBuilder() {
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacketBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxAllowedPacket(),
                  getParentForChildren(),
                  isClean());
          maxAllowedPacket_ = null;
        }
        return maxAllowedPacketBuilder_;
      }

      private int defaultAuthenticationPlugin_ = 0;
      /**
       * <pre>
       * Authentication plugin used in the managed MySQL cluster.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin default_authentication_plugin = 8;</code>
       */
      public int getDefaultAuthenticationPluginValue() {
        return defaultAuthenticationPlugin_;
      }
      /**
       * <pre>
       * Authentication plugin used in the managed MySQL cluster.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin default_authentication_plugin = 8;</code>
       */
      public Builder setDefaultAuthenticationPluginValue(int value) {
        defaultAuthenticationPlugin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Authentication plugin used in the managed MySQL cluster.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin default_authentication_plugin = 8;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin getDefaultAuthenticationPlugin() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin result = yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin.valueOf(defaultAuthenticationPlugin_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Authentication plugin used in the managed MySQL cluster.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin default_authentication_plugin = 8;</code>
       */
      public Builder setDefaultAuthenticationPlugin(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.AuthPlugin value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        defaultAuthenticationPlugin_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Authentication plugin used in the managed MySQL cluster.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin default_authentication_plugin = 8;</code>
       */
      public Builder clearDefaultAuthenticationPlugin() {
        
        defaultAuthenticationPlugin_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value innodbFlushLogAtTrxCommit_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbFlushLogAtTrxCommitBuilder_;
      /**
       * <pre>
       * Transaction log flush behaviour.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public boolean hasInnodbFlushLogAtTrxCommit() {
        return innodbFlushLogAtTrxCommitBuilder_ != null || innodbFlushLogAtTrxCommit_ != null;
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public com.google.protobuf.Int64Value getInnodbFlushLogAtTrxCommit() {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          return innodbFlushLogAtTrxCommit_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbFlushLogAtTrxCommit_;
        } else {
          return innodbFlushLogAtTrxCommitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder setInnodbFlushLogAtTrxCommit(com.google.protobuf.Int64Value value) {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbFlushLogAtTrxCommit_ = value;
          onChanged();
        } else {
          innodbFlushLogAtTrxCommitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder setInnodbFlushLogAtTrxCommit(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          innodbFlushLogAtTrxCommit_ = builderForValue.build();
          onChanged();
        } else {
          innodbFlushLogAtTrxCommitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder mergeInnodbFlushLogAtTrxCommit(com.google.protobuf.Int64Value value) {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          if (innodbFlushLogAtTrxCommit_ != null) {
            innodbFlushLogAtTrxCommit_ =
              com.google.protobuf.Int64Value.newBuilder(innodbFlushLogAtTrxCommit_).mergeFrom(value).buildPartial();
          } else {
            innodbFlushLogAtTrxCommit_ = value;
          }
          onChanged();
        } else {
          innodbFlushLogAtTrxCommitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder clearInnodbFlushLogAtTrxCommit() {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          innodbFlushLogAtTrxCommit_ = null;
          onChanged();
        } else {
          innodbFlushLogAtTrxCommit_ = null;
          innodbFlushLogAtTrxCommitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbFlushLogAtTrxCommitBuilder() {
        
        onChanged();
        return getInnodbFlushLogAtTrxCommitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbFlushLogAtTrxCommitOrBuilder() {
        if (innodbFlushLogAtTrxCommitBuilder_ != null) {
          return innodbFlushLogAtTrxCommitBuilder_.getMessageOrBuilder();
        } else {
          return innodbFlushLogAtTrxCommit_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbFlushLogAtTrxCommit_;
        }
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbFlushLogAtTrxCommitFieldBuilder() {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          innodbFlushLogAtTrxCommitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbFlushLogAtTrxCommit(),
                  getParentForChildren(),
                  isClean());
          innodbFlushLogAtTrxCommit_ = null;
        }
        return innodbFlushLogAtTrxCommitBuilder_;
      }

      private com.google.protobuf.Int64Value innodbLockWaitTimeout_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbLockWaitTimeoutBuilder_;
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public boolean hasInnodbLockWaitTimeout() {
        return innodbLockWaitTimeoutBuilder_ != null || innodbLockWaitTimeout_ != null;
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public com.google.protobuf.Int64Value getInnodbLockWaitTimeout() {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          return innodbLockWaitTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbLockWaitTimeout_;
        } else {
          return innodbLockWaitTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public Builder setInnodbLockWaitTimeout(com.google.protobuf.Int64Value value) {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbLockWaitTimeout_ = value;
          onChanged();
        } else {
          innodbLockWaitTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public Builder setInnodbLockWaitTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          innodbLockWaitTimeout_ = builderForValue.build();
          onChanged();
        } else {
          innodbLockWaitTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public Builder mergeInnodbLockWaitTimeout(com.google.protobuf.Int64Value value) {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          if (innodbLockWaitTimeout_ != null) {
            innodbLockWaitTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(innodbLockWaitTimeout_).mergeFrom(value).buildPartial();
          } else {
            innodbLockWaitTimeout_ = value;
          }
          onChanged();
        } else {
          innodbLockWaitTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public Builder clearInnodbLockWaitTimeout() {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          innodbLockWaitTimeout_ = null;
          onChanged();
        } else {
          innodbLockWaitTimeout_ = null;
          innodbLockWaitTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbLockWaitTimeoutBuilder() {
        
        onChanged();
        return getInnodbLockWaitTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbLockWaitTimeoutOrBuilder() {
        if (innodbLockWaitTimeoutBuilder_ != null) {
          return innodbLockWaitTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return innodbLockWaitTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbLockWaitTimeout_;
        }
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbLockWaitTimeoutFieldBuilder() {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          innodbLockWaitTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbLockWaitTimeout(),
                  getParentForChildren(),
                  isClean());
          innodbLockWaitTimeout_ = null;
        }
        return innodbLockWaitTimeoutBuilder_;
      }

      private int transactionIsolation_ = 0;
      /**
       * <pre>
       * Default transaction isolation level.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation transaction_isolation = 11;</code>
       */
      public int getTransactionIsolationValue() {
        return transactionIsolation_;
      }
      /**
       * <pre>
       * Default transaction isolation level.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation transaction_isolation = 11;</code>
       */
      public Builder setTransactionIsolationValue(int value) {
        transactionIsolation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Default transaction isolation level.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation transaction_isolation = 11;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation getTransactionIsolation() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation result = yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation.valueOf(transactionIsolation_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Default transaction isolation level.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation transaction_isolation = 11;</code>
       */
      public Builder setTransactionIsolation(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.TransactionIsolation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        transactionIsolation_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Default transaction isolation level.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation transaction_isolation = 11;</code>
       */
      public Builder clearTransactionIsolation() {
        
        transactionIsolation_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue innodbPrintAllDeadlocks_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> innodbPrintAllDeadlocksBuilder_;
      /**
       * <pre>
       * Print information about deadlocks in error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public boolean hasInnodbPrintAllDeadlocks() {
        return innodbPrintAllDeadlocksBuilder_ != null || innodbPrintAllDeadlocks_ != null;
      }
      /**
       * <pre>
       * Print information about deadlocks in error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public com.google.protobuf.BoolValue getInnodbPrintAllDeadlocks() {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          return innodbPrintAllDeadlocks_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbPrintAllDeadlocks_;
        } else {
          return innodbPrintAllDeadlocksBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Print information about deadlocks in error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public Builder setInnodbPrintAllDeadlocks(com.google.protobuf.BoolValue value) {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbPrintAllDeadlocks_ = value;
          onChanged();
        } else {
          innodbPrintAllDeadlocksBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Print information about deadlocks in error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public Builder setInnodbPrintAllDeadlocks(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          innodbPrintAllDeadlocks_ = builderForValue.build();
          onChanged();
        } else {
          innodbPrintAllDeadlocksBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Print information about deadlocks in error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public Builder mergeInnodbPrintAllDeadlocks(com.google.protobuf.BoolValue value) {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          if (innodbPrintAllDeadlocks_ != null) {
            innodbPrintAllDeadlocks_ =
              com.google.protobuf.BoolValue.newBuilder(innodbPrintAllDeadlocks_).mergeFrom(value).buildPartial();
          } else {
            innodbPrintAllDeadlocks_ = value;
          }
          onChanged();
        } else {
          innodbPrintAllDeadlocksBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Print information about deadlocks in error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public Builder clearInnodbPrintAllDeadlocks() {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          innodbPrintAllDeadlocks_ = null;
          onChanged();
        } else {
          innodbPrintAllDeadlocks_ = null;
          innodbPrintAllDeadlocksBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Print information about deadlocks in error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInnodbPrintAllDeadlocksBuilder() {
        
        onChanged();
        return getInnodbPrintAllDeadlocksFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Print information about deadlocks in error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInnodbPrintAllDeadlocksOrBuilder() {
        if (innodbPrintAllDeadlocksBuilder_ != null) {
          return innodbPrintAllDeadlocksBuilder_.getMessageOrBuilder();
        } else {
          return innodbPrintAllDeadlocks_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : innodbPrintAllDeadlocks_;
        }
      }
      /**
       * <pre>
       * Print information about deadlocks in error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInnodbPrintAllDeadlocksFieldBuilder() {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          innodbPrintAllDeadlocksBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInnodbPrintAllDeadlocks(),
                  getParentForChildren(),
                  isClean());
          innodbPrintAllDeadlocks_ = null;
        }
        return innodbPrintAllDeadlocksBuilder_;
      }

      private com.google.protobuf.Int64Value netReadTimeout_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> netReadTimeoutBuilder_;
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public boolean hasNetReadTimeout() {
        return netReadTimeoutBuilder_ != null || netReadTimeout_ != null;
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public com.google.protobuf.Int64Value getNetReadTimeout() {
        if (netReadTimeoutBuilder_ == null) {
          return netReadTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : netReadTimeout_;
        } else {
          return netReadTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder setNetReadTimeout(com.google.protobuf.Int64Value value) {
        if (netReadTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          netReadTimeout_ = value;
          onChanged();
        } else {
          netReadTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder setNetReadTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (netReadTimeoutBuilder_ == null) {
          netReadTimeout_ = builderForValue.build();
          onChanged();
        } else {
          netReadTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder mergeNetReadTimeout(com.google.protobuf.Int64Value value) {
        if (netReadTimeoutBuilder_ == null) {
          if (netReadTimeout_ != null) {
            netReadTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(netReadTimeout_).mergeFrom(value).buildPartial();
          } else {
            netReadTimeout_ = value;
          }
          onChanged();
        } else {
          netReadTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder clearNetReadTimeout() {
        if (netReadTimeoutBuilder_ == null) {
          netReadTimeout_ = null;
          onChanged();
        } else {
          netReadTimeout_ = null;
          netReadTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getNetReadTimeoutBuilder() {
        
        onChanged();
        return getNetReadTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getNetReadTimeoutOrBuilder() {
        if (netReadTimeoutBuilder_ != null) {
          return netReadTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return netReadTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : netReadTimeout_;
        }
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getNetReadTimeoutFieldBuilder() {
        if (netReadTimeoutBuilder_ == null) {
          netReadTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getNetReadTimeout(),
                  getParentForChildren(),
                  isClean());
          netReadTimeout_ = null;
        }
        return netReadTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value netWriteTimeout_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> netWriteTimeoutBuilder_;
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public boolean hasNetWriteTimeout() {
        return netWriteTimeoutBuilder_ != null || netWriteTimeout_ != null;
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public com.google.protobuf.Int64Value getNetWriteTimeout() {
        if (netWriteTimeoutBuilder_ == null) {
          return netWriteTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : netWriteTimeout_;
        } else {
          return netWriteTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder setNetWriteTimeout(com.google.protobuf.Int64Value value) {
        if (netWriteTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          netWriteTimeout_ = value;
          onChanged();
        } else {
          netWriteTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder setNetWriteTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (netWriteTimeoutBuilder_ == null) {
          netWriteTimeout_ = builderForValue.build();
          onChanged();
        } else {
          netWriteTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder mergeNetWriteTimeout(com.google.protobuf.Int64Value value) {
        if (netWriteTimeoutBuilder_ == null) {
          if (netWriteTimeout_ != null) {
            netWriteTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(netWriteTimeout_).mergeFrom(value).buildPartial();
          } else {
            netWriteTimeout_ = value;
          }
          onChanged();
        } else {
          netWriteTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder clearNetWriteTimeout() {
        if (netWriteTimeoutBuilder_ == null) {
          netWriteTimeout_ = null;
          onChanged();
        } else {
          netWriteTimeout_ = null;
          netWriteTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getNetWriteTimeoutBuilder() {
        
        onChanged();
        return getNetWriteTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getNetWriteTimeoutOrBuilder() {
        if (netWriteTimeoutBuilder_ != null) {
          return netWriteTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return netWriteTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : netWriteTimeout_;
        }
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getNetWriteTimeoutFieldBuilder() {
        if (netWriteTimeoutBuilder_ == null) {
          netWriteTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getNetWriteTimeout(),
                  getParentForChildren(),
                  isClean());
          netWriteTimeout_ = null;
        }
        return netWriteTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value groupConcatMaxLen_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> groupConcatMaxLenBuilder_;
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public boolean hasGroupConcatMaxLen() {
        return groupConcatMaxLenBuilder_ != null || groupConcatMaxLen_ != null;
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public com.google.protobuf.Int64Value getGroupConcatMaxLen() {
        if (groupConcatMaxLenBuilder_ == null) {
          return groupConcatMaxLen_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : groupConcatMaxLen_;
        } else {
          return groupConcatMaxLenBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public Builder setGroupConcatMaxLen(com.google.protobuf.Int64Value value) {
        if (groupConcatMaxLenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          groupConcatMaxLen_ = value;
          onChanged();
        } else {
          groupConcatMaxLenBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public Builder setGroupConcatMaxLen(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (groupConcatMaxLenBuilder_ == null) {
          groupConcatMaxLen_ = builderForValue.build();
          onChanged();
        } else {
          groupConcatMaxLenBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public Builder mergeGroupConcatMaxLen(com.google.protobuf.Int64Value value) {
        if (groupConcatMaxLenBuilder_ == null) {
          if (groupConcatMaxLen_ != null) {
            groupConcatMaxLen_ =
              com.google.protobuf.Int64Value.newBuilder(groupConcatMaxLen_).mergeFrom(value).buildPartial();
          } else {
            groupConcatMaxLen_ = value;
          }
          onChanged();
        } else {
          groupConcatMaxLenBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public Builder clearGroupConcatMaxLen() {
        if (groupConcatMaxLenBuilder_ == null) {
          groupConcatMaxLen_ = null;
          onChanged();
        } else {
          groupConcatMaxLen_ = null;
          groupConcatMaxLenBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getGroupConcatMaxLenBuilder() {
        
        onChanged();
        return getGroupConcatMaxLenFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getGroupConcatMaxLenOrBuilder() {
        if (groupConcatMaxLenBuilder_ != null) {
          return groupConcatMaxLenBuilder_.getMessageOrBuilder();
        } else {
          return groupConcatMaxLen_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : groupConcatMaxLen_;
        }
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getGroupConcatMaxLenFieldBuilder() {
        if (groupConcatMaxLenBuilder_ == null) {
          groupConcatMaxLenBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getGroupConcatMaxLen(),
                  getParentForChildren(),
                  isClean());
          groupConcatMaxLen_ = null;
        }
        return groupConcatMaxLenBuilder_;
      }

      private com.google.protobuf.Int64Value tmpTableSize_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> tmpTableSizeBuilder_;
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public boolean hasTmpTableSize() {
        return tmpTableSizeBuilder_ != null || tmpTableSize_ != null;
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64Value getTmpTableSize() {
        if (tmpTableSizeBuilder_ == null) {
          return tmpTableSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : tmpTableSize_;
        } else {
          return tmpTableSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder setTmpTableSize(com.google.protobuf.Int64Value value) {
        if (tmpTableSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tmpTableSize_ = value;
          onChanged();
        } else {
          tmpTableSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder setTmpTableSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (tmpTableSizeBuilder_ == null) {
          tmpTableSize_ = builderForValue.build();
          onChanged();
        } else {
          tmpTableSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder mergeTmpTableSize(com.google.protobuf.Int64Value value) {
        if (tmpTableSizeBuilder_ == null) {
          if (tmpTableSize_ != null) {
            tmpTableSize_ =
              com.google.protobuf.Int64Value.newBuilder(tmpTableSize_).mergeFrom(value).buildPartial();
          } else {
            tmpTableSize_ = value;
          }
          onChanged();
        } else {
          tmpTableSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder clearTmpTableSize() {
        if (tmpTableSizeBuilder_ == null) {
          tmpTableSize_ = null;
          onChanged();
        } else {
          tmpTableSize_ = null;
          tmpTableSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getTmpTableSizeBuilder() {
        
        onChanged();
        return getTmpTableSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getTmpTableSizeOrBuilder() {
        if (tmpTableSizeBuilder_ != null) {
          return tmpTableSizeBuilder_.getMessageOrBuilder();
        } else {
          return tmpTableSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : tmpTableSize_;
        }
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getTmpTableSizeFieldBuilder() {
        if (tmpTableSizeBuilder_ == null) {
          tmpTableSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getTmpTableSize(),
                  getParentForChildren(),
                  isClean());
          tmpTableSize_ = null;
        }
        return tmpTableSizeBuilder_;
      }

      private com.google.protobuf.Int64Value maxHeapTableSize_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxHeapTableSizeBuilder_;
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public boolean hasMaxHeapTableSize() {
        return maxHeapTableSizeBuilder_ != null || maxHeapTableSize_ != null;
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64Value getMaxHeapTableSize() {
        if (maxHeapTableSizeBuilder_ == null) {
          return maxHeapTableSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxHeapTableSize_;
        } else {
          return maxHeapTableSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder setMaxHeapTableSize(com.google.protobuf.Int64Value value) {
        if (maxHeapTableSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxHeapTableSize_ = value;
          onChanged();
        } else {
          maxHeapTableSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder setMaxHeapTableSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxHeapTableSizeBuilder_ == null) {
          maxHeapTableSize_ = builderForValue.build();
          onChanged();
        } else {
          maxHeapTableSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder mergeMaxHeapTableSize(com.google.protobuf.Int64Value value) {
        if (maxHeapTableSizeBuilder_ == null) {
          if (maxHeapTableSize_ != null) {
            maxHeapTableSize_ =
              com.google.protobuf.Int64Value.newBuilder(maxHeapTableSize_).mergeFrom(value).buildPartial();
          } else {
            maxHeapTableSize_ = value;
          }
          onChanged();
        } else {
          maxHeapTableSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public Builder clearMaxHeapTableSize() {
        if (maxHeapTableSizeBuilder_ == null) {
          maxHeapTableSize_ = null;
          onChanged();
        } else {
          maxHeapTableSize_ = null;
          maxHeapTableSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxHeapTableSizeBuilder() {
        
        onChanged();
        return getMaxHeapTableSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxHeapTableSizeOrBuilder() {
        if (maxHeapTableSizeBuilder_ != null) {
          return maxHeapTableSizeBuilder_.getMessageOrBuilder();
        } else {
          return maxHeapTableSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxHeapTableSize_;
        }
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "1024-134217728"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxHeapTableSizeFieldBuilder() {
        if (maxHeapTableSizeBuilder_ == null) {
          maxHeapTableSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxHeapTableSize(),
                  getParentForChildren(),
                  isClean());
          maxHeapTableSize_ = null;
        }
        return maxHeapTableSizeBuilder_;
      }

      private java.lang.Object defaultTimeZone_ = "";
      /**
       * <pre>
       * The servers default time zone.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone)
       * </pre>
       *
       * <code>string default_time_zone = 18;</code>
       */
      public java.lang.String getDefaultTimeZone() {
        java.lang.Object ref = defaultTimeZone_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          defaultTimeZone_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The servers default time zone.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone)
       * </pre>
       *
       * <code>string default_time_zone = 18;</code>
       */
      public com.google.protobuf.ByteString
          getDefaultTimeZoneBytes() {
        java.lang.Object ref = defaultTimeZone_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          defaultTimeZone_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The servers default time zone.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone)
       * </pre>
       *
       * <code>string default_time_zone = 18;</code>
       */
      public Builder setDefaultTimeZone(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        defaultTimeZone_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The servers default time zone.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone)
       * </pre>
       *
       * <code>string default_time_zone = 18;</code>
       */
      public Builder clearDefaultTimeZone() {
        
        defaultTimeZone_ = getDefaultInstance().getDefaultTimeZone();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The servers default time zone.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone)
       * </pre>
       *
       * <code>string default_time_zone = 18;</code>
       */
      public Builder setDefaultTimeZoneBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        defaultTimeZone_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object characterSetServer_ = "";
      /**
       * <pre>
       * The servers default character set.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server)
       * </pre>
       *
       * <code>string character_set_server = 19;</code>
       */
      public java.lang.String getCharacterSetServer() {
        java.lang.Object ref = characterSetServer_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          characterSetServer_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The servers default character set.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server)
       * </pre>
       *
       * <code>string character_set_server = 19;</code>
       */
      public com.google.protobuf.ByteString
          getCharacterSetServerBytes() {
        java.lang.Object ref = characterSetServer_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          characterSetServer_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The servers default character set.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server)
       * </pre>
       *
       * <code>string character_set_server = 19;</code>
       */
      public Builder setCharacterSetServer(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        characterSetServer_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The servers default character set.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server)
       * </pre>
       *
       * <code>string character_set_server = 19;</code>
       */
      public Builder clearCharacterSetServer() {
        
        characterSetServer_ = getDefaultInstance().getCharacterSetServer();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The servers default character set.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server)
       * </pre>
       *
       * <code>string character_set_server = 19;</code>
       */
      public Builder setCharacterSetServerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        characterSetServer_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object collationServer_ = "";
      /**
       * <pre>
       * The server default collation.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server)
       * </pre>
       *
       * <code>string collation_server = 20;</code>
       */
      public java.lang.String getCollationServer() {
        java.lang.Object ref = collationServer_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          collationServer_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The server default collation.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server)
       * </pre>
       *
       * <code>string collation_server = 20;</code>
       */
      public com.google.protobuf.ByteString
          getCollationServerBytes() {
        java.lang.Object ref = collationServer_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          collationServer_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The server default collation.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server)
       * </pre>
       *
       * <code>string collation_server = 20;</code>
       */
      public Builder setCollationServer(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        collationServer_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The server default collation.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server)
       * </pre>
       *
       * <code>string collation_server = 20;</code>
       */
      public Builder clearCollationServer() {
        
        collationServer_ = getDefaultInstance().getCollationServer();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The server default collation.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server)
       * </pre>
       *
       * <code>string collation_server = 20;</code>
       */
      public Builder setCollationServerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        collationServer_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7)
    private static final yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7();
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MysqlConfig5_7>
        PARSER = new com.google.protobuf.AbstractParser<MysqlConfig5_7>() {
      @java.lang.Override
      public MysqlConfig5_7 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MysqlConfig5_7(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MysqlConfig5_7> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MysqlConfig5_7> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MysqlConfigSet5_7OrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
     */
    boolean hasEffectiveConfig();
    /**
     * <pre>
     * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getEffectiveConfig();
    /**
     * <pre>
     * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder getEffectiveConfigOrBuilder();

    /**
     * <pre>
     * User-defined settings for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
     */
    boolean hasUserConfig();
    /**
     * <pre>
     * User-defined settings for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getUserConfig();
    /**
     * <pre>
     * User-defined settings for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder getUserConfigOrBuilder();

    /**
     * <pre>
     * Default configuration for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
     */
    boolean hasDefaultConfig();
    /**
     * <pre>
     * Default configuration for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getDefaultConfig();
    /**
     * <pre>
     * Default configuration for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder getDefaultConfigOrBuilder();
  }
  /**
   * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7}
   */
  public  static final class MysqlConfigSet5_7 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7)
      MysqlConfigSet5_7OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MysqlConfigSet5_7.newBuilder() to construct.
    private MysqlConfigSet5_7(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MysqlConfigSet5_7() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MysqlConfigSet5_7(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder subBuilder = null;
              if (effectiveConfig_ != null) {
                subBuilder = effectiveConfig_.toBuilder();
              }
              effectiveConfig_ = input.readMessage(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(effectiveConfig_);
                effectiveConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder subBuilder = null;
              if (userConfig_ != null) {
                subBuilder = userConfig_.toBuilder();
              }
              userConfig_ = input.readMessage(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userConfig_);
                userConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder subBuilder = null;
              if (defaultConfig_ != null) {
                subBuilder = defaultConfig_.toBuilder();
              }
              defaultConfig_ = input.readMessage(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(defaultConfig_);
                defaultConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet5_7_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet5_7_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7.Builder.class);
    }

    public static final int EFFECTIVE_CONFIG_FIELD_NUMBER = 1;
    private yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 effectiveConfig_;
    /**
     * <pre>
     * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
     */
    public boolean hasEffectiveConfig() {
      return effectiveConfig_ != null;
    }
    /**
     * <pre>
     * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getEffectiveConfig() {
      return effectiveConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance() : effectiveConfig_;
    }
    /**
     * <pre>
     * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder getEffectiveConfigOrBuilder() {
      return getEffectiveConfig();
    }

    public static final int USER_CONFIG_FIELD_NUMBER = 2;
    private yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 userConfig_;
    /**
     * <pre>
     * User-defined settings for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
     */
    public boolean hasUserConfig() {
      return userConfig_ != null;
    }
    /**
     * <pre>
     * User-defined settings for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getUserConfig() {
      return userConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance() : userConfig_;
    }
    /**
     * <pre>
     * User-defined settings for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder getUserConfigOrBuilder() {
      return getUserConfig();
    }

    public static final int DEFAULT_CONFIG_FIELD_NUMBER = 3;
    private yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 defaultConfig_;
    /**
     * <pre>
     * Default configuration for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
     */
    public boolean hasDefaultConfig() {
      return defaultConfig_ != null;
    }
    /**
     * <pre>
     * Default configuration for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getDefaultConfig() {
      return defaultConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance() : defaultConfig_;
    }
    /**
     * <pre>
     * Default configuration for a MySQL 5.7 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
     */
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder getDefaultConfigOrBuilder() {
      return getDefaultConfig();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (effectiveConfig_ != null) {
        output.writeMessage(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        output.writeMessage(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        output.writeMessage(3, getDefaultConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (effectiveConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDefaultConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 other = (yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7) obj;

      boolean result = true;
      result = result && (hasEffectiveConfig() == other.hasEffectiveConfig());
      if (hasEffectiveConfig()) {
        result = result && getEffectiveConfig()
            .equals(other.getEffectiveConfig());
      }
      result = result && (hasUserConfig() == other.hasUserConfig());
      if (hasUserConfig()) {
        result = result && getUserConfig()
            .equals(other.getUserConfig());
      }
      result = result && (hasDefaultConfig() == other.hasDefaultConfig());
      if (hasDefaultConfig()) {
        result = result && getDefaultConfig()
            .equals(other.getDefaultConfig());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEffectiveConfig()) {
        hash = (37 * hash) + EFFECTIVE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getEffectiveConfig().hashCode();
      }
      if (hasUserConfig()) {
        hash = (37 * hash) + USER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getUserConfig().hashCode();
      }
      if (hasDefaultConfig()) {
        hash = (37 * hash) + DEFAULT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getDefaultConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7)
        yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet5_7_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet5_7_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet5_7_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 build() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 buildPartial() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 result = new yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7(this);
        if (effectiveConfigBuilder_ == null) {
          result.effectiveConfig_ = effectiveConfig_;
        } else {
          result.effectiveConfig_ = effectiveConfigBuilder_.build();
        }
        if (userConfigBuilder_ == null) {
          result.userConfig_ = userConfig_;
        } else {
          result.userConfig_ = userConfigBuilder_.build();
        }
        if (defaultConfigBuilder_ == null) {
          result.defaultConfig_ = defaultConfig_;
        } else {
          result.defaultConfig_ = defaultConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7) {
          return mergeFrom((yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 other) {
        if (other == yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7.getDefaultInstance()) return this;
        if (other.hasEffectiveConfig()) {
          mergeEffectiveConfig(other.getEffectiveConfig());
        }
        if (other.hasUserConfig()) {
          mergeUserConfig(other.getUserConfig());
        }
        if (other.hasDefaultConfig()) {
          mergeDefaultConfig(other.getDefaultConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 effectiveConfig_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder> effectiveConfigBuilder_;
      /**
       * <pre>
       * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
       */
      public boolean hasEffectiveConfig() {
        return effectiveConfigBuilder_ != null || effectiveConfig_ != null;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          return effectiveConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance() : effectiveConfig_;
        } else {
          return effectiveConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
       */
      public Builder setEffectiveConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 value) {
        if (effectiveConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          effectiveConfig_ = value;
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
       */
      public Builder setEffectiveConfig(
          yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder builderForValue) {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = builderForValue.build();
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
       */
      public Builder mergeEffectiveConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 value) {
        if (effectiveConfigBuilder_ == null) {
          if (effectiveConfig_ != null) {
            effectiveConfig_ =
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.newBuilder(effectiveConfig_).mergeFrom(value).buildPartial();
          } else {
            effectiveConfig_ = value;
          }
          onChanged();
        } else {
          effectiveConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
       */
      public Builder clearEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
          onChanged();
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder getEffectiveConfigBuilder() {
        
        onChanged();
        return getEffectiveConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder getEffectiveConfigOrBuilder() {
        if (effectiveConfigBuilder_ != null) {
          return effectiveConfigBuilder_.getMessageOrBuilder();
        } else {
          return effectiveConfig_ == null ?
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance() : effectiveConfig_;
        }
      }
      /**
       * <pre>
       * Effective settings for a MySQL 5.7 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 effective_config = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder> 
          getEffectiveConfigFieldBuilder() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder>(
                  getEffectiveConfig(),
                  getParentForChildren(),
                  isClean());
          effectiveConfig_ = null;
        }
        return effectiveConfigBuilder_;
      }

      private yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 userConfig_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder> userConfigBuilder_;
      /**
       * <pre>
       * User-defined settings for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
       */
      public boolean hasUserConfig() {
        return userConfigBuilder_ != null || userConfig_ != null;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getUserConfig() {
        if (userConfigBuilder_ == null) {
          return userConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance() : userConfig_;
        } else {
          return userConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
       */
      public Builder setUserConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 value) {
        if (userConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userConfig_ = value;
          onChanged();
        } else {
          userConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
       */
      public Builder setUserConfig(
          yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder builderForValue) {
        if (userConfigBuilder_ == null) {
          userConfig_ = builderForValue.build();
          onChanged();
        } else {
          userConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
       */
      public Builder mergeUserConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 value) {
        if (userConfigBuilder_ == null) {
          if (userConfig_ != null) {
            userConfig_ =
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.newBuilder(userConfig_).mergeFrom(value).buildPartial();
          } else {
            userConfig_ = value;
          }
          onChanged();
        } else {
          userConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
       */
      public Builder clearUserConfig() {
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
          onChanged();
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder getUserConfigBuilder() {
        
        onChanged();
        return getUserConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder getUserConfigOrBuilder() {
        if (userConfigBuilder_ != null) {
          return userConfigBuilder_.getMessageOrBuilder();
        } else {
          return userConfig_ == null ?
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance() : userConfig_;
        }
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 user_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder> 
          getUserConfigFieldBuilder() {
        if (userConfigBuilder_ == null) {
          userConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder>(
                  getUserConfig(),
                  getParentForChildren(),
                  isClean());
          userConfig_ = null;
        }
        return userConfigBuilder_;
      }

      private yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 defaultConfig_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder> defaultConfigBuilder_;
      /**
       * <pre>
       * Default configuration for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
       */
      public boolean hasDefaultConfig() {
        return defaultConfigBuilder_ != null || defaultConfig_ != null;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 getDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          return defaultConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance() : defaultConfig_;
        } else {
          return defaultConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Default configuration for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
       */
      public Builder setDefaultConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 value) {
        if (defaultConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          defaultConfig_ = value;
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
       */
      public Builder setDefaultConfig(
          yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder builderForValue) {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = builderForValue.build();
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
       */
      public Builder mergeDefaultConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7 value) {
        if (defaultConfigBuilder_ == null) {
          if (defaultConfig_ != null) {
            defaultConfig_ =
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.newBuilder(defaultConfig_).mergeFrom(value).buildPartial();
          } else {
            defaultConfig_ = value;
          }
          onChanged();
        } else {
          defaultConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
       */
      public Builder clearDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
          onChanged();
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder getDefaultConfigBuilder() {
        
        onChanged();
        return getDefaultConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Default configuration for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder getDefaultConfigOrBuilder() {
        if (defaultConfigBuilder_ != null) {
          return defaultConfigBuilder_.getMessageOrBuilder();
        } else {
          return defaultConfig_ == null ?
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.getDefaultInstance() : defaultConfig_;
        }
      }
      /**
       * <pre>
       * Default configuration for a MySQL 5.7 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7 default_config = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder> 
          getDefaultConfigFieldBuilder() {
        if (defaultConfigBuilder_ == null) {
          defaultConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfig5_7OrBuilder>(
                  getDefaultConfig(),
                  getParentForChildren(),
                  isClean());
          defaultConfig_ = null;
        }
        return defaultConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7)
    private static final yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7();
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MysqlConfigSet5_7>
        PARSER = new com.google.protobuf.AbstractParser<MysqlConfigSet5_7>() {
      @java.lang.Override
      public MysqlConfigSet5_7 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MysqlConfigSet5_7(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MysqlConfigSet5_7> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MysqlConfigSet5_7> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql57.MysqlConfigSet5_7 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig5_7_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig5_7_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet5_7_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet5_7_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n/yandex/cloud/mdb/mysql/v1/config/mysql" +
      "5_7.proto\022 yandex.cloud.mdb.mysql.v1.con" +
      "fig\032\036google/protobuf/wrappers.proto\032\035yan" +
      "dex/cloud/validation.proto\"\222\021\n\016MysqlConf" +
      "ig5_7\022K\n\027innodb_buffer_pool_size\030\001 \001(\0132\033" +
      ".google.protobuf.Int64ValueB\r\372\3071\t>=52428" +
      "80\022B\n\017max_connections\030\002 \001(\0132\033.google.pro" +
      "tobuf.Int64ValueB\014\372\3071\01010-10000\0225\n\017long_q" +
      "uery_time\030\003 \001(\0132\034.google.protobuf.Double" +
      "Value\022/\n\013general_log\030\004 \001(\0132\032.google.prot" +
      "obuf.BoolValue\022-\n\taudit_log\030\005 \001(\0132\032.goog" +
      "le.protobuf.BoolValue\022J\n\010sql_mode\030\006 \003(\0162" +
      "8.yandex.cloud.mdb.mysql.v1.config.Mysql" +
      "Config5_7.SQLMode\022K\n\022max_allowed_packet\030" +
      "\007 \001(\0132\033.google.protobuf.Int64ValueB\022\372\3071\016" +
      "1024-134217728\022b\n\035default_authentication" +
      "_plugin\030\010 \001(\0162;.yandex.cloud.mdb.mysql.v" +
      "1.config.MysqlConfig5_7.AuthPlugin\022L\n\036in" +
      "nodb_flush_log_at_trx_commit\030\t \001(\0132\033.goo" +
      "gle.protobuf.Int64ValueB\007\372\3071\0031-2\022J\n\030inno" +
      "db_lock_wait_timeout\030\n \001(\0132\033.google.prot" +
      "obuf.Int64ValueB\013\372\3071\0071-28800\022d\n\025transact" +
      "ion_isolation\030\013 \001(\0162E.yandex.cloud.mdb.m" +
      "ysql.v1.config.MysqlConfig5_7.Transactio" +
      "nIsolation\022>\n\032innodb_print_all_deadlocks" +
      "\030\014 \001(\0132\032.google.protobuf.BoolValue\022A\n\020ne" +
      "t_read_timeout\030\r \001(\0132\033.google.protobuf.I" +
      "nt64ValueB\n\372\3071\0061-1200\022B\n\021net_write_timeo" +
      "ut\030\016 \001(\0132\033.google.protobuf.Int64ValueB\n\372" +
      "\3071\0061-1200\022I\n\024group_concat_max_len\030\017 \001(\0132" +
      "\033.google.protobuf.Int64ValueB\016\372\3071\n4-3355" +
      "4432\022G\n\016tmp_table_size\030\020 \001(\0132\033.google.pr" +
      "otobuf.Int64ValueB\022\372\3071\0161024-134217728\022L\n" +
      "\023max_heap_table_size\030\021 \001(\0132\033.google.prot" +
      "obuf.Int64ValueB\022\372\3071\0161024-134217728\022\031\n\021d" +
      "efault_time_zone\030\022 \001(\t\022\034\n\024character_set_" +
      "server\030\023 \001(\t\022\030\n\020collation_server\030\024 \001(\t\"\352" +
      "\004\n\007SQLMode\022\027\n\023SQLMODE_UNSPECIFIED\020\000\022\027\n\023A" +
      "LLOW_INVALID_DATES\020\001\022\017\n\013ANSI_QUOTES\020\002\022\036\n" +
      "\032ERROR_FOR_DIVISION_BY_ZERO\020\003\022\027\n\023HIGH_NO" +
      "T_PRECEDENCE\020\004\022\020\n\014IGNORE_SPACE\020\005\022\031\n\025NO_A" +
      "UTO_VALUE_ON_ZERO\020\006\022\030\n\024NO_BACKSLASH_ESCA" +
      "PES\020\007\022\032\n\026NO_ENGINE_SUBSTITUTION\020\010\022\033\n\027NO_" +
      "UNSIGNED_SUBTRACTION\020\t\022\020\n\014NO_ZERO_DATE\020\n" +
      "\022\023\n\017NO_ZERO_IN_DATE\020\013\022\024\n\020NO_FIELD_OPTION" +
      "S\020\014\022\022\n\016NO_KEY_OPTIONS\020\r\022\024\n\020NO_TABLE_OPTI" +
      "ONS\020\016\022\026\n\022ONLY_FULL_GROUP_BY\020\017\022\033\n\027PAD_CHA" +
      "R_TO_FULL_LENGTH\020\020\022\023\n\017PIPES_AS_CONCAT\020\021\022" +
      "\021\n\rREAL_AS_FLOAT\020\022\022\025\n\021STRICT_ALL_TABLES\020" +
      "\023\022\027\n\023STRICT_TRANS_TABLES\020\024\022\010\n\004ANSI\020\025\022\017\n\013" +
      "TRADITIONAL\020\026\022\007\n\003DB2\020\027\022\t\n\005MAXDB\020\030\022\t\n\005MSS" +
      "QL\020\031\022\014\n\010MYSQL323\020\032\022\013\n\007MYSQL40\020\033\022\n\n\006ORACL" +
      "E\020\034\022\016\n\nPOSTGRESQL\020\035\"x\n\nAuthPlugin\022\033\n\027AUT" +
      "H_PLUGIN_UNSPECIFIED\020\000\022\031\n\025MYSQL_NATIVE_P" +
      "ASSWORD\020\001\022\035\n\025CACHING_SHA2_PASSWORD\020\002\032\002\010\001" +
      "\022\023\n\017SHA256_PASSWORD\020\003\"x\n\024TransactionIsol" +
      "ation\022%\n!TRANSACTION_ISOLATION_UNSPECIFI" +
      "ED\020\000\022\022\n\016READ_COMMITTED\020\001\022\023\n\017REPEATABLE_R" +
      "EAD\020\002\022\020\n\014SERIALIZABLE\020\003\"\360\001\n\021MysqlConfigS" +
      "et5_7\022J\n\020effective_config\030\001 \001(\01320.yandex" +
      ".cloud.mdb.mysql.v1.config.MysqlConfig5_" +
      "7\022E\n\013user_config\030\002 \001(\01320.yandex.cloud.md" +
      "b.mysql.v1.config.MysqlConfig5_7\022H\n\016defa" +
      "ult_config\030\003 \001(\01320.yandex.cloud.mdb.mysq" +
      "l.v1.config.MysqlConfig5_7Br\n$yandex.clo" +
      "ud.api.mdb.mysql.v1.configZJgithub.com/y" +
      "andex-cloud/go-genproto/yandex/cloud/mdb" +
      "/mysql/v1/config;mysqlb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.WrappersProto.getDescriptor(),
          yandex.cloud.api.Validation.getDescriptor(),
        }, assigner);
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig5_7_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig5_7_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig5_7_descriptor,
        new java.lang.String[] { "InnodbBufferPoolSize", "MaxConnections", "LongQueryTime", "GeneralLog", "AuditLog", "SqlMode", "MaxAllowedPacket", "DefaultAuthenticationPlugin", "InnodbFlushLogAtTrxCommit", "InnodbLockWaitTimeout", "TransactionIsolation", "InnodbPrintAllDeadlocks", "NetReadTimeout", "NetWriteTimeout", "GroupConcatMaxLen", "TmpTableSize", "MaxHeapTableSize", "DefaultTimeZone", "CharacterSetServer", "CollationServer", });
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet5_7_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet5_7_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet5_7_descriptor,
        new java.lang.String[] { "EffectiveConfig", "UserConfig", "DefaultConfig", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(yandex.cloud.api.Validation.value);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.WrappersProto.getDescriptor();
    yandex.cloud.api.Validation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}

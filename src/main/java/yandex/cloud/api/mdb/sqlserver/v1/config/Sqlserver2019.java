// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yandex/cloud/mdb/sqlserver/v1/config/sqlserver2019.proto

package yandex.cloud.api.mdb.sqlserver.v1.config;

public final class Sqlserver2019 {
  private Sqlserver2019() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SQLServerConfig2019stdOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     * @return Whether the maxDegreeOfParallelism field is set.
     */
    boolean hasMaxDegreeOfParallelism();
    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     * @return The maxDegreeOfParallelism.
     */
    com.google.protobuf.Int64Value getMaxDegreeOfParallelism();
    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxDegreeOfParallelismOrBuilder();

    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     * @return Whether the costThresholdForParallelism field is set.
     */
    boolean hasCostThresholdForParallelism();
    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     * @return The costThresholdForParallelism.
     */
    com.google.protobuf.Int64Value getCostThresholdForParallelism();
    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getCostThresholdForParallelismOrBuilder();

    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     * @return Whether the auditLevel field is set.
     */
    boolean hasAuditLevel();
    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     * @return The auditLevel.
     */
    com.google.protobuf.Int64Value getAuditLevel();
    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getAuditLevelOrBuilder();

    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     * @return Whether the fillFactorPercent field is set.
     */
    boolean hasFillFactorPercent();
    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     * @return The fillFactorPercent.
     */
    com.google.protobuf.Int64Value getFillFactorPercent();
    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getFillFactorPercentOrBuilder();

    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     * @return Whether the optimizeForAdHocWorkloads field is set.
     */
    boolean hasOptimizeForAdHocWorkloads();
    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     * @return The optimizeForAdHocWorkloads.
     */
    com.google.protobuf.BoolValue getOptimizeForAdHocWorkloads();
    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getOptimizeForAdHocWorkloadsOrBuilder();
  }
  /**
   * <pre>
   * SQL Server 2019 Standard edition supported configuration options are listed here.
   * Detailed description for each set of options is available in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/server-configuration-options-sql-server?view=sql-server-2019).
   * Any options that are not listed here are not supported.
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std}
   */
  public static final class SQLServerConfig2019std extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std)
      SQLServerConfig2019stdOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SQLServerConfig2019std.newBuilder() to construct.
    private SQLServerConfig2019std(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SQLServerConfig2019std() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SQLServerConfig2019std();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SQLServerConfig2019std(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxDegreeOfParallelism_ != null) {
                subBuilder = maxDegreeOfParallelism_.toBuilder();
              }
              maxDegreeOfParallelism_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxDegreeOfParallelism_);
                maxDegreeOfParallelism_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (costThresholdForParallelism_ != null) {
                subBuilder = costThresholdForParallelism_.toBuilder();
              }
              costThresholdForParallelism_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(costThresholdForParallelism_);
                costThresholdForParallelism_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (auditLevel_ != null) {
                subBuilder = auditLevel_.toBuilder();
              }
              auditLevel_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auditLevel_);
                auditLevel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (fillFactorPercent_ != null) {
                subBuilder = fillFactorPercent_.toBuilder();
              }
              fillFactorPercent_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fillFactorPercent_);
                fillFactorPercent_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (optimizeForAdHocWorkloads_ != null) {
                subBuilder = optimizeForAdHocWorkloads_.toBuilder();
              }
              optimizeForAdHocWorkloads_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(optimizeForAdHocWorkloads_);
                optimizeForAdHocWorkloads_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019std_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019std_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.class, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder.class);
    }

    public static final int MAX_DEGREE_OF_PARALLELISM_FIELD_NUMBER = 1;
    private com.google.protobuf.Int64Value maxDegreeOfParallelism_;
    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     * @return Whether the maxDegreeOfParallelism field is set.
     */
    @java.lang.Override
    public boolean hasMaxDegreeOfParallelism() {
      return maxDegreeOfParallelism_ != null;
    }
    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     * @return The maxDegreeOfParallelism.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxDegreeOfParallelism() {
      return maxDegreeOfParallelism_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxDegreeOfParallelism_;
    }
    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxDegreeOfParallelismOrBuilder() {
      return getMaxDegreeOfParallelism();
    }

    public static final int COST_THRESHOLD_FOR_PARALLELISM_FIELD_NUMBER = 2;
    private com.google.protobuf.Int64Value costThresholdForParallelism_;
    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     * @return Whether the costThresholdForParallelism field is set.
     */
    @java.lang.Override
    public boolean hasCostThresholdForParallelism() {
      return costThresholdForParallelism_ != null;
    }
    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     * @return The costThresholdForParallelism.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getCostThresholdForParallelism() {
      return costThresholdForParallelism_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : costThresholdForParallelism_;
    }
    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getCostThresholdForParallelismOrBuilder() {
      return getCostThresholdForParallelism();
    }

    public static final int AUDIT_LEVEL_FIELD_NUMBER = 3;
    private com.google.protobuf.Int64Value auditLevel_;
    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     * @return Whether the auditLevel field is set.
     */
    @java.lang.Override
    public boolean hasAuditLevel() {
      return auditLevel_ != null;
    }
    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     * @return The auditLevel.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getAuditLevel() {
      return auditLevel_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : auditLevel_;
    }
    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getAuditLevelOrBuilder() {
      return getAuditLevel();
    }

    public static final int FILL_FACTOR_PERCENT_FIELD_NUMBER = 4;
    private com.google.protobuf.Int64Value fillFactorPercent_;
    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     * @return Whether the fillFactorPercent field is set.
     */
    @java.lang.Override
    public boolean hasFillFactorPercent() {
      return fillFactorPercent_ != null;
    }
    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     * @return The fillFactorPercent.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getFillFactorPercent() {
      return fillFactorPercent_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : fillFactorPercent_;
    }
    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getFillFactorPercentOrBuilder() {
      return getFillFactorPercent();
    }

    public static final int OPTIMIZE_FOR_AD_HOC_WORKLOADS_FIELD_NUMBER = 5;
    private com.google.protobuf.BoolValue optimizeForAdHocWorkloads_;
    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     * @return Whether the optimizeForAdHocWorkloads field is set.
     */
    @java.lang.Override
    public boolean hasOptimizeForAdHocWorkloads() {
      return optimizeForAdHocWorkloads_ != null;
    }
    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     * @return The optimizeForAdHocWorkloads.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getOptimizeForAdHocWorkloads() {
      return optimizeForAdHocWorkloads_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : optimizeForAdHocWorkloads_;
    }
    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getOptimizeForAdHocWorkloadsOrBuilder() {
      return getOptimizeForAdHocWorkloads();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (maxDegreeOfParallelism_ != null) {
        output.writeMessage(1, getMaxDegreeOfParallelism());
      }
      if (costThresholdForParallelism_ != null) {
        output.writeMessage(2, getCostThresholdForParallelism());
      }
      if (auditLevel_ != null) {
        output.writeMessage(3, getAuditLevel());
      }
      if (fillFactorPercent_ != null) {
        output.writeMessage(4, getFillFactorPercent());
      }
      if (optimizeForAdHocWorkloads_ != null) {
        output.writeMessage(5, getOptimizeForAdHocWorkloads());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (maxDegreeOfParallelism_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getMaxDegreeOfParallelism());
      }
      if (costThresholdForParallelism_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCostThresholdForParallelism());
      }
      if (auditLevel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getAuditLevel());
      }
      if (fillFactorPercent_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getFillFactorPercent());
      }
      if (optimizeForAdHocWorkloads_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getOptimizeForAdHocWorkloads());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std other = (yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std) obj;

      if (hasMaxDegreeOfParallelism() != other.hasMaxDegreeOfParallelism()) return false;
      if (hasMaxDegreeOfParallelism()) {
        if (!getMaxDegreeOfParallelism()
            .equals(other.getMaxDegreeOfParallelism())) return false;
      }
      if (hasCostThresholdForParallelism() != other.hasCostThresholdForParallelism()) return false;
      if (hasCostThresholdForParallelism()) {
        if (!getCostThresholdForParallelism()
            .equals(other.getCostThresholdForParallelism())) return false;
      }
      if (hasAuditLevel() != other.hasAuditLevel()) return false;
      if (hasAuditLevel()) {
        if (!getAuditLevel()
            .equals(other.getAuditLevel())) return false;
      }
      if (hasFillFactorPercent() != other.hasFillFactorPercent()) return false;
      if (hasFillFactorPercent()) {
        if (!getFillFactorPercent()
            .equals(other.getFillFactorPercent())) return false;
      }
      if (hasOptimizeForAdHocWorkloads() != other.hasOptimizeForAdHocWorkloads()) return false;
      if (hasOptimizeForAdHocWorkloads()) {
        if (!getOptimizeForAdHocWorkloads()
            .equals(other.getOptimizeForAdHocWorkloads())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMaxDegreeOfParallelism()) {
        hash = (37 * hash) + MAX_DEGREE_OF_PARALLELISM_FIELD_NUMBER;
        hash = (53 * hash) + getMaxDegreeOfParallelism().hashCode();
      }
      if (hasCostThresholdForParallelism()) {
        hash = (37 * hash) + COST_THRESHOLD_FOR_PARALLELISM_FIELD_NUMBER;
        hash = (53 * hash) + getCostThresholdForParallelism().hashCode();
      }
      if (hasAuditLevel()) {
        hash = (37 * hash) + AUDIT_LEVEL_FIELD_NUMBER;
        hash = (53 * hash) + getAuditLevel().hashCode();
      }
      if (hasFillFactorPercent()) {
        hash = (37 * hash) + FILL_FACTOR_PERCENT_FIELD_NUMBER;
        hash = (53 * hash) + getFillFactorPercent().hashCode();
      }
      if (hasOptimizeForAdHocWorkloads()) {
        hash = (37 * hash) + OPTIMIZE_FOR_AD_HOC_WORKLOADS_FIELD_NUMBER;
        hash = (53 * hash) + getOptimizeForAdHocWorkloads().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SQL Server 2019 Standard edition supported configuration options are listed here.
     * Detailed description for each set of options is available in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/server-configuration-options-sql-server?view=sql-server-2019).
     * Any options that are not listed here are not supported.
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std)
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019std_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019std_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.class, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (maxDegreeOfParallelismBuilder_ == null) {
          maxDegreeOfParallelism_ = null;
        } else {
          maxDegreeOfParallelism_ = null;
          maxDegreeOfParallelismBuilder_ = null;
        }
        if (costThresholdForParallelismBuilder_ == null) {
          costThresholdForParallelism_ = null;
        } else {
          costThresholdForParallelism_ = null;
          costThresholdForParallelismBuilder_ = null;
        }
        if (auditLevelBuilder_ == null) {
          auditLevel_ = null;
        } else {
          auditLevel_ = null;
          auditLevelBuilder_ = null;
        }
        if (fillFactorPercentBuilder_ == null) {
          fillFactorPercent_ = null;
        } else {
          fillFactorPercent_ = null;
          fillFactorPercentBuilder_ = null;
        }
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          optimizeForAdHocWorkloads_ = null;
        } else {
          optimizeForAdHocWorkloads_ = null;
          optimizeForAdHocWorkloadsBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019std_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std build() {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std buildPartial() {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std result = new yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std(this);
        if (maxDegreeOfParallelismBuilder_ == null) {
          result.maxDegreeOfParallelism_ = maxDegreeOfParallelism_;
        } else {
          result.maxDegreeOfParallelism_ = maxDegreeOfParallelismBuilder_.build();
        }
        if (costThresholdForParallelismBuilder_ == null) {
          result.costThresholdForParallelism_ = costThresholdForParallelism_;
        } else {
          result.costThresholdForParallelism_ = costThresholdForParallelismBuilder_.build();
        }
        if (auditLevelBuilder_ == null) {
          result.auditLevel_ = auditLevel_;
        } else {
          result.auditLevel_ = auditLevelBuilder_.build();
        }
        if (fillFactorPercentBuilder_ == null) {
          result.fillFactorPercent_ = fillFactorPercent_;
        } else {
          result.fillFactorPercent_ = fillFactorPercentBuilder_.build();
        }
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          result.optimizeForAdHocWorkloads_ = optimizeForAdHocWorkloads_;
        } else {
          result.optimizeForAdHocWorkloads_ = optimizeForAdHocWorkloadsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std) {
          return mergeFrom((yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std other) {
        if (other == yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance()) return this;
        if (other.hasMaxDegreeOfParallelism()) {
          mergeMaxDegreeOfParallelism(other.getMaxDegreeOfParallelism());
        }
        if (other.hasCostThresholdForParallelism()) {
          mergeCostThresholdForParallelism(other.getCostThresholdForParallelism());
        }
        if (other.hasAuditLevel()) {
          mergeAuditLevel(other.getAuditLevel());
        }
        if (other.hasFillFactorPercent()) {
          mergeFillFactorPercent(other.getFillFactorPercent());
        }
        if (other.hasOptimizeForAdHocWorkloads()) {
          mergeOptimizeForAdHocWorkloads(other.getOptimizeForAdHocWorkloads());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.Int64Value maxDegreeOfParallelism_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxDegreeOfParallelismBuilder_;
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       * @return Whether the maxDegreeOfParallelism field is set.
       */
      public boolean hasMaxDegreeOfParallelism() {
        return maxDegreeOfParallelismBuilder_ != null || maxDegreeOfParallelism_ != null;
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       * @return The maxDegreeOfParallelism.
       */
      public com.google.protobuf.Int64Value getMaxDegreeOfParallelism() {
        if (maxDegreeOfParallelismBuilder_ == null) {
          return maxDegreeOfParallelism_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxDegreeOfParallelism_;
        } else {
          return maxDegreeOfParallelismBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public Builder setMaxDegreeOfParallelism(com.google.protobuf.Int64Value value) {
        if (maxDegreeOfParallelismBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxDegreeOfParallelism_ = value;
          onChanged();
        } else {
          maxDegreeOfParallelismBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public Builder setMaxDegreeOfParallelism(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxDegreeOfParallelismBuilder_ == null) {
          maxDegreeOfParallelism_ = builderForValue.build();
          onChanged();
        } else {
          maxDegreeOfParallelismBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public Builder mergeMaxDegreeOfParallelism(com.google.protobuf.Int64Value value) {
        if (maxDegreeOfParallelismBuilder_ == null) {
          if (maxDegreeOfParallelism_ != null) {
            maxDegreeOfParallelism_ =
              com.google.protobuf.Int64Value.newBuilder(maxDegreeOfParallelism_).mergeFrom(value).buildPartial();
          } else {
            maxDegreeOfParallelism_ = value;
          }
          onChanged();
        } else {
          maxDegreeOfParallelismBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public Builder clearMaxDegreeOfParallelism() {
        if (maxDegreeOfParallelismBuilder_ == null) {
          maxDegreeOfParallelism_ = null;
          onChanged();
        } else {
          maxDegreeOfParallelism_ = null;
          maxDegreeOfParallelismBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxDegreeOfParallelismBuilder() {
        
        onChanged();
        return getMaxDegreeOfParallelismFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxDegreeOfParallelismOrBuilder() {
        if (maxDegreeOfParallelismBuilder_ != null) {
          return maxDegreeOfParallelismBuilder_.getMessageOrBuilder();
        } else {
          return maxDegreeOfParallelism_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxDegreeOfParallelism_;
        }
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxDegreeOfParallelismFieldBuilder() {
        if (maxDegreeOfParallelismBuilder_ == null) {
          maxDegreeOfParallelismBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxDegreeOfParallelism(),
                  getParentForChildren(),
                  isClean());
          maxDegreeOfParallelism_ = null;
        }
        return maxDegreeOfParallelismBuilder_;
      }

      private com.google.protobuf.Int64Value costThresholdForParallelism_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> costThresholdForParallelismBuilder_;
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       * @return Whether the costThresholdForParallelism field is set.
       */
      public boolean hasCostThresholdForParallelism() {
        return costThresholdForParallelismBuilder_ != null || costThresholdForParallelism_ != null;
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       * @return The costThresholdForParallelism.
       */
      public com.google.protobuf.Int64Value getCostThresholdForParallelism() {
        if (costThresholdForParallelismBuilder_ == null) {
          return costThresholdForParallelism_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : costThresholdForParallelism_;
        } else {
          return costThresholdForParallelismBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public Builder setCostThresholdForParallelism(com.google.protobuf.Int64Value value) {
        if (costThresholdForParallelismBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          costThresholdForParallelism_ = value;
          onChanged();
        } else {
          costThresholdForParallelismBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public Builder setCostThresholdForParallelism(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (costThresholdForParallelismBuilder_ == null) {
          costThresholdForParallelism_ = builderForValue.build();
          onChanged();
        } else {
          costThresholdForParallelismBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public Builder mergeCostThresholdForParallelism(com.google.protobuf.Int64Value value) {
        if (costThresholdForParallelismBuilder_ == null) {
          if (costThresholdForParallelism_ != null) {
            costThresholdForParallelism_ =
              com.google.protobuf.Int64Value.newBuilder(costThresholdForParallelism_).mergeFrom(value).buildPartial();
          } else {
            costThresholdForParallelism_ = value;
          }
          onChanged();
        } else {
          costThresholdForParallelismBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public Builder clearCostThresholdForParallelism() {
        if (costThresholdForParallelismBuilder_ == null) {
          costThresholdForParallelism_ = null;
          onChanged();
        } else {
          costThresholdForParallelism_ = null;
          costThresholdForParallelismBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getCostThresholdForParallelismBuilder() {
        
        onChanged();
        return getCostThresholdForParallelismFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getCostThresholdForParallelismOrBuilder() {
        if (costThresholdForParallelismBuilder_ != null) {
          return costThresholdForParallelismBuilder_.getMessageOrBuilder();
        } else {
          return costThresholdForParallelism_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : costThresholdForParallelism_;
        }
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getCostThresholdForParallelismFieldBuilder() {
        if (costThresholdForParallelismBuilder_ == null) {
          costThresholdForParallelismBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getCostThresholdForParallelism(),
                  getParentForChildren(),
                  isClean());
          costThresholdForParallelism_ = null;
        }
        return costThresholdForParallelismBuilder_;
      }

      private com.google.protobuf.Int64Value auditLevel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> auditLevelBuilder_;
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       * @return Whether the auditLevel field is set.
       */
      public boolean hasAuditLevel() {
        return auditLevelBuilder_ != null || auditLevel_ != null;
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       * @return The auditLevel.
       */
      public com.google.protobuf.Int64Value getAuditLevel() {
        if (auditLevelBuilder_ == null) {
          return auditLevel_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : auditLevel_;
        } else {
          return auditLevelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public Builder setAuditLevel(com.google.protobuf.Int64Value value) {
        if (auditLevelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auditLevel_ = value;
          onChanged();
        } else {
          auditLevelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public Builder setAuditLevel(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (auditLevelBuilder_ == null) {
          auditLevel_ = builderForValue.build();
          onChanged();
        } else {
          auditLevelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public Builder mergeAuditLevel(com.google.protobuf.Int64Value value) {
        if (auditLevelBuilder_ == null) {
          if (auditLevel_ != null) {
            auditLevel_ =
              com.google.protobuf.Int64Value.newBuilder(auditLevel_).mergeFrom(value).buildPartial();
          } else {
            auditLevel_ = value;
          }
          onChanged();
        } else {
          auditLevelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public Builder clearAuditLevel() {
        if (auditLevelBuilder_ == null) {
          auditLevel_ = null;
          onChanged();
        } else {
          auditLevel_ = null;
          auditLevelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getAuditLevelBuilder() {
        
        onChanged();
        return getAuditLevelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getAuditLevelOrBuilder() {
        if (auditLevelBuilder_ != null) {
          return auditLevelBuilder_.getMessageOrBuilder();
        } else {
          return auditLevel_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : auditLevel_;
        }
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getAuditLevelFieldBuilder() {
        if (auditLevelBuilder_ == null) {
          auditLevelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getAuditLevel(),
                  getParentForChildren(),
                  isClean());
          auditLevel_ = null;
        }
        return auditLevelBuilder_;
      }

      private com.google.protobuf.Int64Value fillFactorPercent_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> fillFactorPercentBuilder_;
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       * @return Whether the fillFactorPercent field is set.
       */
      public boolean hasFillFactorPercent() {
        return fillFactorPercentBuilder_ != null || fillFactorPercent_ != null;
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       * @return The fillFactorPercent.
       */
      public com.google.protobuf.Int64Value getFillFactorPercent() {
        if (fillFactorPercentBuilder_ == null) {
          return fillFactorPercent_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : fillFactorPercent_;
        } else {
          return fillFactorPercentBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public Builder setFillFactorPercent(com.google.protobuf.Int64Value value) {
        if (fillFactorPercentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fillFactorPercent_ = value;
          onChanged();
        } else {
          fillFactorPercentBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public Builder setFillFactorPercent(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (fillFactorPercentBuilder_ == null) {
          fillFactorPercent_ = builderForValue.build();
          onChanged();
        } else {
          fillFactorPercentBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public Builder mergeFillFactorPercent(com.google.protobuf.Int64Value value) {
        if (fillFactorPercentBuilder_ == null) {
          if (fillFactorPercent_ != null) {
            fillFactorPercent_ =
              com.google.protobuf.Int64Value.newBuilder(fillFactorPercent_).mergeFrom(value).buildPartial();
          } else {
            fillFactorPercent_ = value;
          }
          onChanged();
        } else {
          fillFactorPercentBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public Builder clearFillFactorPercent() {
        if (fillFactorPercentBuilder_ == null) {
          fillFactorPercent_ = null;
          onChanged();
        } else {
          fillFactorPercent_ = null;
          fillFactorPercentBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getFillFactorPercentBuilder() {
        
        onChanged();
        return getFillFactorPercentFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getFillFactorPercentOrBuilder() {
        if (fillFactorPercentBuilder_ != null) {
          return fillFactorPercentBuilder_.getMessageOrBuilder();
        } else {
          return fillFactorPercent_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : fillFactorPercent_;
        }
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getFillFactorPercentFieldBuilder() {
        if (fillFactorPercentBuilder_ == null) {
          fillFactorPercentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getFillFactorPercent(),
                  getParentForChildren(),
                  isClean());
          fillFactorPercent_ = null;
        }
        return fillFactorPercentBuilder_;
      }

      private com.google.protobuf.BoolValue optimizeForAdHocWorkloads_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> optimizeForAdHocWorkloadsBuilder_;
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       * @return Whether the optimizeForAdHocWorkloads field is set.
       */
      public boolean hasOptimizeForAdHocWorkloads() {
        return optimizeForAdHocWorkloadsBuilder_ != null || optimizeForAdHocWorkloads_ != null;
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       * @return The optimizeForAdHocWorkloads.
       */
      public com.google.protobuf.BoolValue getOptimizeForAdHocWorkloads() {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          return optimizeForAdHocWorkloads_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : optimizeForAdHocWorkloads_;
        } else {
          return optimizeForAdHocWorkloadsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public Builder setOptimizeForAdHocWorkloads(com.google.protobuf.BoolValue value) {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          optimizeForAdHocWorkloads_ = value;
          onChanged();
        } else {
          optimizeForAdHocWorkloadsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public Builder setOptimizeForAdHocWorkloads(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          optimizeForAdHocWorkloads_ = builderForValue.build();
          onChanged();
        } else {
          optimizeForAdHocWorkloadsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public Builder mergeOptimizeForAdHocWorkloads(com.google.protobuf.BoolValue value) {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          if (optimizeForAdHocWorkloads_ != null) {
            optimizeForAdHocWorkloads_ =
              com.google.protobuf.BoolValue.newBuilder(optimizeForAdHocWorkloads_).mergeFrom(value).buildPartial();
          } else {
            optimizeForAdHocWorkloads_ = value;
          }
          onChanged();
        } else {
          optimizeForAdHocWorkloadsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public Builder clearOptimizeForAdHocWorkloads() {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          optimizeForAdHocWorkloads_ = null;
          onChanged();
        } else {
          optimizeForAdHocWorkloads_ = null;
          optimizeForAdHocWorkloadsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public com.google.protobuf.BoolValue.Builder getOptimizeForAdHocWorkloadsBuilder() {
        
        onChanged();
        return getOptimizeForAdHocWorkloadsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getOptimizeForAdHocWorkloadsOrBuilder() {
        if (optimizeForAdHocWorkloadsBuilder_ != null) {
          return optimizeForAdHocWorkloadsBuilder_.getMessageOrBuilder();
        } else {
          return optimizeForAdHocWorkloads_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : optimizeForAdHocWorkloads_;
        }
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getOptimizeForAdHocWorkloadsFieldBuilder() {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          optimizeForAdHocWorkloadsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getOptimizeForAdHocWorkloads(),
                  getParentForChildren(),
                  isClean());
          optimizeForAdHocWorkloads_ = null;
        }
        return optimizeForAdHocWorkloadsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std)
    private static final yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std();
    }

    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SQLServerConfig2019std>
        PARSER = new com.google.protobuf.AbstractParser<SQLServerConfig2019std>() {
      @java.lang.Override
      public SQLServerConfig2019std parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SQLServerConfig2019std(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SQLServerConfig2019std> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SQLServerConfig2019std> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SQLServerConfigSet2019stdOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
     * @return Whether the effectiveConfig field is set.
     */
    boolean hasEffectiveConfig();
    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
     * @return The effectiveConfig.
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getEffectiveConfig();
    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder getEffectiveConfigOrBuilder();

    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
     * @return Whether the userConfig field is set.
     */
    boolean hasUserConfig();
    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
     * @return The userConfig.
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getUserConfig();
    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder getUserConfigOrBuilder();

    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
     * @return Whether the defaultConfig field is set.
     */
    boolean hasDefaultConfig();
    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
     * @return The defaultConfig.
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getDefaultConfig();
    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder getDefaultConfigOrBuilder();
  }
  /**
   * Protobuf type {@code yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std}
   */
  public static final class SQLServerConfigSet2019std extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std)
      SQLServerConfigSet2019stdOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SQLServerConfigSet2019std.newBuilder() to construct.
    private SQLServerConfigSet2019std(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SQLServerConfigSet2019std() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SQLServerConfigSet2019std();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SQLServerConfigSet2019std(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder subBuilder = null;
              if (effectiveConfig_ != null) {
                subBuilder = effectiveConfig_.toBuilder();
              }
              effectiveConfig_ = input.readMessage(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(effectiveConfig_);
                effectiveConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder subBuilder = null;
              if (userConfig_ != null) {
                subBuilder = userConfig_.toBuilder();
              }
              userConfig_ = input.readMessage(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userConfig_);
                userConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder subBuilder = null;
              if (defaultConfig_ != null) {
                subBuilder = defaultConfig_.toBuilder();
              }
              defaultConfig_ = input.readMessage(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(defaultConfig_);
                defaultConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019std_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019std_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std.class, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std.Builder.class);
    }

    public static final int EFFECTIVE_CONFIG_FIELD_NUMBER = 1;
    private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std effectiveConfig_;
    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
     * @return Whether the effectiveConfig field is set.
     */
    @java.lang.Override
    public boolean hasEffectiveConfig() {
      return effectiveConfig_ != null;
    }
    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
     * @return The effectiveConfig.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getEffectiveConfig() {
      return effectiveConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance() : effectiveConfig_;
    }
    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder getEffectiveConfigOrBuilder() {
      return getEffectiveConfig();
    }

    public static final int USER_CONFIG_FIELD_NUMBER = 2;
    private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std userConfig_;
    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
     * @return Whether the userConfig field is set.
     */
    @java.lang.Override
    public boolean hasUserConfig() {
      return userConfig_ != null;
    }
    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
     * @return The userConfig.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getUserConfig() {
      return userConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance() : userConfig_;
    }
    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder getUserConfigOrBuilder() {
      return getUserConfig();
    }

    public static final int DEFAULT_CONFIG_FIELD_NUMBER = 3;
    private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std defaultConfig_;
    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
     * @return Whether the defaultConfig field is set.
     */
    @java.lang.Override
    public boolean hasDefaultConfig() {
      return defaultConfig_ != null;
    }
    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
     * @return The defaultConfig.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getDefaultConfig() {
      return defaultConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance() : defaultConfig_;
    }
    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder getDefaultConfigOrBuilder() {
      return getDefaultConfig();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (effectiveConfig_ != null) {
        output.writeMessage(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        output.writeMessage(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        output.writeMessage(3, getDefaultConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (effectiveConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDefaultConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std other = (yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std) obj;

      if (hasEffectiveConfig() != other.hasEffectiveConfig()) return false;
      if (hasEffectiveConfig()) {
        if (!getEffectiveConfig()
            .equals(other.getEffectiveConfig())) return false;
      }
      if (hasUserConfig() != other.hasUserConfig()) return false;
      if (hasUserConfig()) {
        if (!getUserConfig()
            .equals(other.getUserConfig())) return false;
      }
      if (hasDefaultConfig() != other.hasDefaultConfig()) return false;
      if (hasDefaultConfig()) {
        if (!getDefaultConfig()
            .equals(other.getDefaultConfig())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEffectiveConfig()) {
        hash = (37 * hash) + EFFECTIVE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getEffectiveConfig().hashCode();
      }
      if (hasUserConfig()) {
        hash = (37 * hash) + USER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getUserConfig().hashCode();
      }
      if (hasDefaultConfig()) {
        hash = (37 * hash) + DEFAULT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getDefaultConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std)
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019stdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019std_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019std_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std.class, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019std_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std build() {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std buildPartial() {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std result = new yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std(this);
        if (effectiveConfigBuilder_ == null) {
          result.effectiveConfig_ = effectiveConfig_;
        } else {
          result.effectiveConfig_ = effectiveConfigBuilder_.build();
        }
        if (userConfigBuilder_ == null) {
          result.userConfig_ = userConfig_;
        } else {
          result.userConfig_ = userConfigBuilder_.build();
        }
        if (defaultConfigBuilder_ == null) {
          result.defaultConfig_ = defaultConfig_;
        } else {
          result.defaultConfig_ = defaultConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std) {
          return mergeFrom((yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std other) {
        if (other == yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std.getDefaultInstance()) return this;
        if (other.hasEffectiveConfig()) {
          mergeEffectiveConfig(other.getEffectiveConfig());
        }
        if (other.hasUserConfig()) {
          mergeUserConfig(other.getUserConfig());
        }
        if (other.hasDefaultConfig()) {
          mergeDefaultConfig(other.getDefaultConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std effectiveConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder> effectiveConfigBuilder_;
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
       * @return Whether the effectiveConfig field is set.
       */
      public boolean hasEffectiveConfig() {
        return effectiveConfigBuilder_ != null || effectiveConfig_ != null;
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
       * @return The effectiveConfig.
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          return effectiveConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance() : effectiveConfig_;
        } else {
          return effectiveConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
       */
      public Builder setEffectiveConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std value) {
        if (effectiveConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          effectiveConfig_ = value;
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
       */
      public Builder setEffectiveConfig(
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder builderForValue) {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = builderForValue.build();
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
       */
      public Builder mergeEffectiveConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std value) {
        if (effectiveConfigBuilder_ == null) {
          if (effectiveConfig_ != null) {
            effectiveConfig_ =
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.newBuilder(effectiveConfig_).mergeFrom(value).buildPartial();
          } else {
            effectiveConfig_ = value;
          }
          onChanged();
        } else {
          effectiveConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
       */
      public Builder clearEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
          onChanged();
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder getEffectiveConfigBuilder() {
        
        onChanged();
        return getEffectiveConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder getEffectiveConfigOrBuilder() {
        if (effectiveConfigBuilder_ != null) {
          return effectiveConfigBuilder_.getMessageOrBuilder();
        } else {
          return effectiveConfig_ == null ?
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance() : effectiveConfig_;
        }
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std effective_config = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder> 
          getEffectiveConfigFieldBuilder() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder>(
                  getEffectiveConfig(),
                  getParentForChildren(),
                  isClean());
          effectiveConfig_ = null;
        }
        return effectiveConfigBuilder_;
      }

      private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std userConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder> userConfigBuilder_;
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
       * @return Whether the userConfig field is set.
       */
      public boolean hasUserConfig() {
        return userConfigBuilder_ != null || userConfig_ != null;
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
       * @return The userConfig.
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getUserConfig() {
        if (userConfigBuilder_ == null) {
          return userConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance() : userConfig_;
        } else {
          return userConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
       */
      public Builder setUserConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std value) {
        if (userConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userConfig_ = value;
          onChanged();
        } else {
          userConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
       */
      public Builder setUserConfig(
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder builderForValue) {
        if (userConfigBuilder_ == null) {
          userConfig_ = builderForValue.build();
          onChanged();
        } else {
          userConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
       */
      public Builder mergeUserConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std value) {
        if (userConfigBuilder_ == null) {
          if (userConfig_ != null) {
            userConfig_ =
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.newBuilder(userConfig_).mergeFrom(value).buildPartial();
          } else {
            userConfig_ = value;
          }
          onChanged();
        } else {
          userConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
       */
      public Builder clearUserConfig() {
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
          onChanged();
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder getUserConfigBuilder() {
        
        onChanged();
        return getUserConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder getUserConfigOrBuilder() {
        if (userConfigBuilder_ != null) {
          return userConfigBuilder_.getMessageOrBuilder();
        } else {
          return userConfig_ == null ?
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance() : userConfig_;
        }
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std user_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder> 
          getUserConfigFieldBuilder() {
        if (userConfigBuilder_ == null) {
          userConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder>(
                  getUserConfig(),
                  getParentForChildren(),
                  isClean());
          userConfig_ = null;
        }
        return userConfigBuilder_;
      }

      private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std defaultConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder> defaultConfigBuilder_;
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
       * @return Whether the defaultConfig field is set.
       */
      public boolean hasDefaultConfig() {
        return defaultConfigBuilder_ != null || defaultConfig_ != null;
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
       * @return The defaultConfig.
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std getDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          return defaultConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance() : defaultConfig_;
        } else {
          return defaultConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
       */
      public Builder setDefaultConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std value) {
        if (defaultConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          defaultConfig_ = value;
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
       */
      public Builder setDefaultConfig(
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder builderForValue) {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = builderForValue.build();
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
       */
      public Builder mergeDefaultConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std value) {
        if (defaultConfigBuilder_ == null) {
          if (defaultConfig_ != null) {
            defaultConfig_ =
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.newBuilder(defaultConfig_).mergeFrom(value).buildPartial();
          } else {
            defaultConfig_ = value;
          }
          onChanged();
        } else {
          defaultConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
       */
      public Builder clearDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
          onChanged();
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder getDefaultConfigBuilder() {
        
        onChanged();
        return getDefaultConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder getDefaultConfigOrBuilder() {
        if (defaultConfigBuilder_ != null) {
          return defaultConfigBuilder_.getMessageOrBuilder();
        } else {
          return defaultConfig_ == null ?
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.getDefaultInstance() : defaultConfig_;
        }
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std default_config = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder> 
          getDefaultConfigFieldBuilder() {
        if (defaultConfigBuilder_ == null) {
          defaultConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019std.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019stdOrBuilder>(
                  getDefaultConfig(),
                  getParentForChildren(),
                  isClean());
          defaultConfig_ = null;
        }
        return defaultConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std)
    private static final yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std();
    }

    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SQLServerConfigSet2019std>
        PARSER = new com.google.protobuf.AbstractParser<SQLServerConfigSet2019std>() {
      @java.lang.Override
      public SQLServerConfigSet2019std parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SQLServerConfigSet2019std(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SQLServerConfigSet2019std> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SQLServerConfigSet2019std> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019std getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SQLServerConfig2019entOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     * @return Whether the maxDegreeOfParallelism field is set.
     */
    boolean hasMaxDegreeOfParallelism();
    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     * @return The maxDegreeOfParallelism.
     */
    com.google.protobuf.Int64Value getMaxDegreeOfParallelism();
    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxDegreeOfParallelismOrBuilder();

    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     * @return Whether the costThresholdForParallelism field is set.
     */
    boolean hasCostThresholdForParallelism();
    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     * @return The costThresholdForParallelism.
     */
    com.google.protobuf.Int64Value getCostThresholdForParallelism();
    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getCostThresholdForParallelismOrBuilder();

    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     * @return Whether the auditLevel field is set.
     */
    boolean hasAuditLevel();
    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     * @return The auditLevel.
     */
    com.google.protobuf.Int64Value getAuditLevel();
    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getAuditLevelOrBuilder();

    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     * @return Whether the fillFactorPercent field is set.
     */
    boolean hasFillFactorPercent();
    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     * @return The fillFactorPercent.
     */
    com.google.protobuf.Int64Value getFillFactorPercent();
    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getFillFactorPercentOrBuilder();

    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     * @return Whether the optimizeForAdHocWorkloads field is set.
     */
    boolean hasOptimizeForAdHocWorkloads();
    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     * @return The optimizeForAdHocWorkloads.
     */
    com.google.protobuf.BoolValue getOptimizeForAdHocWorkloads();
    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getOptimizeForAdHocWorkloadsOrBuilder();
  }
  /**
   * <pre>
   * SQL Server 2019 Enterprise edition supported configuration options are listed here.
   * Detailed description for each set of options is available in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/server-configuration-options-sql-server?view=sql-server-2019).
   * Any options that are not listed here are not supported.
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent}
   */
  public static final class SQLServerConfig2019ent extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent)
      SQLServerConfig2019entOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SQLServerConfig2019ent.newBuilder() to construct.
    private SQLServerConfig2019ent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SQLServerConfig2019ent() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SQLServerConfig2019ent();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SQLServerConfig2019ent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxDegreeOfParallelism_ != null) {
                subBuilder = maxDegreeOfParallelism_.toBuilder();
              }
              maxDegreeOfParallelism_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxDegreeOfParallelism_);
                maxDegreeOfParallelism_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (costThresholdForParallelism_ != null) {
                subBuilder = costThresholdForParallelism_.toBuilder();
              }
              costThresholdForParallelism_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(costThresholdForParallelism_);
                costThresholdForParallelism_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (auditLevel_ != null) {
                subBuilder = auditLevel_.toBuilder();
              }
              auditLevel_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auditLevel_);
                auditLevel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (fillFactorPercent_ != null) {
                subBuilder = fillFactorPercent_.toBuilder();
              }
              fillFactorPercent_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fillFactorPercent_);
                fillFactorPercent_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (optimizeForAdHocWorkloads_ != null) {
                subBuilder = optimizeForAdHocWorkloads_.toBuilder();
              }
              optimizeForAdHocWorkloads_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(optimizeForAdHocWorkloads_);
                optimizeForAdHocWorkloads_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019ent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019ent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.class, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder.class);
    }

    public static final int MAX_DEGREE_OF_PARALLELISM_FIELD_NUMBER = 1;
    private com.google.protobuf.Int64Value maxDegreeOfParallelism_;
    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     * @return Whether the maxDegreeOfParallelism field is set.
     */
    @java.lang.Override
    public boolean hasMaxDegreeOfParallelism() {
      return maxDegreeOfParallelism_ != null;
    }
    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     * @return The maxDegreeOfParallelism.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxDegreeOfParallelism() {
      return maxDegreeOfParallelism_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxDegreeOfParallelism_;
    }
    /**
     * <pre>
     * Limits the number of processors to use in parallel plan execution per task.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxDegreeOfParallelismOrBuilder() {
      return getMaxDegreeOfParallelism();
    }

    public static final int COST_THRESHOLD_FOR_PARALLELISM_FIELD_NUMBER = 2;
    private com.google.protobuf.Int64Value costThresholdForParallelism_;
    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     * @return Whether the costThresholdForParallelism field is set.
     */
    @java.lang.Override
    public boolean hasCostThresholdForParallelism() {
      return costThresholdForParallelism_ != null;
    }
    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     * @return The costThresholdForParallelism.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getCostThresholdForParallelism() {
      return costThresholdForParallelism_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : costThresholdForParallelism_;
    }
    /**
     * <pre>
     * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
     * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getCostThresholdForParallelismOrBuilder() {
      return getCostThresholdForParallelism();
    }

    public static final int AUDIT_LEVEL_FIELD_NUMBER = 3;
    private com.google.protobuf.Int64Value auditLevel_;
    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     * @return Whether the auditLevel field is set.
     */
    @java.lang.Override
    public boolean hasAuditLevel() {
      return auditLevel_ != null;
    }
    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     * @return The auditLevel.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getAuditLevel() {
      return auditLevel_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : auditLevel_;
    }
    /**
     * <pre>
     * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
     * Possible values:
     * * 0 - do not log login attempts;
     * * 1 - log only failed login attempts;
     * * 2 - log only successful login attempts (not recommended);
     * * 3 - log all login attempts (not recommended).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getAuditLevelOrBuilder() {
      return getAuditLevel();
    }

    public static final int FILL_FACTOR_PERCENT_FIELD_NUMBER = 4;
    private com.google.protobuf.Int64Value fillFactorPercent_;
    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     * @return Whether the fillFactorPercent field is set.
     */
    @java.lang.Override
    public boolean hasFillFactorPercent() {
      return fillFactorPercent_ != null;
    }
    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     * @return The fillFactorPercent.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getFillFactorPercent() {
      return fillFactorPercent_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : fillFactorPercent_;
    }
    /**
     * <pre>
     * Manages the fill factor server configuration option.
     * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
     * Values 0 and 100 mean full page usage (no space reserved).
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getFillFactorPercentOrBuilder() {
      return getFillFactorPercent();
    }

    public static final int OPTIMIZE_FOR_AD_HOC_WORKLOADS_FIELD_NUMBER = 5;
    private com.google.protobuf.BoolValue optimizeForAdHocWorkloads_;
    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     * @return Whether the optimizeForAdHocWorkloads field is set.
     */
    @java.lang.Override
    public boolean hasOptimizeForAdHocWorkloads() {
      return optimizeForAdHocWorkloads_ != null;
    }
    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     * @return The optimizeForAdHocWorkloads.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getOptimizeForAdHocWorkloads() {
      return optimizeForAdHocWorkloads_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : optimizeForAdHocWorkloads_;
    }
    /**
     * <pre>
     * Determines whether plans should be cached only after second execution.
     * Allows to avoid SQL cache bloat because of single-use plans.
     * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getOptimizeForAdHocWorkloadsOrBuilder() {
      return getOptimizeForAdHocWorkloads();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (maxDegreeOfParallelism_ != null) {
        output.writeMessage(1, getMaxDegreeOfParallelism());
      }
      if (costThresholdForParallelism_ != null) {
        output.writeMessage(2, getCostThresholdForParallelism());
      }
      if (auditLevel_ != null) {
        output.writeMessage(3, getAuditLevel());
      }
      if (fillFactorPercent_ != null) {
        output.writeMessage(4, getFillFactorPercent());
      }
      if (optimizeForAdHocWorkloads_ != null) {
        output.writeMessage(5, getOptimizeForAdHocWorkloads());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (maxDegreeOfParallelism_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getMaxDegreeOfParallelism());
      }
      if (costThresholdForParallelism_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCostThresholdForParallelism());
      }
      if (auditLevel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getAuditLevel());
      }
      if (fillFactorPercent_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getFillFactorPercent());
      }
      if (optimizeForAdHocWorkloads_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getOptimizeForAdHocWorkloads());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent other = (yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent) obj;

      if (hasMaxDegreeOfParallelism() != other.hasMaxDegreeOfParallelism()) return false;
      if (hasMaxDegreeOfParallelism()) {
        if (!getMaxDegreeOfParallelism()
            .equals(other.getMaxDegreeOfParallelism())) return false;
      }
      if (hasCostThresholdForParallelism() != other.hasCostThresholdForParallelism()) return false;
      if (hasCostThresholdForParallelism()) {
        if (!getCostThresholdForParallelism()
            .equals(other.getCostThresholdForParallelism())) return false;
      }
      if (hasAuditLevel() != other.hasAuditLevel()) return false;
      if (hasAuditLevel()) {
        if (!getAuditLevel()
            .equals(other.getAuditLevel())) return false;
      }
      if (hasFillFactorPercent() != other.hasFillFactorPercent()) return false;
      if (hasFillFactorPercent()) {
        if (!getFillFactorPercent()
            .equals(other.getFillFactorPercent())) return false;
      }
      if (hasOptimizeForAdHocWorkloads() != other.hasOptimizeForAdHocWorkloads()) return false;
      if (hasOptimizeForAdHocWorkloads()) {
        if (!getOptimizeForAdHocWorkloads()
            .equals(other.getOptimizeForAdHocWorkloads())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMaxDegreeOfParallelism()) {
        hash = (37 * hash) + MAX_DEGREE_OF_PARALLELISM_FIELD_NUMBER;
        hash = (53 * hash) + getMaxDegreeOfParallelism().hashCode();
      }
      if (hasCostThresholdForParallelism()) {
        hash = (37 * hash) + COST_THRESHOLD_FOR_PARALLELISM_FIELD_NUMBER;
        hash = (53 * hash) + getCostThresholdForParallelism().hashCode();
      }
      if (hasAuditLevel()) {
        hash = (37 * hash) + AUDIT_LEVEL_FIELD_NUMBER;
        hash = (53 * hash) + getAuditLevel().hashCode();
      }
      if (hasFillFactorPercent()) {
        hash = (37 * hash) + FILL_FACTOR_PERCENT_FIELD_NUMBER;
        hash = (53 * hash) + getFillFactorPercent().hashCode();
      }
      if (hasOptimizeForAdHocWorkloads()) {
        hash = (37 * hash) + OPTIMIZE_FOR_AD_HOC_WORKLOADS_FIELD_NUMBER;
        hash = (53 * hash) + getOptimizeForAdHocWorkloads().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SQL Server 2019 Enterprise edition supported configuration options are listed here.
     * Detailed description for each set of options is available in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/server-configuration-options-sql-server?view=sql-server-2019).
     * Any options that are not listed here are not supported.
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent)
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019ent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019ent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.class, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (maxDegreeOfParallelismBuilder_ == null) {
          maxDegreeOfParallelism_ = null;
        } else {
          maxDegreeOfParallelism_ = null;
          maxDegreeOfParallelismBuilder_ = null;
        }
        if (costThresholdForParallelismBuilder_ == null) {
          costThresholdForParallelism_ = null;
        } else {
          costThresholdForParallelism_ = null;
          costThresholdForParallelismBuilder_ = null;
        }
        if (auditLevelBuilder_ == null) {
          auditLevel_ = null;
        } else {
          auditLevel_ = null;
          auditLevelBuilder_ = null;
        }
        if (fillFactorPercentBuilder_ == null) {
          fillFactorPercent_ = null;
        } else {
          fillFactorPercent_ = null;
          fillFactorPercentBuilder_ = null;
        }
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          optimizeForAdHocWorkloads_ = null;
        } else {
          optimizeForAdHocWorkloads_ = null;
          optimizeForAdHocWorkloadsBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019ent_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent build() {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent buildPartial() {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent result = new yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent(this);
        if (maxDegreeOfParallelismBuilder_ == null) {
          result.maxDegreeOfParallelism_ = maxDegreeOfParallelism_;
        } else {
          result.maxDegreeOfParallelism_ = maxDegreeOfParallelismBuilder_.build();
        }
        if (costThresholdForParallelismBuilder_ == null) {
          result.costThresholdForParallelism_ = costThresholdForParallelism_;
        } else {
          result.costThresholdForParallelism_ = costThresholdForParallelismBuilder_.build();
        }
        if (auditLevelBuilder_ == null) {
          result.auditLevel_ = auditLevel_;
        } else {
          result.auditLevel_ = auditLevelBuilder_.build();
        }
        if (fillFactorPercentBuilder_ == null) {
          result.fillFactorPercent_ = fillFactorPercent_;
        } else {
          result.fillFactorPercent_ = fillFactorPercentBuilder_.build();
        }
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          result.optimizeForAdHocWorkloads_ = optimizeForAdHocWorkloads_;
        } else {
          result.optimizeForAdHocWorkloads_ = optimizeForAdHocWorkloadsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent) {
          return mergeFrom((yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent other) {
        if (other == yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance()) return this;
        if (other.hasMaxDegreeOfParallelism()) {
          mergeMaxDegreeOfParallelism(other.getMaxDegreeOfParallelism());
        }
        if (other.hasCostThresholdForParallelism()) {
          mergeCostThresholdForParallelism(other.getCostThresholdForParallelism());
        }
        if (other.hasAuditLevel()) {
          mergeAuditLevel(other.getAuditLevel());
        }
        if (other.hasFillFactorPercent()) {
          mergeFillFactorPercent(other.getFillFactorPercent());
        }
        if (other.hasOptimizeForAdHocWorkloads()) {
          mergeOptimizeForAdHocWorkloads(other.getOptimizeForAdHocWorkloads());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.Int64Value maxDegreeOfParallelism_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxDegreeOfParallelismBuilder_;
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       * @return Whether the maxDegreeOfParallelism field is set.
       */
      public boolean hasMaxDegreeOfParallelism() {
        return maxDegreeOfParallelismBuilder_ != null || maxDegreeOfParallelism_ != null;
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       * @return The maxDegreeOfParallelism.
       */
      public com.google.protobuf.Int64Value getMaxDegreeOfParallelism() {
        if (maxDegreeOfParallelismBuilder_ == null) {
          return maxDegreeOfParallelism_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxDegreeOfParallelism_;
        } else {
          return maxDegreeOfParallelismBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public Builder setMaxDegreeOfParallelism(com.google.protobuf.Int64Value value) {
        if (maxDegreeOfParallelismBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxDegreeOfParallelism_ = value;
          onChanged();
        } else {
          maxDegreeOfParallelismBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public Builder setMaxDegreeOfParallelism(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxDegreeOfParallelismBuilder_ == null) {
          maxDegreeOfParallelism_ = builderForValue.build();
          onChanged();
        } else {
          maxDegreeOfParallelismBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public Builder mergeMaxDegreeOfParallelism(com.google.protobuf.Int64Value value) {
        if (maxDegreeOfParallelismBuilder_ == null) {
          if (maxDegreeOfParallelism_ != null) {
            maxDegreeOfParallelism_ =
              com.google.protobuf.Int64Value.newBuilder(maxDegreeOfParallelism_).mergeFrom(value).buildPartial();
          } else {
            maxDegreeOfParallelism_ = value;
          }
          onChanged();
        } else {
          maxDegreeOfParallelismBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public Builder clearMaxDegreeOfParallelism() {
        if (maxDegreeOfParallelismBuilder_ == null) {
          maxDegreeOfParallelism_ = null;
          onChanged();
        } else {
          maxDegreeOfParallelism_ = null;
          maxDegreeOfParallelismBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxDegreeOfParallelismBuilder() {
        
        onChanged();
        return getMaxDegreeOfParallelismFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxDegreeOfParallelismOrBuilder() {
        if (maxDegreeOfParallelismBuilder_ != null) {
          return maxDegreeOfParallelismBuilder_.getMessageOrBuilder();
        } else {
          return maxDegreeOfParallelism_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxDegreeOfParallelism_;
        }
      }
      /**
       * <pre>
       * Limits the number of processors to use in parallel plan execution per task.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_degree_of_parallelism = 1 [(.yandex.cloud.value) = "1-99"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxDegreeOfParallelismFieldBuilder() {
        if (maxDegreeOfParallelismBuilder_ == null) {
          maxDegreeOfParallelismBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxDegreeOfParallelism(),
                  getParentForChildren(),
                  isClean());
          maxDegreeOfParallelism_ = null;
        }
        return maxDegreeOfParallelismBuilder_;
      }

      private com.google.protobuf.Int64Value costThresholdForParallelism_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> costThresholdForParallelismBuilder_;
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       * @return Whether the costThresholdForParallelism field is set.
       */
      public boolean hasCostThresholdForParallelism() {
        return costThresholdForParallelismBuilder_ != null || costThresholdForParallelism_ != null;
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       * @return The costThresholdForParallelism.
       */
      public com.google.protobuf.Int64Value getCostThresholdForParallelism() {
        if (costThresholdForParallelismBuilder_ == null) {
          return costThresholdForParallelism_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : costThresholdForParallelism_;
        } else {
          return costThresholdForParallelismBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public Builder setCostThresholdForParallelism(com.google.protobuf.Int64Value value) {
        if (costThresholdForParallelismBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          costThresholdForParallelism_ = value;
          onChanged();
        } else {
          costThresholdForParallelismBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public Builder setCostThresholdForParallelism(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (costThresholdForParallelismBuilder_ == null) {
          costThresholdForParallelism_ = builderForValue.build();
          onChanged();
        } else {
          costThresholdForParallelismBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public Builder mergeCostThresholdForParallelism(com.google.protobuf.Int64Value value) {
        if (costThresholdForParallelismBuilder_ == null) {
          if (costThresholdForParallelism_ != null) {
            costThresholdForParallelism_ =
              com.google.protobuf.Int64Value.newBuilder(costThresholdForParallelism_).mergeFrom(value).buildPartial();
          } else {
            costThresholdForParallelism_ = value;
          }
          onChanged();
        } else {
          costThresholdForParallelismBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public Builder clearCostThresholdForParallelism() {
        if (costThresholdForParallelismBuilder_ == null) {
          costThresholdForParallelism_ = null;
          onChanged();
        } else {
          costThresholdForParallelism_ = null;
          costThresholdForParallelismBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getCostThresholdForParallelismBuilder() {
        
        onChanged();
        return getCostThresholdForParallelismFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getCostThresholdForParallelismOrBuilder() {
        if (costThresholdForParallelismBuilder_ != null) {
          return costThresholdForParallelismBuilder_.getMessageOrBuilder();
        } else {
          return costThresholdForParallelism_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : costThresholdForParallelism_;
        }
      }
      /**
       * <pre>
       * Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
       * SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value cost_threshold_for_parallelism = 2 [(.yandex.cloud.value) = "5-32767"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getCostThresholdForParallelismFieldBuilder() {
        if (costThresholdForParallelismBuilder_ == null) {
          costThresholdForParallelismBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getCostThresholdForParallelism(),
                  getParentForChildren(),
                  isClean());
          costThresholdForParallelism_ = null;
        }
        return costThresholdForParallelismBuilder_;
      }

      private com.google.protobuf.Int64Value auditLevel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> auditLevelBuilder_;
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       * @return Whether the auditLevel field is set.
       */
      public boolean hasAuditLevel() {
        return auditLevelBuilder_ != null || auditLevel_ != null;
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       * @return The auditLevel.
       */
      public com.google.protobuf.Int64Value getAuditLevel() {
        if (auditLevelBuilder_ == null) {
          return auditLevel_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : auditLevel_;
        } else {
          return auditLevelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public Builder setAuditLevel(com.google.protobuf.Int64Value value) {
        if (auditLevelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auditLevel_ = value;
          onChanged();
        } else {
          auditLevelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public Builder setAuditLevel(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (auditLevelBuilder_ == null) {
          auditLevel_ = builderForValue.build();
          onChanged();
        } else {
          auditLevelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public Builder mergeAuditLevel(com.google.protobuf.Int64Value value) {
        if (auditLevelBuilder_ == null) {
          if (auditLevel_ != null) {
            auditLevel_ =
              com.google.protobuf.Int64Value.newBuilder(auditLevel_).mergeFrom(value).buildPartial();
          } else {
            auditLevel_ = value;
          }
          onChanged();
        } else {
          auditLevelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public Builder clearAuditLevel() {
        if (auditLevelBuilder_ == null) {
          auditLevel_ = null;
          onChanged();
        } else {
          auditLevel_ = null;
          auditLevelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getAuditLevelBuilder() {
        
        onChanged();
        return getAuditLevelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getAuditLevelOrBuilder() {
        if (auditLevelBuilder_ != null) {
          return auditLevelBuilder_.getMessageOrBuilder();
        } else {
          return auditLevel_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : auditLevel_;
        }
      }
      /**
       * <pre>
       * Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
       * Possible values:
       * * 0 - do not log login attempts;
       * * 1 - log only failed login attempts;
       * * 2 - log only successful login attempts (not recommended);
       * * 3 - log all login attempts (not recommended).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value audit_level = 3 [(.yandex.cloud.value) = "0-3"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getAuditLevelFieldBuilder() {
        if (auditLevelBuilder_ == null) {
          auditLevelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getAuditLevel(),
                  getParentForChildren(),
                  isClean());
          auditLevel_ = null;
        }
        return auditLevelBuilder_;
      }

      private com.google.protobuf.Int64Value fillFactorPercent_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> fillFactorPercentBuilder_;
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       * @return Whether the fillFactorPercent field is set.
       */
      public boolean hasFillFactorPercent() {
        return fillFactorPercentBuilder_ != null || fillFactorPercent_ != null;
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       * @return The fillFactorPercent.
       */
      public com.google.protobuf.Int64Value getFillFactorPercent() {
        if (fillFactorPercentBuilder_ == null) {
          return fillFactorPercent_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : fillFactorPercent_;
        } else {
          return fillFactorPercentBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public Builder setFillFactorPercent(com.google.protobuf.Int64Value value) {
        if (fillFactorPercentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fillFactorPercent_ = value;
          onChanged();
        } else {
          fillFactorPercentBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public Builder setFillFactorPercent(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (fillFactorPercentBuilder_ == null) {
          fillFactorPercent_ = builderForValue.build();
          onChanged();
        } else {
          fillFactorPercentBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public Builder mergeFillFactorPercent(com.google.protobuf.Int64Value value) {
        if (fillFactorPercentBuilder_ == null) {
          if (fillFactorPercent_ != null) {
            fillFactorPercent_ =
              com.google.protobuf.Int64Value.newBuilder(fillFactorPercent_).mergeFrom(value).buildPartial();
          } else {
            fillFactorPercent_ = value;
          }
          onChanged();
        } else {
          fillFactorPercentBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public Builder clearFillFactorPercent() {
        if (fillFactorPercentBuilder_ == null) {
          fillFactorPercent_ = null;
          onChanged();
        } else {
          fillFactorPercent_ = null;
          fillFactorPercentBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getFillFactorPercentBuilder() {
        
        onChanged();
        return getFillFactorPercentFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getFillFactorPercentOrBuilder() {
        if (fillFactorPercentBuilder_ != null) {
          return fillFactorPercentBuilder_.getMessageOrBuilder();
        } else {
          return fillFactorPercent_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : fillFactorPercent_;
        }
      }
      /**
       * <pre>
       * Manages the fill factor server configuration option.
       * When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
       * Values 0 and 100 mean full page usage (no space reserved).
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value fill_factor_percent = 4 [(.yandex.cloud.value) = "0-100"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getFillFactorPercentFieldBuilder() {
        if (fillFactorPercentBuilder_ == null) {
          fillFactorPercentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getFillFactorPercent(),
                  getParentForChildren(),
                  isClean());
          fillFactorPercent_ = null;
        }
        return fillFactorPercentBuilder_;
      }

      private com.google.protobuf.BoolValue optimizeForAdHocWorkloads_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> optimizeForAdHocWorkloadsBuilder_;
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       * @return Whether the optimizeForAdHocWorkloads field is set.
       */
      public boolean hasOptimizeForAdHocWorkloads() {
        return optimizeForAdHocWorkloadsBuilder_ != null || optimizeForAdHocWorkloads_ != null;
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       * @return The optimizeForAdHocWorkloads.
       */
      public com.google.protobuf.BoolValue getOptimizeForAdHocWorkloads() {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          return optimizeForAdHocWorkloads_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : optimizeForAdHocWorkloads_;
        } else {
          return optimizeForAdHocWorkloadsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public Builder setOptimizeForAdHocWorkloads(com.google.protobuf.BoolValue value) {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          optimizeForAdHocWorkloads_ = value;
          onChanged();
        } else {
          optimizeForAdHocWorkloadsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public Builder setOptimizeForAdHocWorkloads(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          optimizeForAdHocWorkloads_ = builderForValue.build();
          onChanged();
        } else {
          optimizeForAdHocWorkloadsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public Builder mergeOptimizeForAdHocWorkloads(com.google.protobuf.BoolValue value) {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          if (optimizeForAdHocWorkloads_ != null) {
            optimizeForAdHocWorkloads_ =
              com.google.protobuf.BoolValue.newBuilder(optimizeForAdHocWorkloads_).mergeFrom(value).buildPartial();
          } else {
            optimizeForAdHocWorkloads_ = value;
          }
          onChanged();
        } else {
          optimizeForAdHocWorkloadsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public Builder clearOptimizeForAdHocWorkloads() {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          optimizeForAdHocWorkloads_ = null;
          onChanged();
        } else {
          optimizeForAdHocWorkloads_ = null;
          optimizeForAdHocWorkloadsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public com.google.protobuf.BoolValue.Builder getOptimizeForAdHocWorkloadsBuilder() {
        
        onChanged();
        return getOptimizeForAdHocWorkloadsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getOptimizeForAdHocWorkloadsOrBuilder() {
        if (optimizeForAdHocWorkloadsBuilder_ != null) {
          return optimizeForAdHocWorkloadsBuilder_.getMessageOrBuilder();
        } else {
          return optimizeForAdHocWorkloads_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : optimizeForAdHocWorkloads_;
        }
      }
      /**
       * <pre>
       * Determines whether plans should be cached only after second execution.
       * Allows to avoid SQL cache bloat because of single-use plans.
       * See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue optimize_for_ad_hoc_workloads = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getOptimizeForAdHocWorkloadsFieldBuilder() {
        if (optimizeForAdHocWorkloadsBuilder_ == null) {
          optimizeForAdHocWorkloadsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getOptimizeForAdHocWorkloads(),
                  getParentForChildren(),
                  isClean());
          optimizeForAdHocWorkloads_ = null;
        }
        return optimizeForAdHocWorkloadsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent)
    private static final yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent();
    }

    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SQLServerConfig2019ent>
        PARSER = new com.google.protobuf.AbstractParser<SQLServerConfig2019ent>() {
      @java.lang.Override
      public SQLServerConfig2019ent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SQLServerConfig2019ent(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SQLServerConfig2019ent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SQLServerConfig2019ent> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SQLServerConfigSet2019entOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
     * @return Whether the effectiveConfig field is set.
     */
    boolean hasEffectiveConfig();
    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
     * @return The effectiveConfig.
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getEffectiveConfig();
    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder getEffectiveConfigOrBuilder();

    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
     * @return Whether the userConfig field is set.
     */
    boolean hasUserConfig();
    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
     * @return The userConfig.
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getUserConfig();
    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder getUserConfigOrBuilder();

    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
     * @return Whether the defaultConfig field is set.
     */
    boolean hasDefaultConfig();
    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
     * @return The defaultConfig.
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getDefaultConfig();
    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
     */
    yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder getDefaultConfigOrBuilder();
  }
  /**
   * Protobuf type {@code yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent}
   */
  public static final class SQLServerConfigSet2019ent extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent)
      SQLServerConfigSet2019entOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SQLServerConfigSet2019ent.newBuilder() to construct.
    private SQLServerConfigSet2019ent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SQLServerConfigSet2019ent() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SQLServerConfigSet2019ent();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SQLServerConfigSet2019ent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder subBuilder = null;
              if (effectiveConfig_ != null) {
                subBuilder = effectiveConfig_.toBuilder();
              }
              effectiveConfig_ = input.readMessage(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(effectiveConfig_);
                effectiveConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder subBuilder = null;
              if (userConfig_ != null) {
                subBuilder = userConfig_.toBuilder();
              }
              userConfig_ = input.readMessage(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userConfig_);
                userConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder subBuilder = null;
              if (defaultConfig_ != null) {
                subBuilder = defaultConfig_.toBuilder();
              }
              defaultConfig_ = input.readMessage(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(defaultConfig_);
                defaultConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019ent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019ent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent.class, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent.Builder.class);
    }

    public static final int EFFECTIVE_CONFIG_FIELD_NUMBER = 1;
    private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent effectiveConfig_;
    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
     * @return Whether the effectiveConfig field is set.
     */
    @java.lang.Override
    public boolean hasEffectiveConfig() {
      return effectiveConfig_ != null;
    }
    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
     * @return The effectiveConfig.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getEffectiveConfig() {
      return effectiveConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance() : effectiveConfig_;
    }
    /**
     * <pre>
     * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder getEffectiveConfigOrBuilder() {
      return getEffectiveConfig();
    }

    public static final int USER_CONFIG_FIELD_NUMBER = 2;
    private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent userConfig_;
    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
     * @return Whether the userConfig field is set.
     */
    @java.lang.Override
    public boolean hasUserConfig() {
      return userConfig_ != null;
    }
    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
     * @return The userConfig.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getUserConfig() {
      return userConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance() : userConfig_;
    }
    /**
     * <pre>
     * User-defined settings for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder getUserConfigOrBuilder() {
      return getUserConfig();
    }

    public static final int DEFAULT_CONFIG_FIELD_NUMBER = 3;
    private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent defaultConfig_;
    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
     * @return Whether the defaultConfig field is set.
     */
    @java.lang.Override
    public boolean hasDefaultConfig() {
      return defaultConfig_ != null;
    }
    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
     * @return The defaultConfig.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getDefaultConfig() {
      return defaultConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance() : defaultConfig_;
    }
    /**
     * <pre>
     * Default configuration for an SQL Server 2019 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder getDefaultConfigOrBuilder() {
      return getDefaultConfig();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (effectiveConfig_ != null) {
        output.writeMessage(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        output.writeMessage(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        output.writeMessage(3, getDefaultConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (effectiveConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDefaultConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent other = (yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent) obj;

      if (hasEffectiveConfig() != other.hasEffectiveConfig()) return false;
      if (hasEffectiveConfig()) {
        if (!getEffectiveConfig()
            .equals(other.getEffectiveConfig())) return false;
      }
      if (hasUserConfig() != other.hasUserConfig()) return false;
      if (hasUserConfig()) {
        if (!getUserConfig()
            .equals(other.getUserConfig())) return false;
      }
      if (hasDefaultConfig() != other.hasDefaultConfig()) return false;
      if (hasDefaultConfig()) {
        if (!getDefaultConfig()
            .equals(other.getDefaultConfig())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEffectiveConfig()) {
        hash = (37 * hash) + EFFECTIVE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getEffectiveConfig().hashCode();
      }
      if (hasUserConfig()) {
        hash = (37 * hash) + USER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getUserConfig().hashCode();
      }
      if (hasDefaultConfig()) {
        hash = (37 * hash) + DEFAULT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getDefaultConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent)
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019entOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019ent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019ent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent.class, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019ent_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent build() {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent buildPartial() {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent result = new yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent(this);
        if (effectiveConfigBuilder_ == null) {
          result.effectiveConfig_ = effectiveConfig_;
        } else {
          result.effectiveConfig_ = effectiveConfigBuilder_.build();
        }
        if (userConfigBuilder_ == null) {
          result.userConfig_ = userConfig_;
        } else {
          result.userConfig_ = userConfigBuilder_.build();
        }
        if (defaultConfigBuilder_ == null) {
          result.defaultConfig_ = defaultConfig_;
        } else {
          result.defaultConfig_ = defaultConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent) {
          return mergeFrom((yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent other) {
        if (other == yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent.getDefaultInstance()) return this;
        if (other.hasEffectiveConfig()) {
          mergeEffectiveConfig(other.getEffectiveConfig());
        }
        if (other.hasUserConfig()) {
          mergeUserConfig(other.getUserConfig());
        }
        if (other.hasDefaultConfig()) {
          mergeDefaultConfig(other.getDefaultConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent effectiveConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder> effectiveConfigBuilder_;
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
       * @return Whether the effectiveConfig field is set.
       */
      public boolean hasEffectiveConfig() {
        return effectiveConfigBuilder_ != null || effectiveConfig_ != null;
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
       * @return The effectiveConfig.
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          return effectiveConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance() : effectiveConfig_;
        } else {
          return effectiveConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
       */
      public Builder setEffectiveConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent value) {
        if (effectiveConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          effectiveConfig_ = value;
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
       */
      public Builder setEffectiveConfig(
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder builderForValue) {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = builderForValue.build();
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
       */
      public Builder mergeEffectiveConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent value) {
        if (effectiveConfigBuilder_ == null) {
          if (effectiveConfig_ != null) {
            effectiveConfig_ =
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.newBuilder(effectiveConfig_).mergeFrom(value).buildPartial();
          } else {
            effectiveConfig_ = value;
          }
          onChanged();
        } else {
          effectiveConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
       */
      public Builder clearEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
          onChanged();
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder getEffectiveConfigBuilder() {
        
        onChanged();
        return getEffectiveConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder getEffectiveConfigOrBuilder() {
        if (effectiveConfigBuilder_ != null) {
          return effectiveConfigBuilder_.getMessageOrBuilder();
        } else {
          return effectiveConfig_ == null ?
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance() : effectiveConfig_;
        }
      }
      /**
       * <pre>
       * Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent effective_config = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder> 
          getEffectiveConfigFieldBuilder() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder>(
                  getEffectiveConfig(),
                  getParentForChildren(),
                  isClean());
          effectiveConfig_ = null;
        }
        return effectiveConfigBuilder_;
      }

      private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent userConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder> userConfigBuilder_;
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
       * @return Whether the userConfig field is set.
       */
      public boolean hasUserConfig() {
        return userConfigBuilder_ != null || userConfig_ != null;
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
       * @return The userConfig.
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getUserConfig() {
        if (userConfigBuilder_ == null) {
          return userConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance() : userConfig_;
        } else {
          return userConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
       */
      public Builder setUserConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent value) {
        if (userConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userConfig_ = value;
          onChanged();
        } else {
          userConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
       */
      public Builder setUserConfig(
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder builderForValue) {
        if (userConfigBuilder_ == null) {
          userConfig_ = builderForValue.build();
          onChanged();
        } else {
          userConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
       */
      public Builder mergeUserConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent value) {
        if (userConfigBuilder_ == null) {
          if (userConfig_ != null) {
            userConfig_ =
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.newBuilder(userConfig_).mergeFrom(value).buildPartial();
          } else {
            userConfig_ = value;
          }
          onChanged();
        } else {
          userConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
       */
      public Builder clearUserConfig() {
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
          onChanged();
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder getUserConfigBuilder() {
        
        onChanged();
        return getUserConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder getUserConfigOrBuilder() {
        if (userConfigBuilder_ != null) {
          return userConfigBuilder_.getMessageOrBuilder();
        } else {
          return userConfig_ == null ?
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance() : userConfig_;
        }
      }
      /**
       * <pre>
       * User-defined settings for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent user_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder> 
          getUserConfigFieldBuilder() {
        if (userConfigBuilder_ == null) {
          userConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder>(
                  getUserConfig(),
                  getParentForChildren(),
                  isClean());
          userConfig_ = null;
        }
        return userConfigBuilder_;
      }

      private yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent defaultConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder> defaultConfigBuilder_;
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
       * @return Whether the defaultConfig field is set.
       */
      public boolean hasDefaultConfig() {
        return defaultConfigBuilder_ != null || defaultConfig_ != null;
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
       * @return The defaultConfig.
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent getDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          return defaultConfig_ == null ? yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance() : defaultConfig_;
        } else {
          return defaultConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
       */
      public Builder setDefaultConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent value) {
        if (defaultConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          defaultConfig_ = value;
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
       */
      public Builder setDefaultConfig(
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder builderForValue) {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = builderForValue.build();
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
       */
      public Builder mergeDefaultConfig(yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent value) {
        if (defaultConfigBuilder_ == null) {
          if (defaultConfig_ != null) {
            defaultConfig_ =
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.newBuilder(defaultConfig_).mergeFrom(value).buildPartial();
          } else {
            defaultConfig_ = value;
          }
          onChanged();
        } else {
          defaultConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
       */
      public Builder clearDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
          onChanged();
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder getDefaultConfigBuilder() {
        
        onChanged();
        return getDefaultConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder getDefaultConfigOrBuilder() {
        if (defaultConfigBuilder_ != null) {
          return defaultConfigBuilder_.getMessageOrBuilder();
        } else {
          return defaultConfig_ == null ?
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.getDefaultInstance() : defaultConfig_;
        }
      }
      /**
       * <pre>
       * Default configuration for an SQL Server 2019 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent default_config = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder> 
          getDefaultConfigFieldBuilder() {
        if (defaultConfigBuilder_ == null) {
          defaultConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019ent.Builder, yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfig2019entOrBuilder>(
                  getDefaultConfig(),
                  getParentForChildren(),
                  isClean());
          defaultConfig_ = null;
        }
        return defaultConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent)
    private static final yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent();
    }

    public static yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SQLServerConfigSet2019ent>
        PARSER = new com.google.protobuf.AbstractParser<SQLServerConfigSet2019ent>() {
      @java.lang.Override
      public SQLServerConfigSet2019ent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SQLServerConfigSet2019ent(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SQLServerConfigSet2019ent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SQLServerConfigSet2019ent> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.sqlserver.v1.config.Sqlserver2019.SQLServerConfigSet2019ent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019std_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019std_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019std_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019std_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019ent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019ent_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019ent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019ent_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n8yandex/cloud/mdb/sqlserver/v1/config/s" +
      "qlserver2019.proto\022$yandex.cloud.mdb.sql" +
      "server.v1.config\032\036google/protobuf/wrappe" +
      "rs.proto\032\035yandex/cloud/validation.proto\"" +
      "\367\002\n\026SQLServerConfig2019std\022H\n\031max_degree" +
      "_of_parallelism\030\001 \001(\0132\033.google.protobuf." +
      "Int64ValueB\010\372\3071\0041-99\022P\n\036cost_threshold_f" +
      "or_parallelism\030\002 \001(\0132\033.google.protobuf.I" +
      "nt64ValueB\013\372\3071\0075-32767\0229\n\013audit_level\030\003 " +
      "\001(\0132\033.google.protobuf.Int64ValueB\007\372\3071\0030-" +
      "3\022C\n\023fill_factor_percent\030\004 \001(\0132\033.google." +
      "protobuf.Int64ValueB\t\372\3071\0050-100\022A\n\035optimi" +
      "ze_for_ad_hoc_workloads\030\005 \001(\0132\032.google.p" +
      "rotobuf.BoolValue\"\234\002\n\031SQLServerConfigSet" +
      "2019std\022V\n\020effective_config\030\001 \001(\0132<.yand" +
      "ex.cloud.mdb.sqlserver.v1.config.SQLServ" +
      "erConfig2019std\022Q\n\013user_config\030\002 \001(\0132<.y" +
      "andex.cloud.mdb.sqlserver.v1.config.SQLS" +
      "erverConfig2019std\022T\n\016default_config\030\003 \001" +
      "(\0132<.yandex.cloud.mdb.sqlserver.v1.confi" +
      "g.SQLServerConfig2019std\"\367\002\n\026SQLServerCo" +
      "nfig2019ent\022H\n\031max_degree_of_parallelism" +
      "\030\001 \001(\0132\033.google.protobuf.Int64ValueB\010\372\3071" +
      "\0041-99\022P\n\036cost_threshold_for_parallelism\030" +
      "\002 \001(\0132\033.google.protobuf.Int64ValueB\013\372\3071\007" +
      "5-32767\0229\n\013audit_level\030\003 \001(\0132\033.google.pr" +
      "otobuf.Int64ValueB\007\372\3071\0030-3\022C\n\023fill_facto" +
      "r_percent\030\004 \001(\0132\033.google.protobuf.Int64V" +
      "alueB\t\372\3071\0050-100\022A\n\035optimize_for_ad_hoc_w" +
      "orkloads\030\005 \001(\0132\032.google.protobuf.BoolVal" +
      "ue\"\234\002\n\031SQLServerConfigSet2019ent\022V\n\020effe" +
      "ctive_config\030\001 \001(\0132<.yandex.cloud.mdb.sq" +
      "lserver.v1.config.SQLServerConfig2019ent" +
      "\022Q\n\013user_config\030\002 \001(\0132<.yandex.cloud.mdb" +
      ".sqlserver.v1.config.SQLServerConfig2019" +
      "ent\022T\n\016default_config\030\003 \001(\0132<.yandex.clo" +
      "ud.mdb.sqlserver.v1.config.SQLServerConf" +
      "ig2019entB~\n(yandex.cloud.api.mdb.sqlser" +
      "ver.v1.configZRgithub.com/yandex-cloud/g" +
      "o-genproto/yandex/cloud/mdb/sqlserver/v1" +
      "/config;sqlserverb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.WrappersProto.getDescriptor(),
          yandex.cloud.api.Validation.getDescriptor(),
        });
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019std_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019std_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019std_descriptor,
        new java.lang.String[] { "MaxDegreeOfParallelism", "CostThresholdForParallelism", "AuditLevel", "FillFactorPercent", "OptimizeForAdHocWorkloads", });
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019std_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019std_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019std_descriptor,
        new java.lang.String[] { "EffectiveConfig", "UserConfig", "DefaultConfig", });
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019ent_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019ent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfig2019ent_descriptor,
        new java.lang.String[] { "MaxDegreeOfParallelism", "CostThresholdForParallelism", "AuditLevel", "FillFactorPercent", "OptimizeForAdHocWorkloads", });
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019ent_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019ent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_sqlserver_v1_config_SQLServerConfigSet2019ent_descriptor,
        new java.lang.String[] { "EffectiveConfig", "UserConfig", "DefaultConfig", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(yandex.cloud.api.Validation.value);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.WrappersProto.getDescriptor();
    yandex.cloud.api.Validation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}

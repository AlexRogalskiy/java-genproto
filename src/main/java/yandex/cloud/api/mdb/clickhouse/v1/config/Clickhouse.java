// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto

package yandex.cloud.api.mdb.clickhouse.v1.config;

public final class Clickhouse {
  private Clickhouse() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ClickhouseConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel log_level = 1;</code>
     */
    int getLogLevelValue();
    /**
     * <pre>
     * Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel log_level = 1;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel getLogLevel();

    /**
     * <pre>
     * Settings for the MergeTree engine.
     * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
     */
    boolean hasMergeTree();
    /**
     * <pre>
     * Settings for the MergeTree engine.
     * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree getMergeTree();
    /**
     * <pre>
     * Settings for the MergeTree engine.
     * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTreeOrBuilder getMergeTreeOrBuilder();

    /**
     * <pre>
     * Compression settings for the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
     */
    java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression> 
        getCompressionList();
    /**
     * <pre>
     * Compression settings for the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression getCompression(int index);
    /**
     * <pre>
     * Compression settings for the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
     */
    int getCompressionCount();
    /**
     * <pre>
     * Compression settings for the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
     */
    java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.CompressionOrBuilder> 
        getCompressionOrBuilderList();
    /**
     * <pre>
     * Compression settings for the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.CompressionOrBuilder getCompressionOrBuilder(
        int index);

    /**
     * <pre>
     * Configuration of external dictionaries to be used by the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
     */
    java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary> 
        getDictionariesList();
    /**
     * <pre>
     * Configuration of external dictionaries to be used by the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary getDictionaries(int index);
    /**
     * <pre>
     * Configuration of external dictionaries to be used by the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
     */
    int getDictionariesCount();
    /**
     * <pre>
     * Configuration of external dictionaries to be used by the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
     */
    java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionaryOrBuilder> 
        getDictionariesOrBuilderList();
    /**
     * <pre>
     * Configuration of external dictionaries to be used by the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionaryOrBuilder getDictionariesOrBuilder(
        int index);

    /**
     * <pre>
     * Settings for thinning Graphite data.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
     */
    java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup> 
        getGraphiteRollupList();
    /**
     * <pre>
     * Settings for thinning Graphite data.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup getGraphiteRollup(int index);
    /**
     * <pre>
     * Settings for thinning Graphite data.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
     */
    int getGraphiteRollupCount();
    /**
     * <pre>
     * Settings for thinning Graphite data.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
     */
    java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollupOrBuilder> 
        getGraphiteRollupOrBuilderList();
    /**
     * <pre>
     * Settings for thinning Graphite data.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollupOrBuilder getGraphiteRollupOrBuilder(
        int index);

    /**
     * <pre>
     * Maximum number of inbound connections.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    boolean hasMaxConnections();
    /**
     * <pre>
     * Maximum number of inbound connections.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    com.google.protobuf.Int64Value getMaxConnections();
    /**
     * <pre>
     * Maximum number of inbound connections.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder();

    /**
     * <pre>
     * Maximum number of simultaneously processed requests.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    boolean hasMaxConcurrentQueries();
    /**
     * <pre>
     * Maximum number of simultaneously processed requests.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    com.google.protobuf.Int64Value getMaxConcurrentQueries();
    /**
     * <pre>
     * Maximum number of simultaneously processed requests.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxConcurrentQueriesOrBuilder();

    /**
     * <pre>
     * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
     */
    boolean hasKeepAliveTimeout();
    /**
     * <pre>
     * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
     */
    com.google.protobuf.Int64Value getKeepAliveTimeout();
    /**
     * <pre>
     * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getKeepAliveTimeoutOrBuilder();

    /**
     * <pre>
     * Cache size (in bytes) for uncompressed data used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
     */
    boolean hasUncompressedCacheSize();
    /**
     * <pre>
     * Cache size (in bytes) for uncompressed data used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
     */
    com.google.protobuf.Int64Value getUncompressedCacheSize();
    /**
     * <pre>
     * Cache size (in bytes) for uncompressed data used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getUncompressedCacheSizeOrBuilder();

    /**
     * <pre>
     * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
     */
    boolean hasMarkCacheSize();
    /**
     * <pre>
     * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
     */
    com.google.protobuf.Int64Value getMarkCacheSize();
    /**
     * <pre>
     * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMarkCacheSizeOrBuilder();

    /**
     * <pre>
     * Maximum size of the table that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
     */
    boolean hasMaxTableSizeToDrop();
    /**
     * <pre>
     * Maximum size of the table that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
     */
    com.google.protobuf.Int64Value getMaxTableSizeToDrop();
    /**
     * <pre>
     * Maximum size of the table that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxTableSizeToDropOrBuilder();

    /**
     * <pre>
     * Maximum size of the partition that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
     */
    boolean hasMaxPartitionSizeToDrop();
    /**
     * <pre>
     * Maximum size of the partition that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
     */
    com.google.protobuf.Int64Value getMaxPartitionSizeToDrop();
    /**
     * <pre>
     * Maximum size of the partition that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxPartitionSizeToDropOrBuilder();

    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasBuiltinDictionariesReloadInterval();
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.protobuf.Int64Value getBuiltinDictionariesReloadInterval();
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.protobuf.Int64ValueOrBuilder getBuiltinDictionariesReloadIntervalOrBuilder();

    /**
     * <pre>
     * The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
     * </pre>
     *
     * <code>string timezone = 14;</code>
     */
    java.lang.String getTimezone();
    /**
     * <pre>
     * The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
     * </pre>
     *
     * <code>string timezone = 14;</code>
     */
    com.google.protobuf.ByteString
        getTimezoneBytes();

    /**
     * <pre>
     * Address of the archive with the user geobase in Object Storage.
     * </pre>
     *
     * <code>string geobase_uri = 15;</code>
     */
    java.lang.String getGeobaseUri();
    /**
     * <pre>
     * Address of the archive with the user geobase in Object Storage.
     * </pre>
     *
     * <code>string geobase_uri = 15;</code>
     */
    com.google.protobuf.ByteString
        getGeobaseUriBytes();
  }
  /**
   * <pre>
   * ClickHouse configuration options. Detailed description for each set of options
   * is available in [ClickHouse documentation](https://clickhouse.yandex/docs/ru/operations/server_settings/settings/).
   * Any options not listed here are not supported.
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig}
   */
  public  static final class ClickhouseConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig)
      ClickhouseConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ClickhouseConfig.newBuilder() to construct.
    private ClickhouseConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ClickhouseConfig() {
      logLevel_ = 0;
      compression_ = java.util.Collections.emptyList();
      dictionaries_ = java.util.Collections.emptyList();
      graphiteRollup_ = java.util.Collections.emptyList();
      timezone_ = "";
      geobaseUri_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ClickhouseConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              logLevel_ = rawValue;
              break;
            }
            case 18: {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.Builder subBuilder = null;
              if (mergeTree_ != null) {
                subBuilder = mergeTree_.toBuilder();
              }
              mergeTree_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mergeTree_);
                mergeTree_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                compression_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression>();
                mutable_bitField0_ |= 0x00000004;
              }
              compression_.add(
                  input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                dictionaries_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary>();
                mutable_bitField0_ |= 0x00000008;
              }
              dictionaries_.add(
                  input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                graphiteRollup_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup>();
                mutable_bitField0_ |= 0x00000010;
              }
              graphiteRollup_.add(
                  input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.parser(), extensionRegistry));
              break;
            }
            case 50: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxConnections_ != null) {
                subBuilder = maxConnections_.toBuilder();
              }
              maxConnections_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxConnections_);
                maxConnections_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxConcurrentQueries_ != null) {
                subBuilder = maxConcurrentQueries_.toBuilder();
              }
              maxConcurrentQueries_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxConcurrentQueries_);
                maxConcurrentQueries_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (keepAliveTimeout_ != null) {
                subBuilder = keepAliveTimeout_.toBuilder();
              }
              keepAliveTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(keepAliveTimeout_);
                keepAliveTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 74: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (uncompressedCacheSize_ != null) {
                subBuilder = uncompressedCacheSize_.toBuilder();
              }
              uncompressedCacheSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(uncompressedCacheSize_);
                uncompressedCacheSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 82: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (markCacheSize_ != null) {
                subBuilder = markCacheSize_.toBuilder();
              }
              markCacheSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(markCacheSize_);
                markCacheSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 90: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxTableSizeToDrop_ != null) {
                subBuilder = maxTableSizeToDrop_.toBuilder();
              }
              maxTableSizeToDrop_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxTableSizeToDrop_);
                maxTableSizeToDrop_ = subBuilder.buildPartial();
              }

              break;
            }
            case 98: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (builtinDictionariesReloadInterval_ != null) {
                subBuilder = builtinDictionariesReloadInterval_.toBuilder();
              }
              builtinDictionariesReloadInterval_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(builtinDictionariesReloadInterval_);
                builtinDictionariesReloadInterval_ = subBuilder.buildPartial();
              }

              break;
            }
            case 106: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxPartitionSizeToDrop_ != null) {
                subBuilder = maxPartitionSizeToDrop_.toBuilder();
              }
              maxPartitionSizeToDrop_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxPartitionSizeToDrop_);
                maxPartitionSizeToDrop_ = subBuilder.buildPartial();
              }

              break;
            }
            case 114: {
              java.lang.String s = input.readStringRequireUtf8();

              timezone_ = s;
              break;
            }
            case 122: {
              java.lang.String s = input.readStringRequireUtf8();

              geobaseUri_ = s;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          compression_ = java.util.Collections.unmodifiableList(compression_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          dictionaries_ = java.util.Collections.unmodifiableList(dictionaries_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          graphiteRollup_ = java.util.Collections.unmodifiableList(graphiteRollup_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder.class);
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel}
     */
    public enum LogLevel
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LOG_LEVEL_UNSPECIFIED = 0;</code>
       */
      LOG_LEVEL_UNSPECIFIED(0),
      /**
       * <code>TRACE = 1;</code>
       */
      TRACE(1),
      /**
       * <code>DEBUG = 2;</code>
       */
      DEBUG(2),
      /**
       * <code>INFORMATION = 3;</code>
       */
      INFORMATION(3),
      /**
       * <code>WARNING = 4;</code>
       */
      WARNING(4),
      /**
       * <code>ERROR = 5;</code>
       */
      ERROR(5),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>LOG_LEVEL_UNSPECIFIED = 0;</code>
       */
      public static final int LOG_LEVEL_UNSPECIFIED_VALUE = 0;
      /**
       * <code>TRACE = 1;</code>
       */
      public static final int TRACE_VALUE = 1;
      /**
       * <code>DEBUG = 2;</code>
       */
      public static final int DEBUG_VALUE = 2;
      /**
       * <code>INFORMATION = 3;</code>
       */
      public static final int INFORMATION_VALUE = 3;
      /**
       * <code>WARNING = 4;</code>
       */
      public static final int WARNING_VALUE = 4;
      /**
       * <code>ERROR = 5;</code>
       */
      public static final int ERROR_VALUE = 5;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LogLevel valueOf(int value) {
        return forNumber(value);
      }

      public static LogLevel forNumber(int value) {
        switch (value) {
          case 0: return LOG_LEVEL_UNSPECIFIED;
          case 1: return TRACE;
          case 2: return DEBUG;
          case 3: return INFORMATION;
          case 4: return WARNING;
          case 5: return ERROR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LogLevel>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LogLevel> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LogLevel>() {
              public LogLevel findValueByNumber(int number) {
                return LogLevel.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDescriptor().getEnumTypes().get(0);
      }

      private static final LogLevel[] VALUES = values();

      public static LogLevel valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private LogLevel(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel)
    }

    public interface MergeTreeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Number of blocks of hashes to keep in ZooKeeper.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
       */
      boolean hasReplicatedDeduplicationWindow();
      /**
       * <pre>
       * Number of blocks of hashes to keep in ZooKeeper.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
       */
      com.google.protobuf.Int64Value getReplicatedDeduplicationWindow();
      /**
       * <pre>
       * Number of blocks of hashes to keep in ZooKeeper.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
       */
      com.google.protobuf.Int64ValueOrBuilder getReplicatedDeduplicationWindowOrBuilder();

      /**
       * <pre>
       * Period of time to keep blocks of hashes for.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
       */
      boolean hasReplicatedDeduplicationWindowSeconds();
      /**
       * <pre>
       * Period of time to keep blocks of hashes for.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
       */
      com.google.protobuf.Int64Value getReplicatedDeduplicationWindowSeconds();
      /**
       * <pre>
       * Period of time to keep blocks of hashes for.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
       */
      com.google.protobuf.Int64ValueOrBuilder getReplicatedDeduplicationWindowSecondsOrBuilder();

      /**
       * <pre>
       * If table contains at least that many active parts in single partition, artificially slow down insert into table.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
       */
      boolean hasPartsToDelayInsert();
      /**
       * <pre>
       * If table contains at least that many active parts in single partition, artificially slow down insert into table.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
       */
      com.google.protobuf.Int64Value getPartsToDelayInsert();
      /**
       * <pre>
       * If table contains at least that many active parts in single partition, artificially slow down insert into table.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
       */
      com.google.protobuf.Int64ValueOrBuilder getPartsToDelayInsertOrBuilder();

      /**
       * <pre>
       * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
       */
      boolean hasPartsToThrowInsert();
      /**
       * <pre>
       * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
       */
      com.google.protobuf.Int64Value getPartsToThrowInsert();
      /**
       * <pre>
       * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
       */
      com.google.protobuf.Int64ValueOrBuilder getPartsToThrowInsertOrBuilder();

      /**
       * <pre>
       * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
       */
      boolean hasMaxReplicatedMergesInQueue();
      /**
       * <pre>
       * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
       */
      com.google.protobuf.Int64Value getMaxReplicatedMergesInQueue();
      /**
       * <pre>
       * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
       */
      com.google.protobuf.Int64ValueOrBuilder getMaxReplicatedMergesInQueueOrBuilder();

      /**
       * <pre>
       * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
       * maximum size of merge to process.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
       */
      boolean hasNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge();
      /**
       * <pre>
       * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
       * maximum size of merge to process.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
       */
      com.google.protobuf.Int64Value getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge();
      /**
       * <pre>
       * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
       * maximum size of merge to process.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
       */
      com.google.protobuf.Int64ValueOrBuilder getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMergeOrBuilder();

      /**
       * <pre>
       * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
       * in replication queue).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
       */
      boolean hasMaxBytesToMergeAtMinSpaceInPool();
      /**
       * <pre>
       * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
       * in replication queue).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
       */
      com.google.protobuf.Int64Value getMaxBytesToMergeAtMinSpaceInPool();
      /**
       * <pre>
       * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
       * in replication queue).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
       */
      com.google.protobuf.Int64ValueOrBuilder getMaxBytesToMergeAtMinSpaceInPoolOrBuilder();
    }
    /**
     * <pre>
     * Options specific to the MergeTree table engine.
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree}
     */
    public  static final class MergeTree extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree)
        MergeTreeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use MergeTree.newBuilder() to construct.
      private MergeTree(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private MergeTree() {
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private MergeTree(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.Int64Value.Builder subBuilder = null;
                if (replicatedDeduplicationWindow_ != null) {
                  subBuilder = replicatedDeduplicationWindow_.toBuilder();
                }
                replicatedDeduplicationWindow_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(replicatedDeduplicationWindow_);
                  replicatedDeduplicationWindow_ = subBuilder.buildPartial();
                }

                break;
              }
              case 18: {
                com.google.protobuf.Int64Value.Builder subBuilder = null;
                if (replicatedDeduplicationWindowSeconds_ != null) {
                  subBuilder = replicatedDeduplicationWindowSeconds_.toBuilder();
                }
                replicatedDeduplicationWindowSeconds_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(replicatedDeduplicationWindowSeconds_);
                  replicatedDeduplicationWindowSeconds_ = subBuilder.buildPartial();
                }

                break;
              }
              case 26: {
                com.google.protobuf.Int64Value.Builder subBuilder = null;
                if (partsToDelayInsert_ != null) {
                  subBuilder = partsToDelayInsert_.toBuilder();
                }
                partsToDelayInsert_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(partsToDelayInsert_);
                  partsToDelayInsert_ = subBuilder.buildPartial();
                }

                break;
              }
              case 34: {
                com.google.protobuf.Int64Value.Builder subBuilder = null;
                if (partsToThrowInsert_ != null) {
                  subBuilder = partsToThrowInsert_.toBuilder();
                }
                partsToThrowInsert_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(partsToThrowInsert_);
                  partsToThrowInsert_ = subBuilder.buildPartial();
                }

                break;
              }
              case 42: {
                com.google.protobuf.Int64Value.Builder subBuilder = null;
                if (maxReplicatedMergesInQueue_ != null) {
                  subBuilder = maxReplicatedMergesInQueue_.toBuilder();
                }
                maxReplicatedMergesInQueue_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(maxReplicatedMergesInQueue_);
                  maxReplicatedMergesInQueue_ = subBuilder.buildPartial();
                }

                break;
              }
              case 50: {
                com.google.protobuf.Int64Value.Builder subBuilder = null;
                if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ != null) {
                  subBuilder = numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_.toBuilder();
                }
                numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_);
                  numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 58: {
                com.google.protobuf.Int64Value.Builder subBuilder = null;
                if (maxBytesToMergeAtMinSpaceInPool_ != null) {
                  subBuilder = maxBytesToMergeAtMinSpaceInPool_.toBuilder();
                }
                maxBytesToMergeAtMinSpaceInPool_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(maxBytesToMergeAtMinSpaceInPool_);
                  maxBytesToMergeAtMinSpaceInPool_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_MergeTree_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_MergeTree_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.Builder.class);
      }

      public static final int REPLICATED_DEDUPLICATION_WINDOW_FIELD_NUMBER = 1;
      private com.google.protobuf.Int64Value replicatedDeduplicationWindow_;
      /**
       * <pre>
       * Number of blocks of hashes to keep in ZooKeeper.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
       */
      public boolean hasReplicatedDeduplicationWindow() {
        return replicatedDeduplicationWindow_ != null;
      }
      /**
       * <pre>
       * Number of blocks of hashes to keep in ZooKeeper.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
       */
      public com.google.protobuf.Int64Value getReplicatedDeduplicationWindow() {
        return replicatedDeduplicationWindow_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : replicatedDeduplicationWindow_;
      }
      /**
       * <pre>
       * Number of blocks of hashes to keep in ZooKeeper.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getReplicatedDeduplicationWindowOrBuilder() {
        return getReplicatedDeduplicationWindow();
      }

      public static final int REPLICATED_DEDUPLICATION_WINDOW_SECONDS_FIELD_NUMBER = 2;
      private com.google.protobuf.Int64Value replicatedDeduplicationWindowSeconds_;
      /**
       * <pre>
       * Period of time to keep blocks of hashes for.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
       */
      public boolean hasReplicatedDeduplicationWindowSeconds() {
        return replicatedDeduplicationWindowSeconds_ != null;
      }
      /**
       * <pre>
       * Period of time to keep blocks of hashes for.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
       */
      public com.google.protobuf.Int64Value getReplicatedDeduplicationWindowSeconds() {
        return replicatedDeduplicationWindowSeconds_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : replicatedDeduplicationWindowSeconds_;
      }
      /**
       * <pre>
       * Period of time to keep blocks of hashes for.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getReplicatedDeduplicationWindowSecondsOrBuilder() {
        return getReplicatedDeduplicationWindowSeconds();
      }

      public static final int PARTS_TO_DELAY_INSERT_FIELD_NUMBER = 3;
      private com.google.protobuf.Int64Value partsToDelayInsert_;
      /**
       * <pre>
       * If table contains at least that many active parts in single partition, artificially slow down insert into table.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
       */
      public boolean hasPartsToDelayInsert() {
        return partsToDelayInsert_ != null;
      }
      /**
       * <pre>
       * If table contains at least that many active parts in single partition, artificially slow down insert into table.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
       */
      public com.google.protobuf.Int64Value getPartsToDelayInsert() {
        return partsToDelayInsert_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : partsToDelayInsert_;
      }
      /**
       * <pre>
       * If table contains at least that many active parts in single partition, artificially slow down insert into table.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getPartsToDelayInsertOrBuilder() {
        return getPartsToDelayInsert();
      }

      public static final int PARTS_TO_THROW_INSERT_FIELD_NUMBER = 4;
      private com.google.protobuf.Int64Value partsToThrowInsert_;
      /**
       * <pre>
       * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
       */
      public boolean hasPartsToThrowInsert() {
        return partsToThrowInsert_ != null;
      }
      /**
       * <pre>
       * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
       */
      public com.google.protobuf.Int64Value getPartsToThrowInsert() {
        return partsToThrowInsert_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : partsToThrowInsert_;
      }
      /**
       * <pre>
       * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getPartsToThrowInsertOrBuilder() {
        return getPartsToThrowInsert();
      }

      public static final int MAX_REPLICATED_MERGES_IN_QUEUE_FIELD_NUMBER = 5;
      private com.google.protobuf.Int64Value maxReplicatedMergesInQueue_;
      /**
       * <pre>
       * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
       */
      public boolean hasMaxReplicatedMergesInQueue() {
        return maxReplicatedMergesInQueue_ != null;
      }
      /**
       * <pre>
       * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
       */
      public com.google.protobuf.Int64Value getMaxReplicatedMergesInQueue() {
        return maxReplicatedMergesInQueue_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxReplicatedMergesInQueue_;
      }
      /**
       * <pre>
       * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxReplicatedMergesInQueueOrBuilder() {
        return getMaxReplicatedMergesInQueue();
      }

      public static final int NUMBER_OF_FREE_ENTRIES_IN_POOL_TO_LOWER_MAX_SIZE_OF_MERGE_FIELD_NUMBER = 6;
      private com.google.protobuf.Int64Value numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_;
      /**
       * <pre>
       * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
       * maximum size of merge to process.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
       */
      public boolean hasNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() {
        return numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ != null;
      }
      /**
       * <pre>
       * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
       * maximum size of merge to process.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
       */
      public com.google.protobuf.Int64Value getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() {
        return numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_;
      }
      /**
       * <pre>
       * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
       * maximum size of merge to process.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMergeOrBuilder() {
        return getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge();
      }

      public static final int MAX_BYTES_TO_MERGE_AT_MIN_SPACE_IN_POOL_FIELD_NUMBER = 7;
      private com.google.protobuf.Int64Value maxBytesToMergeAtMinSpaceInPool_;
      /**
       * <pre>
       * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
       * in replication queue).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
       */
      public boolean hasMaxBytesToMergeAtMinSpaceInPool() {
        return maxBytesToMergeAtMinSpaceInPool_ != null;
      }
      /**
       * <pre>
       * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
       * in replication queue).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
       */
      public com.google.protobuf.Int64Value getMaxBytesToMergeAtMinSpaceInPool() {
        return maxBytesToMergeAtMinSpaceInPool_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToMergeAtMinSpaceInPool_;
      }
      /**
       * <pre>
       * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
       * in replication queue).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxBytesToMergeAtMinSpaceInPoolOrBuilder() {
        return getMaxBytesToMergeAtMinSpaceInPool();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (replicatedDeduplicationWindow_ != null) {
          output.writeMessage(1, getReplicatedDeduplicationWindow());
        }
        if (replicatedDeduplicationWindowSeconds_ != null) {
          output.writeMessage(2, getReplicatedDeduplicationWindowSeconds());
        }
        if (partsToDelayInsert_ != null) {
          output.writeMessage(3, getPartsToDelayInsert());
        }
        if (partsToThrowInsert_ != null) {
          output.writeMessage(4, getPartsToThrowInsert());
        }
        if (maxReplicatedMergesInQueue_ != null) {
          output.writeMessage(5, getMaxReplicatedMergesInQueue());
        }
        if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ != null) {
          output.writeMessage(6, getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge());
        }
        if (maxBytesToMergeAtMinSpaceInPool_ != null) {
          output.writeMessage(7, getMaxBytesToMergeAtMinSpaceInPool());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (replicatedDeduplicationWindow_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getReplicatedDeduplicationWindow());
        }
        if (replicatedDeduplicationWindowSeconds_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getReplicatedDeduplicationWindowSeconds());
        }
        if (partsToDelayInsert_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getPartsToDelayInsert());
        }
        if (partsToThrowInsert_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getPartsToThrowInsert());
        }
        if (maxReplicatedMergesInQueue_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, getMaxReplicatedMergesInQueue());
        }
        if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge());
        }
        if (maxBytesToMergeAtMinSpaceInPool_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, getMaxBytesToMergeAtMinSpaceInPool());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree)) {
          return super.equals(obj);
        }
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree) obj;

        boolean result = true;
        result = result && (hasReplicatedDeduplicationWindow() == other.hasReplicatedDeduplicationWindow());
        if (hasReplicatedDeduplicationWindow()) {
          result = result && getReplicatedDeduplicationWindow()
              .equals(other.getReplicatedDeduplicationWindow());
        }
        result = result && (hasReplicatedDeduplicationWindowSeconds() == other.hasReplicatedDeduplicationWindowSeconds());
        if (hasReplicatedDeduplicationWindowSeconds()) {
          result = result && getReplicatedDeduplicationWindowSeconds()
              .equals(other.getReplicatedDeduplicationWindowSeconds());
        }
        result = result && (hasPartsToDelayInsert() == other.hasPartsToDelayInsert());
        if (hasPartsToDelayInsert()) {
          result = result && getPartsToDelayInsert()
              .equals(other.getPartsToDelayInsert());
        }
        result = result && (hasPartsToThrowInsert() == other.hasPartsToThrowInsert());
        if (hasPartsToThrowInsert()) {
          result = result && getPartsToThrowInsert()
              .equals(other.getPartsToThrowInsert());
        }
        result = result && (hasMaxReplicatedMergesInQueue() == other.hasMaxReplicatedMergesInQueue());
        if (hasMaxReplicatedMergesInQueue()) {
          result = result && getMaxReplicatedMergesInQueue()
              .equals(other.getMaxReplicatedMergesInQueue());
        }
        result = result && (hasNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() == other.hasNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge());
        if (hasNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge()) {
          result = result && getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge()
              .equals(other.getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge());
        }
        result = result && (hasMaxBytesToMergeAtMinSpaceInPool() == other.hasMaxBytesToMergeAtMinSpaceInPool());
        if (hasMaxBytesToMergeAtMinSpaceInPool()) {
          result = result && getMaxBytesToMergeAtMinSpaceInPool()
              .equals(other.getMaxBytesToMergeAtMinSpaceInPool());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasReplicatedDeduplicationWindow()) {
          hash = (37 * hash) + REPLICATED_DEDUPLICATION_WINDOW_FIELD_NUMBER;
          hash = (53 * hash) + getReplicatedDeduplicationWindow().hashCode();
        }
        if (hasReplicatedDeduplicationWindowSeconds()) {
          hash = (37 * hash) + REPLICATED_DEDUPLICATION_WINDOW_SECONDS_FIELD_NUMBER;
          hash = (53 * hash) + getReplicatedDeduplicationWindowSeconds().hashCode();
        }
        if (hasPartsToDelayInsert()) {
          hash = (37 * hash) + PARTS_TO_DELAY_INSERT_FIELD_NUMBER;
          hash = (53 * hash) + getPartsToDelayInsert().hashCode();
        }
        if (hasPartsToThrowInsert()) {
          hash = (37 * hash) + PARTS_TO_THROW_INSERT_FIELD_NUMBER;
          hash = (53 * hash) + getPartsToThrowInsert().hashCode();
        }
        if (hasMaxReplicatedMergesInQueue()) {
          hash = (37 * hash) + MAX_REPLICATED_MERGES_IN_QUEUE_FIELD_NUMBER;
          hash = (53 * hash) + getMaxReplicatedMergesInQueue().hashCode();
        }
        if (hasNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge()) {
          hash = (37 * hash) + NUMBER_OF_FREE_ENTRIES_IN_POOL_TO_LOWER_MAX_SIZE_OF_MERGE_FIELD_NUMBER;
          hash = (53 * hash) + getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge().hashCode();
        }
        if (hasMaxBytesToMergeAtMinSpaceInPool()) {
          hash = (37 * hash) + MAX_BYTES_TO_MERGE_AT_MIN_SPACE_IN_POOL_FIELD_NUMBER;
          hash = (53 * hash) + getMaxBytesToMergeAtMinSpaceInPool().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Options specific to the MergeTree table engine.
       * </pre>
       *
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree)
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTreeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_MergeTree_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_MergeTree_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.Builder.class);
        }

        // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (replicatedDeduplicationWindowBuilder_ == null) {
            replicatedDeduplicationWindow_ = null;
          } else {
            replicatedDeduplicationWindow_ = null;
            replicatedDeduplicationWindowBuilder_ = null;
          }
          if (replicatedDeduplicationWindowSecondsBuilder_ == null) {
            replicatedDeduplicationWindowSeconds_ = null;
          } else {
            replicatedDeduplicationWindowSeconds_ = null;
            replicatedDeduplicationWindowSecondsBuilder_ = null;
          }
          if (partsToDelayInsertBuilder_ == null) {
            partsToDelayInsert_ = null;
          } else {
            partsToDelayInsert_ = null;
            partsToDelayInsertBuilder_ = null;
          }
          if (partsToThrowInsertBuilder_ == null) {
            partsToThrowInsert_ = null;
          } else {
            partsToThrowInsert_ = null;
            partsToThrowInsertBuilder_ = null;
          }
          if (maxReplicatedMergesInQueueBuilder_ == null) {
            maxReplicatedMergesInQueue_ = null;
          } else {
            maxReplicatedMergesInQueue_ = null;
            maxReplicatedMergesInQueueBuilder_ = null;
          }
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ == null) {
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = null;
          } else {
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = null;
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ = null;
          }
          if (maxBytesToMergeAtMinSpaceInPoolBuilder_ == null) {
            maxBytesToMergeAtMinSpaceInPool_ = null;
          } else {
            maxBytesToMergeAtMinSpaceInPool_ = null;
            maxBytesToMergeAtMinSpaceInPoolBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_MergeTree_descriptor;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree getDefaultInstanceForType() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.getDefaultInstance();
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree build() {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree buildPartial() {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree(this);
          if (replicatedDeduplicationWindowBuilder_ == null) {
            result.replicatedDeduplicationWindow_ = replicatedDeduplicationWindow_;
          } else {
            result.replicatedDeduplicationWindow_ = replicatedDeduplicationWindowBuilder_.build();
          }
          if (replicatedDeduplicationWindowSecondsBuilder_ == null) {
            result.replicatedDeduplicationWindowSeconds_ = replicatedDeduplicationWindowSeconds_;
          } else {
            result.replicatedDeduplicationWindowSeconds_ = replicatedDeduplicationWindowSecondsBuilder_.build();
          }
          if (partsToDelayInsertBuilder_ == null) {
            result.partsToDelayInsert_ = partsToDelayInsert_;
          } else {
            result.partsToDelayInsert_ = partsToDelayInsertBuilder_.build();
          }
          if (partsToThrowInsertBuilder_ == null) {
            result.partsToThrowInsert_ = partsToThrowInsert_;
          } else {
            result.partsToThrowInsert_ = partsToThrowInsertBuilder_.build();
          }
          if (maxReplicatedMergesInQueueBuilder_ == null) {
            result.maxReplicatedMergesInQueue_ = maxReplicatedMergesInQueue_;
          } else {
            result.maxReplicatedMergesInQueue_ = maxReplicatedMergesInQueueBuilder_.build();
          }
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ == null) {
            result.numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_;
          } else {
            result.numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_.build();
          }
          if (maxBytesToMergeAtMinSpaceInPoolBuilder_ == null) {
            result.maxBytesToMergeAtMinSpaceInPool_ = maxBytesToMergeAtMinSpaceInPool_;
          } else {
            result.maxBytesToMergeAtMinSpaceInPool_ = maxBytesToMergeAtMinSpaceInPoolBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return (Builder) super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree) {
            return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree other) {
          if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.getDefaultInstance()) return this;
          if (other.hasReplicatedDeduplicationWindow()) {
            mergeReplicatedDeduplicationWindow(other.getReplicatedDeduplicationWindow());
          }
          if (other.hasReplicatedDeduplicationWindowSeconds()) {
            mergeReplicatedDeduplicationWindowSeconds(other.getReplicatedDeduplicationWindowSeconds());
          }
          if (other.hasPartsToDelayInsert()) {
            mergePartsToDelayInsert(other.getPartsToDelayInsert());
          }
          if (other.hasPartsToThrowInsert()) {
            mergePartsToThrowInsert(other.getPartsToThrowInsert());
          }
          if (other.hasMaxReplicatedMergesInQueue()) {
            mergeMaxReplicatedMergesInQueue(other.getMaxReplicatedMergesInQueue());
          }
          if (other.hasNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge()) {
            mergeNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge(other.getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge());
          }
          if (other.hasMaxBytesToMergeAtMinSpaceInPool()) {
            mergeMaxBytesToMergeAtMinSpaceInPool(other.getMaxBytesToMergeAtMinSpaceInPool());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private com.google.protobuf.Int64Value replicatedDeduplicationWindow_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> replicatedDeduplicationWindowBuilder_;
        /**
         * <pre>
         * Number of blocks of hashes to keep in ZooKeeper.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
         */
        public boolean hasReplicatedDeduplicationWindow() {
          return replicatedDeduplicationWindowBuilder_ != null || replicatedDeduplicationWindow_ != null;
        }
        /**
         * <pre>
         * Number of blocks of hashes to keep in ZooKeeper.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
         */
        public com.google.protobuf.Int64Value getReplicatedDeduplicationWindow() {
          if (replicatedDeduplicationWindowBuilder_ == null) {
            return replicatedDeduplicationWindow_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : replicatedDeduplicationWindow_;
          } else {
            return replicatedDeduplicationWindowBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Number of blocks of hashes to keep in ZooKeeper.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
         */
        public Builder setReplicatedDeduplicationWindow(com.google.protobuf.Int64Value value) {
          if (replicatedDeduplicationWindowBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            replicatedDeduplicationWindow_ = value;
            onChanged();
          } else {
            replicatedDeduplicationWindowBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Number of blocks of hashes to keep in ZooKeeper.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
         */
        public Builder setReplicatedDeduplicationWindow(
            com.google.protobuf.Int64Value.Builder builderForValue) {
          if (replicatedDeduplicationWindowBuilder_ == null) {
            replicatedDeduplicationWindow_ = builderForValue.build();
            onChanged();
          } else {
            replicatedDeduplicationWindowBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Number of blocks of hashes to keep in ZooKeeper.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
         */
        public Builder mergeReplicatedDeduplicationWindow(com.google.protobuf.Int64Value value) {
          if (replicatedDeduplicationWindowBuilder_ == null) {
            if (replicatedDeduplicationWindow_ != null) {
              replicatedDeduplicationWindow_ =
                com.google.protobuf.Int64Value.newBuilder(replicatedDeduplicationWindow_).mergeFrom(value).buildPartial();
            } else {
              replicatedDeduplicationWindow_ = value;
            }
            onChanged();
          } else {
            replicatedDeduplicationWindowBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Number of blocks of hashes to keep in ZooKeeper.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
         */
        public Builder clearReplicatedDeduplicationWindow() {
          if (replicatedDeduplicationWindowBuilder_ == null) {
            replicatedDeduplicationWindow_ = null;
            onChanged();
          } else {
            replicatedDeduplicationWindow_ = null;
            replicatedDeduplicationWindowBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Number of blocks of hashes to keep in ZooKeeper.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
         */
        public com.google.protobuf.Int64Value.Builder getReplicatedDeduplicationWindowBuilder() {
          
          onChanged();
          return getReplicatedDeduplicationWindowFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Number of blocks of hashes to keep in ZooKeeper.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
         */
        public com.google.protobuf.Int64ValueOrBuilder getReplicatedDeduplicationWindowOrBuilder() {
          if (replicatedDeduplicationWindowBuilder_ != null) {
            return replicatedDeduplicationWindowBuilder_.getMessageOrBuilder();
          } else {
            return replicatedDeduplicationWindow_ == null ?
                com.google.protobuf.Int64Value.getDefaultInstance() : replicatedDeduplicationWindow_;
          }
        }
        /**
         * <pre>
         * Number of blocks of hashes to keep in ZooKeeper.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
            getReplicatedDeduplicationWindowFieldBuilder() {
          if (replicatedDeduplicationWindowBuilder_ == null) {
            replicatedDeduplicationWindowBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                    getReplicatedDeduplicationWindow(),
                    getParentForChildren(),
                    isClean());
            replicatedDeduplicationWindow_ = null;
          }
          return replicatedDeduplicationWindowBuilder_;
        }

        private com.google.protobuf.Int64Value replicatedDeduplicationWindowSeconds_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> replicatedDeduplicationWindowSecondsBuilder_;
        /**
         * <pre>
         * Period of time to keep blocks of hashes for.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
         */
        public boolean hasReplicatedDeduplicationWindowSeconds() {
          return replicatedDeduplicationWindowSecondsBuilder_ != null || replicatedDeduplicationWindowSeconds_ != null;
        }
        /**
         * <pre>
         * Period of time to keep blocks of hashes for.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
         */
        public com.google.protobuf.Int64Value getReplicatedDeduplicationWindowSeconds() {
          if (replicatedDeduplicationWindowSecondsBuilder_ == null) {
            return replicatedDeduplicationWindowSeconds_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : replicatedDeduplicationWindowSeconds_;
          } else {
            return replicatedDeduplicationWindowSecondsBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Period of time to keep blocks of hashes for.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
         */
        public Builder setReplicatedDeduplicationWindowSeconds(com.google.protobuf.Int64Value value) {
          if (replicatedDeduplicationWindowSecondsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            replicatedDeduplicationWindowSeconds_ = value;
            onChanged();
          } else {
            replicatedDeduplicationWindowSecondsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Period of time to keep blocks of hashes for.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
         */
        public Builder setReplicatedDeduplicationWindowSeconds(
            com.google.protobuf.Int64Value.Builder builderForValue) {
          if (replicatedDeduplicationWindowSecondsBuilder_ == null) {
            replicatedDeduplicationWindowSeconds_ = builderForValue.build();
            onChanged();
          } else {
            replicatedDeduplicationWindowSecondsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Period of time to keep blocks of hashes for.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
         */
        public Builder mergeReplicatedDeduplicationWindowSeconds(com.google.protobuf.Int64Value value) {
          if (replicatedDeduplicationWindowSecondsBuilder_ == null) {
            if (replicatedDeduplicationWindowSeconds_ != null) {
              replicatedDeduplicationWindowSeconds_ =
                com.google.protobuf.Int64Value.newBuilder(replicatedDeduplicationWindowSeconds_).mergeFrom(value).buildPartial();
            } else {
              replicatedDeduplicationWindowSeconds_ = value;
            }
            onChanged();
          } else {
            replicatedDeduplicationWindowSecondsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Period of time to keep blocks of hashes for.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
         */
        public Builder clearReplicatedDeduplicationWindowSeconds() {
          if (replicatedDeduplicationWindowSecondsBuilder_ == null) {
            replicatedDeduplicationWindowSeconds_ = null;
            onChanged();
          } else {
            replicatedDeduplicationWindowSeconds_ = null;
            replicatedDeduplicationWindowSecondsBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Period of time to keep blocks of hashes for.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
         */
        public com.google.protobuf.Int64Value.Builder getReplicatedDeduplicationWindowSecondsBuilder() {
          
          onChanged();
          return getReplicatedDeduplicationWindowSecondsFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Period of time to keep blocks of hashes for.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
         */
        public com.google.protobuf.Int64ValueOrBuilder getReplicatedDeduplicationWindowSecondsOrBuilder() {
          if (replicatedDeduplicationWindowSecondsBuilder_ != null) {
            return replicatedDeduplicationWindowSecondsBuilder_.getMessageOrBuilder();
          } else {
            return replicatedDeduplicationWindowSeconds_ == null ?
                com.google.protobuf.Int64Value.getDefaultInstance() : replicatedDeduplicationWindowSeconds_;
          }
        }
        /**
         * <pre>
         * Period of time to keep blocks of hashes for.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
            getReplicatedDeduplicationWindowSecondsFieldBuilder() {
          if (replicatedDeduplicationWindowSecondsBuilder_ == null) {
            replicatedDeduplicationWindowSecondsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                    getReplicatedDeduplicationWindowSeconds(),
                    getParentForChildren(),
                    isClean());
            replicatedDeduplicationWindowSeconds_ = null;
          }
          return replicatedDeduplicationWindowSecondsBuilder_;
        }

        private com.google.protobuf.Int64Value partsToDelayInsert_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> partsToDelayInsertBuilder_;
        /**
         * <pre>
         * If table contains at least that many active parts in single partition, artificially slow down insert into table.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
         */
        public boolean hasPartsToDelayInsert() {
          return partsToDelayInsertBuilder_ != null || partsToDelayInsert_ != null;
        }
        /**
         * <pre>
         * If table contains at least that many active parts in single partition, artificially slow down insert into table.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
         */
        public com.google.protobuf.Int64Value getPartsToDelayInsert() {
          if (partsToDelayInsertBuilder_ == null) {
            return partsToDelayInsert_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : partsToDelayInsert_;
          } else {
            return partsToDelayInsertBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * If table contains at least that many active parts in single partition, artificially slow down insert into table.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
         */
        public Builder setPartsToDelayInsert(com.google.protobuf.Int64Value value) {
          if (partsToDelayInsertBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            partsToDelayInsert_ = value;
            onChanged();
          } else {
            partsToDelayInsertBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * If table contains at least that many active parts in single partition, artificially slow down insert into table.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
         */
        public Builder setPartsToDelayInsert(
            com.google.protobuf.Int64Value.Builder builderForValue) {
          if (partsToDelayInsertBuilder_ == null) {
            partsToDelayInsert_ = builderForValue.build();
            onChanged();
          } else {
            partsToDelayInsertBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * If table contains at least that many active parts in single partition, artificially slow down insert into table.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
         */
        public Builder mergePartsToDelayInsert(com.google.protobuf.Int64Value value) {
          if (partsToDelayInsertBuilder_ == null) {
            if (partsToDelayInsert_ != null) {
              partsToDelayInsert_ =
                com.google.protobuf.Int64Value.newBuilder(partsToDelayInsert_).mergeFrom(value).buildPartial();
            } else {
              partsToDelayInsert_ = value;
            }
            onChanged();
          } else {
            partsToDelayInsertBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * If table contains at least that many active parts in single partition, artificially slow down insert into table.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
         */
        public Builder clearPartsToDelayInsert() {
          if (partsToDelayInsertBuilder_ == null) {
            partsToDelayInsert_ = null;
            onChanged();
          } else {
            partsToDelayInsert_ = null;
            partsToDelayInsertBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * If table contains at least that many active parts in single partition, artificially slow down insert into table.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
         */
        public com.google.protobuf.Int64Value.Builder getPartsToDelayInsertBuilder() {
          
          onChanged();
          return getPartsToDelayInsertFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * If table contains at least that many active parts in single partition, artificially slow down insert into table.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
         */
        public com.google.protobuf.Int64ValueOrBuilder getPartsToDelayInsertOrBuilder() {
          if (partsToDelayInsertBuilder_ != null) {
            return partsToDelayInsertBuilder_.getMessageOrBuilder();
          } else {
            return partsToDelayInsert_ == null ?
                com.google.protobuf.Int64Value.getDefaultInstance() : partsToDelayInsert_;
          }
        }
        /**
         * <pre>
         * If table contains at least that many active parts in single partition, artificially slow down insert into table.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_delay_insert = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
            getPartsToDelayInsertFieldBuilder() {
          if (partsToDelayInsertBuilder_ == null) {
            partsToDelayInsertBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                    getPartsToDelayInsert(),
                    getParentForChildren(),
                    isClean());
            partsToDelayInsert_ = null;
          }
          return partsToDelayInsertBuilder_;
        }

        private com.google.protobuf.Int64Value partsToThrowInsert_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> partsToThrowInsertBuilder_;
        /**
         * <pre>
         * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
         */
        public boolean hasPartsToThrowInsert() {
          return partsToThrowInsertBuilder_ != null || partsToThrowInsert_ != null;
        }
        /**
         * <pre>
         * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
         */
        public com.google.protobuf.Int64Value getPartsToThrowInsert() {
          if (partsToThrowInsertBuilder_ == null) {
            return partsToThrowInsert_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : partsToThrowInsert_;
          } else {
            return partsToThrowInsertBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
         */
        public Builder setPartsToThrowInsert(com.google.protobuf.Int64Value value) {
          if (partsToThrowInsertBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            partsToThrowInsert_ = value;
            onChanged();
          } else {
            partsToThrowInsertBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
         */
        public Builder setPartsToThrowInsert(
            com.google.protobuf.Int64Value.Builder builderForValue) {
          if (partsToThrowInsertBuilder_ == null) {
            partsToThrowInsert_ = builderForValue.build();
            onChanged();
          } else {
            partsToThrowInsertBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
         */
        public Builder mergePartsToThrowInsert(com.google.protobuf.Int64Value value) {
          if (partsToThrowInsertBuilder_ == null) {
            if (partsToThrowInsert_ != null) {
              partsToThrowInsert_ =
                com.google.protobuf.Int64Value.newBuilder(partsToThrowInsert_).mergeFrom(value).buildPartial();
            } else {
              partsToThrowInsert_ = value;
            }
            onChanged();
          } else {
            partsToThrowInsertBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
         */
        public Builder clearPartsToThrowInsert() {
          if (partsToThrowInsertBuilder_ == null) {
            partsToThrowInsert_ = null;
            onChanged();
          } else {
            partsToThrowInsert_ = null;
            partsToThrowInsertBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
         */
        public com.google.protobuf.Int64Value.Builder getPartsToThrowInsertBuilder() {
          
          onChanged();
          return getPartsToThrowInsertFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
         */
        public com.google.protobuf.Int64ValueOrBuilder getPartsToThrowInsertOrBuilder() {
          if (partsToThrowInsertBuilder_ != null) {
            return partsToThrowInsertBuilder_.getMessageOrBuilder();
          } else {
            return partsToThrowInsert_ == null ?
                com.google.protobuf.Int64Value.getDefaultInstance() : partsToThrowInsert_;
          }
        }
        /**
         * <pre>
         * If more than this number active parts in single partition, throw 'Too many parts ...' exception.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value parts_to_throw_insert = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
            getPartsToThrowInsertFieldBuilder() {
          if (partsToThrowInsertBuilder_ == null) {
            partsToThrowInsertBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                    getPartsToThrowInsert(),
                    getParentForChildren(),
                    isClean());
            partsToThrowInsert_ = null;
          }
          return partsToThrowInsertBuilder_;
        }

        private com.google.protobuf.Int64Value maxReplicatedMergesInQueue_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxReplicatedMergesInQueueBuilder_;
        /**
         * <pre>
         * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
         */
        public boolean hasMaxReplicatedMergesInQueue() {
          return maxReplicatedMergesInQueueBuilder_ != null || maxReplicatedMergesInQueue_ != null;
        }
        /**
         * <pre>
         * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
         */
        public com.google.protobuf.Int64Value getMaxReplicatedMergesInQueue() {
          if (maxReplicatedMergesInQueueBuilder_ == null) {
            return maxReplicatedMergesInQueue_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxReplicatedMergesInQueue_;
          } else {
            return maxReplicatedMergesInQueueBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
         */
        public Builder setMaxReplicatedMergesInQueue(com.google.protobuf.Int64Value value) {
          if (maxReplicatedMergesInQueueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            maxReplicatedMergesInQueue_ = value;
            onChanged();
          } else {
            maxReplicatedMergesInQueueBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
         */
        public Builder setMaxReplicatedMergesInQueue(
            com.google.protobuf.Int64Value.Builder builderForValue) {
          if (maxReplicatedMergesInQueueBuilder_ == null) {
            maxReplicatedMergesInQueue_ = builderForValue.build();
            onChanged();
          } else {
            maxReplicatedMergesInQueueBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
         */
        public Builder mergeMaxReplicatedMergesInQueue(com.google.protobuf.Int64Value value) {
          if (maxReplicatedMergesInQueueBuilder_ == null) {
            if (maxReplicatedMergesInQueue_ != null) {
              maxReplicatedMergesInQueue_ =
                com.google.protobuf.Int64Value.newBuilder(maxReplicatedMergesInQueue_).mergeFrom(value).buildPartial();
            } else {
              maxReplicatedMergesInQueue_ = value;
            }
            onChanged();
          } else {
            maxReplicatedMergesInQueueBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
         */
        public Builder clearMaxReplicatedMergesInQueue() {
          if (maxReplicatedMergesInQueueBuilder_ == null) {
            maxReplicatedMergesInQueue_ = null;
            onChanged();
          } else {
            maxReplicatedMergesInQueue_ = null;
            maxReplicatedMergesInQueueBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
         */
        public com.google.protobuf.Int64Value.Builder getMaxReplicatedMergesInQueueBuilder() {
          
          onChanged();
          return getMaxReplicatedMergesInQueueFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
         */
        public com.google.protobuf.Int64ValueOrBuilder getMaxReplicatedMergesInQueueOrBuilder() {
          if (maxReplicatedMergesInQueueBuilder_ != null) {
            return maxReplicatedMergesInQueueBuilder_.getMessageOrBuilder();
          } else {
            return maxReplicatedMergesInQueue_ == null ?
                com.google.protobuf.Int64Value.getDefaultInstance() : maxReplicatedMergesInQueue_;
          }
        }
        /**
         * <pre>
         * How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_replicated_merges_in_queue = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
            getMaxReplicatedMergesInQueueFieldBuilder() {
          if (maxReplicatedMergesInQueueBuilder_ == null) {
            maxReplicatedMergesInQueueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                    getMaxReplicatedMergesInQueue(),
                    getParentForChildren(),
                    isClean());
            maxReplicatedMergesInQueue_ = null;
          }
          return maxReplicatedMergesInQueueBuilder_;
        }

        private com.google.protobuf.Int64Value numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_;
        /**
         * <pre>
         * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
         * maximum size of merge to process.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
         */
        public boolean hasNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() {
          return numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ != null || numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ != null;
        }
        /**
         * <pre>
         * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
         * maximum size of merge to process.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
         */
        public com.google.protobuf.Int64Value getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() {
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ == null) {
            return numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_;
          } else {
            return numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
         * maximum size of merge to process.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
         */
        public Builder setNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge(com.google.protobuf.Int64Value value) {
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = value;
            onChanged();
          } else {
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
         * maximum size of merge to process.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
         */
        public Builder setNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge(
            com.google.protobuf.Int64Value.Builder builderForValue) {
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ == null) {
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = builderForValue.build();
            onChanged();
          } else {
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
         * maximum size of merge to process.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
         */
        public Builder mergeNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge(com.google.protobuf.Int64Value value) {
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ == null) {
            if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ != null) {
              numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ =
                com.google.protobuf.Int64Value.newBuilder(numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_).mergeFrom(value).buildPartial();
            } else {
              numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = value;
            }
            onChanged();
          } else {
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
         * maximum size of merge to process.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
         */
        public Builder clearNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() {
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ == null) {
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = null;
            onChanged();
          } else {
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = null;
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
         * maximum size of merge to process.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
         */
        public com.google.protobuf.Int64Value.Builder getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder() {
          
          onChanged();
          return getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMergeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
         * maximum size of merge to process.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
         */
        public com.google.protobuf.Int64ValueOrBuilder getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMergeOrBuilder() {
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ != null) {
            return numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_.getMessageOrBuilder();
          } else {
            return numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ == null ?
                com.google.protobuf.Int64Value.getDefaultInstance() : numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_;
          }
        }
        /**
         * <pre>
         * If there is less than specified number of free entries in background pool (or replicated queue), start to lower
         * maximum size of merge to process.
         * </pre>
         *
         * <code>.google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
            getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMergeFieldBuilder() {
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ == null) {
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                    getNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge(),
                    getParentForChildren(),
                    isClean());
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = null;
          }
          return numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeBuilder_;
        }

        private com.google.protobuf.Int64Value maxBytesToMergeAtMinSpaceInPool_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxBytesToMergeAtMinSpaceInPoolBuilder_;
        /**
         * <pre>
         * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
         * in replication queue).
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
         */
        public boolean hasMaxBytesToMergeAtMinSpaceInPool() {
          return maxBytesToMergeAtMinSpaceInPoolBuilder_ != null || maxBytesToMergeAtMinSpaceInPool_ != null;
        }
        /**
         * <pre>
         * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
         * in replication queue).
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
         */
        public com.google.protobuf.Int64Value getMaxBytesToMergeAtMinSpaceInPool() {
          if (maxBytesToMergeAtMinSpaceInPoolBuilder_ == null) {
            return maxBytesToMergeAtMinSpaceInPool_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToMergeAtMinSpaceInPool_;
          } else {
            return maxBytesToMergeAtMinSpaceInPoolBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
         * in replication queue).
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
         */
        public Builder setMaxBytesToMergeAtMinSpaceInPool(com.google.protobuf.Int64Value value) {
          if (maxBytesToMergeAtMinSpaceInPoolBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            maxBytesToMergeAtMinSpaceInPool_ = value;
            onChanged();
          } else {
            maxBytesToMergeAtMinSpaceInPoolBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
         * in replication queue).
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
         */
        public Builder setMaxBytesToMergeAtMinSpaceInPool(
            com.google.protobuf.Int64Value.Builder builderForValue) {
          if (maxBytesToMergeAtMinSpaceInPoolBuilder_ == null) {
            maxBytesToMergeAtMinSpaceInPool_ = builderForValue.build();
            onChanged();
          } else {
            maxBytesToMergeAtMinSpaceInPoolBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
         * in replication queue).
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
         */
        public Builder mergeMaxBytesToMergeAtMinSpaceInPool(com.google.protobuf.Int64Value value) {
          if (maxBytesToMergeAtMinSpaceInPoolBuilder_ == null) {
            if (maxBytesToMergeAtMinSpaceInPool_ != null) {
              maxBytesToMergeAtMinSpaceInPool_ =
                com.google.protobuf.Int64Value.newBuilder(maxBytesToMergeAtMinSpaceInPool_).mergeFrom(value).buildPartial();
            } else {
              maxBytesToMergeAtMinSpaceInPool_ = value;
            }
            onChanged();
          } else {
            maxBytesToMergeAtMinSpaceInPoolBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
         * in replication queue).
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
         */
        public Builder clearMaxBytesToMergeAtMinSpaceInPool() {
          if (maxBytesToMergeAtMinSpaceInPoolBuilder_ == null) {
            maxBytesToMergeAtMinSpaceInPool_ = null;
            onChanged();
          } else {
            maxBytesToMergeAtMinSpaceInPool_ = null;
            maxBytesToMergeAtMinSpaceInPoolBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
         * in replication queue).
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
         */
        public com.google.protobuf.Int64Value.Builder getMaxBytesToMergeAtMinSpaceInPoolBuilder() {
          
          onChanged();
          return getMaxBytesToMergeAtMinSpaceInPoolFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
         * in replication queue).
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
         */
        public com.google.protobuf.Int64ValueOrBuilder getMaxBytesToMergeAtMinSpaceInPoolOrBuilder() {
          if (maxBytesToMergeAtMinSpaceInPoolBuilder_ != null) {
            return maxBytesToMergeAtMinSpaceInPoolBuilder_.getMessageOrBuilder();
          } else {
            return maxBytesToMergeAtMinSpaceInPool_ == null ?
                com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToMergeAtMinSpaceInPool_;
          }
        }
        /**
         * <pre>
         * Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
         * in replication queue).
         * </pre>
         *
         * <code>.google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
            getMaxBytesToMergeAtMinSpaceInPoolFieldBuilder() {
          if (maxBytesToMergeAtMinSpaceInPoolBuilder_ == null) {
            maxBytesToMergeAtMinSpaceInPoolBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                    getMaxBytesToMergeAtMinSpaceInPool(),
                    getParentForChildren(),
                    isClean());
            maxBytesToMergeAtMinSpaceInPool_ = null;
          }
          return maxBytesToMergeAtMinSpaceInPoolBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree)
      }

      // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree)
      private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree();
      }

      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<MergeTree>
          PARSER = new com.google.protobuf.AbstractParser<MergeTree>() {
        @java.lang.Override
        public MergeTree parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new MergeTree(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<MergeTree> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<MergeTree> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface CompressionOrBuilder extends
        // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method method = 1;</code>
       */
      int getMethodValue();
      /**
       * <pre>
       * Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method method = 1;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method getMethod();

      /**
       * <pre>
       * Minimum size of a part of a table.
       * </pre>
       *
       * <code>int64 min_part_size = 2 [(.yandex.cloud.value) = "&gt;=1"];</code>
       */
      long getMinPartSize();

      /**
       * <pre>
       * Minimum ratio of a part relative to the size of all the data in the table.
       * </pre>
       *
       * <code>double min_part_size_ratio = 3;</code>
       */
      double getMinPartSizeRatio();
    }
    /**
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression}
     */
    public  static final class Compression extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression)
        CompressionOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Compression.newBuilder() to construct.
      private Compression(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Compression() {
        method_ = 0;
        minPartSize_ = 0L;
        minPartSizeRatio_ = 0D;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Compression(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int rawValue = input.readEnum();

                method_ = rawValue;
                break;
              }
              case 16: {

                minPartSize_ = input.readInt64();
                break;
              }
              case 25: {

                minPartSizeRatio_ = input.readDouble();
                break;
              }
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_Compression_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_Compression_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder.class);
      }

      /**
       * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method}
       */
      public enum Method
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>METHOD_UNSPECIFIED = 0;</code>
         */
        METHOD_UNSPECIFIED(0),
        /**
         * <pre>
         * [LZ4 compression algorithm](https://lz4.github.io/lz4/).
         * </pre>
         *
         * <code>LZ4 = 1;</code>
         */
        LZ4(1),
        /**
         * <pre>
         * [Zstandard compression algorithm](https://facebook.github.io/zstd/).
         * </pre>
         *
         * <code>ZSTD = 2;</code>
         */
        ZSTD(2),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>METHOD_UNSPECIFIED = 0;</code>
         */
        public static final int METHOD_UNSPECIFIED_VALUE = 0;
        /**
         * <pre>
         * [LZ4 compression algorithm](https://lz4.github.io/lz4/).
         * </pre>
         *
         * <code>LZ4 = 1;</code>
         */
        public static final int LZ4_VALUE = 1;
        /**
         * <pre>
         * [Zstandard compression algorithm](https://facebook.github.io/zstd/).
         * </pre>
         *
         * <code>ZSTD = 2;</code>
         */
        public static final int ZSTD_VALUE = 2;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Method valueOf(int value) {
          return forNumber(value);
        }

        public static Method forNumber(int value) {
          switch (value) {
            case 0: return METHOD_UNSPECIFIED;
            case 1: return LZ4;
            case 2: return ZSTD;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Method>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Method> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Method>() {
                public Method findValueByNumber(int number) {
                  return Method.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.getDescriptor().getEnumTypes().get(0);
        }

        private static final Method[] VALUES = values();

        public static Method valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Method(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method)
      }

      public static final int METHOD_FIELD_NUMBER = 1;
      private int method_;
      /**
       * <pre>
       * Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method method = 1;</code>
       */
      public int getMethodValue() {
        return method_;
      }
      /**
       * <pre>
       * Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method method = 1;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method getMethod() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method result = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method.valueOf(method_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method.UNRECOGNIZED : result;
      }

      public static final int MIN_PART_SIZE_FIELD_NUMBER = 2;
      private long minPartSize_;
      /**
       * <pre>
       * Minimum size of a part of a table.
       * </pre>
       *
       * <code>int64 min_part_size = 2 [(.yandex.cloud.value) = "&gt;=1"];</code>
       */
      public long getMinPartSize() {
        return minPartSize_;
      }

      public static final int MIN_PART_SIZE_RATIO_FIELD_NUMBER = 3;
      private double minPartSizeRatio_;
      /**
       * <pre>
       * Minimum ratio of a part relative to the size of all the data in the table.
       * </pre>
       *
       * <code>double min_part_size_ratio = 3;</code>
       */
      public double getMinPartSizeRatio() {
        return minPartSizeRatio_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (method_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method.METHOD_UNSPECIFIED.getNumber()) {
          output.writeEnum(1, method_);
        }
        if (minPartSize_ != 0L) {
          output.writeInt64(2, minPartSize_);
        }
        if (minPartSizeRatio_ != 0D) {
          output.writeDouble(3, minPartSizeRatio_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (method_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method.METHOD_UNSPECIFIED.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, method_);
        }
        if (minPartSize_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, minPartSize_);
        }
        if (minPartSizeRatio_ != 0D) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, minPartSizeRatio_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression)) {
          return super.equals(obj);
        }
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression) obj;

        boolean result = true;
        result = result && method_ == other.method_;
        result = result && (getMinPartSize()
            == other.getMinPartSize());
        result = result && (
            java.lang.Double.doubleToLongBits(getMinPartSizeRatio())
            == java.lang.Double.doubleToLongBits(
                other.getMinPartSizeRatio()));
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + METHOD_FIELD_NUMBER;
        hash = (53 * hash) + method_;
        hash = (37 * hash) + MIN_PART_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getMinPartSize());
        hash = (37 * hash) + MIN_PART_SIZE_RATIO_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getMinPartSizeRatio()));
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression)
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.CompressionOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_Compression_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_Compression_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder.class);
        }

        // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          method_ = 0;

          minPartSize_ = 0L;

          minPartSizeRatio_ = 0D;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_Compression_descriptor;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression getDefaultInstanceForType() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.getDefaultInstance();
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression build() {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression buildPartial() {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression(this);
          result.method_ = method_;
          result.minPartSize_ = minPartSize_;
          result.minPartSizeRatio_ = minPartSizeRatio_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return (Builder) super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression) {
            return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression other) {
          if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.getDefaultInstance()) return this;
          if (other.method_ != 0) {
            setMethodValue(other.getMethodValue());
          }
          if (other.getMinPartSize() != 0L) {
            setMinPartSize(other.getMinPartSize());
          }
          if (other.getMinPartSizeRatio() != 0D) {
            setMinPartSizeRatio(other.getMinPartSizeRatio());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int method_ = 0;
        /**
         * <pre>
         * Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method method = 1;</code>
         */
        public int getMethodValue() {
          return method_;
        }
        /**
         * <pre>
         * Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method method = 1;</code>
         */
        public Builder setMethodValue(int value) {
          method_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method method = 1;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method getMethod() {
          @SuppressWarnings("deprecation")
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method result = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method.valueOf(method_);
          return result == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method.UNRECOGNIZED : result;
        }
        /**
         * <pre>
         * Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method method = 1;</code>
         */
        public Builder setMethod(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Method value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          method_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method method = 1;</code>
         */
        public Builder clearMethod() {
          
          method_ = 0;
          onChanged();
          return this;
        }

        private long minPartSize_ ;
        /**
         * <pre>
         * Minimum size of a part of a table.
         * </pre>
         *
         * <code>int64 min_part_size = 2 [(.yandex.cloud.value) = "&gt;=1"];</code>
         */
        public long getMinPartSize() {
          return minPartSize_;
        }
        /**
         * <pre>
         * Minimum size of a part of a table.
         * </pre>
         *
         * <code>int64 min_part_size = 2 [(.yandex.cloud.value) = "&gt;=1"];</code>
         */
        public Builder setMinPartSize(long value) {
          
          minPartSize_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Minimum size of a part of a table.
         * </pre>
         *
         * <code>int64 min_part_size = 2 [(.yandex.cloud.value) = "&gt;=1"];</code>
         */
        public Builder clearMinPartSize() {
          
          minPartSize_ = 0L;
          onChanged();
          return this;
        }

        private double minPartSizeRatio_ ;
        /**
         * <pre>
         * Minimum ratio of a part relative to the size of all the data in the table.
         * </pre>
         *
         * <code>double min_part_size_ratio = 3;</code>
         */
        public double getMinPartSizeRatio() {
          return minPartSizeRatio_;
        }
        /**
         * <pre>
         * Minimum ratio of a part relative to the size of all the data in the table.
         * </pre>
         *
         * <code>double min_part_size_ratio = 3;</code>
         */
        public Builder setMinPartSizeRatio(double value) {
          
          minPartSizeRatio_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Minimum ratio of a part relative to the size of all the data in the table.
         * </pre>
         *
         * <code>double min_part_size_ratio = 3;</code>
         */
        public Builder clearMinPartSizeRatio() {
          
          minPartSizeRatio_ = 0D;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression)
      }

      // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression)
      private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression();
      }

      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Compression>
          PARSER = new com.google.protobuf.AbstractParser<Compression>() {
        @java.lang.Override
        public Compression parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Compression(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Compression> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Compression> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ExternalDictionaryOrBuilder extends
        // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Name of the external dictionary.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
       */
      java.lang.String getName();
      /**
       * <pre>
       * Name of the external dictionary.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       * Set of attributes for the external dictionary.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
       */
      boolean hasStructure();
      /**
       * <pre>
       * Set of attributes for the external dictionary.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure getStructure();
      /**
       * <pre>
       * Set of attributes for the external dictionary.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.StructureOrBuilder getStructureOrBuilder();

      /**
       * <pre>
       * Layout for storing the dictionary in memory.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
       */
      boolean hasLayout();
      /**
       * <pre>
       * Layout for storing the dictionary in memory.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout getLayout();
      /**
       * <pre>
       * Layout for storing the dictionary in memory.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.LayoutOrBuilder getLayoutOrBuilder();

      /**
       * <pre>
       * Fixed interval between dictionary updates.
       * </pre>
       *
       * <code>int64 fixed_lifetime = 4;</code>
       */
      long getFixedLifetime();

      /**
       * <pre>
       * Range of intervals between dictionary updates for ClickHouse to choose from.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
       */
      boolean hasLifetimeRange();
      /**
       * <pre>
       * Range of intervals between dictionary updates for ClickHouse to choose from.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range getLifetimeRange();
      /**
       * <pre>
       * Range of intervals between dictionary updates for ClickHouse to choose from.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.RangeOrBuilder getLifetimeRangeOrBuilder();

      /**
       * <pre>
       * HTTP source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
       */
      boolean hasHttpSource();
      /**
       * <pre>
       * HTTP source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource getHttpSource();
      /**
       * <pre>
       * HTTP source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSourceOrBuilder getHttpSourceOrBuilder();

      /**
       * <pre>
       * MySQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
       */
      boolean hasMysqlSource();
      /**
       * <pre>
       * MySQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource getMysqlSource();
      /**
       * <pre>
       * MySQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSourceOrBuilder getMysqlSourceOrBuilder();

      /**
       * <pre>
       * ClickHouse source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
       */
      boolean hasClickhouseSource();
      /**
       * <pre>
       * ClickHouse source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource getClickhouseSource();
      /**
       * <pre>
       * ClickHouse source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSourceOrBuilder getClickhouseSourceOrBuilder();

      /**
       * <pre>
       * MongoDB source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
       */
      boolean hasMongodbSource();
      /**
       * <pre>
       * MongoDB source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource getMongodbSource();
      /**
       * <pre>
       * MongoDB source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSourceOrBuilder getMongodbSourceOrBuilder();

      /**
       * <pre>
       * PostgreSQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
       */
      boolean hasPostgresqlSource();
      /**
       * <pre>
       * PostgreSQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource getPostgresqlSource();
      /**
       * <pre>
       * PostgreSQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSourceOrBuilder getPostgresqlSourceOrBuilder();

      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.LifetimeCase getLifetimeCase();

      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.SourceCase getSourceCase();
    }
    /**
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary}
     */
    public  static final class ExternalDictionary extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary)
        ExternalDictionaryOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ExternalDictionary.newBuilder() to construct.
      private ExternalDictionary(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ExternalDictionary() {
        name_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ExternalDictionary(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                name_ = s;
                break;
              }
              case 18: {
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Builder subBuilder = null;
                if (structure_ != null) {
                  subBuilder = structure_.toBuilder();
                }
                structure_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(structure_);
                  structure_ = subBuilder.buildPartial();
                }

                break;
              }
              case 26: {
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Builder subBuilder = null;
                if (layout_ != null) {
                  subBuilder = layout_.toBuilder();
                }
                layout_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(layout_);
                  layout_ = subBuilder.buildPartial();
                }

                break;
              }
              case 32: {
                lifetimeCase_ = 4;
                lifetime_ = input.readInt64();
                break;
              }
              case 42: {
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.Builder subBuilder = null;
                if (lifetimeCase_ == 5) {
                  subBuilder = ((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) lifetime_).toBuilder();
                }
                lifetime_ =
                    input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) lifetime_);
                  lifetime_ = subBuilder.buildPartial();
                }
                lifetimeCase_ = 5;
                break;
              }
              case 50: {
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.Builder subBuilder = null;
                if (sourceCase_ == 6) {
                  subBuilder = ((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) source_).toBuilder();
                }
                source_ =
                    input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) source_);
                  source_ = subBuilder.buildPartial();
                }
                sourceCase_ = 6;
                break;
              }
              case 58: {
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Builder subBuilder = null;
                if (sourceCase_ == 7) {
                  subBuilder = ((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) source_).toBuilder();
                }
                source_ =
                    input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) source_);
                  source_ = subBuilder.buildPartial();
                }
                sourceCase_ = 7;
                break;
              }
              case 66: {
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.Builder subBuilder = null;
                if (sourceCase_ == 8) {
                  subBuilder = ((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) source_).toBuilder();
                }
                source_ =
                    input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) source_);
                  source_ = subBuilder.buildPartial();
                }
                sourceCase_ = 8;
                break;
              }
              case 74: {
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.Builder subBuilder = null;
                if (sourceCase_ == 9) {
                  subBuilder = ((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) source_).toBuilder();
                }
                source_ =
                    input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) source_);
                  source_ = subBuilder.buildPartial();
                }
                sourceCase_ = 9;
                break;
              }
              case 82: {
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.Builder subBuilder = null;
                if (sourceCase_ == 10) {
                  subBuilder = ((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) source_).toBuilder();
                }
                source_ =
                    input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) source_);
                  source_ = subBuilder.buildPartial();
                }
                sourceCase_ = 10;
                break;
              }
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder.class);
      }

      public interface HttpSourceOrBuilder extends
          // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * URL of the source dictionary available over HTTP.
         * </pre>
         *
         * <code>string url = 1 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getUrl();
        /**
         * <pre>
         * URL of the source dictionary available over HTTP.
         * </pre>
         *
         * <code>string url = 1 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getUrlBytes();

        /**
         * <pre>
         * The data format. Valid values are all formats supported by ClickHouse SQL dialect.
         * </pre>
         *
         * <code>string format = 2 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getFormat();
        /**
         * <pre>
         * The data format. Valid values are all formats supported by ClickHouse SQL dialect.
         * </pre>
         *
         * <code>string format = 2 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getFormatBytes();
      }
      /**
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource}
       */
      public  static final class HttpSource extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource)
          HttpSourceOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use HttpSource.newBuilder() to construct.
        private HttpSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private HttpSource() {
          url_ = "";
          format_ = "";
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private HttpSource(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  java.lang.String s = input.readStringRequireUtf8();

                  url_ = s;
                  break;
                }
                case 18: {
                  java.lang.String s = input.readStringRequireUtf8();

                  format_ = s;
                  break;
                }
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_HttpSource_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_HttpSource_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.Builder.class);
        }

        public static final int URL_FIELD_NUMBER = 1;
        private volatile java.lang.Object url_;
        /**
         * <pre>
         * URL of the source dictionary available over HTTP.
         * </pre>
         *
         * <code>string url = 1 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getUrl() {
          java.lang.Object ref = url_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            url_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * URL of the source dictionary available over HTTP.
         * </pre>
         *
         * <code>string url = 1 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getUrlBytes() {
          java.lang.Object ref = url_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            url_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int FORMAT_FIELD_NUMBER = 2;
        private volatile java.lang.Object format_;
        /**
         * <pre>
         * The data format. Valid values are all formats supported by ClickHouse SQL dialect.
         * </pre>
         *
         * <code>string format = 2 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getFormat() {
          java.lang.Object ref = format_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            format_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * The data format. Valid values are all formats supported by ClickHouse SQL dialect.
         * </pre>
         *
         * <code>string format = 2 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getFormatBytes() {
          java.lang.Object ref = format_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            format_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!getUrlBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, url_);
          }
          if (!getFormatBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, format_);
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!getUrlBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, url_);
          }
          if (!getFormatBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, format_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource)) {
            return super.equals(obj);
          }
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) obj;

          boolean result = true;
          result = result && getUrl()
              .equals(other.getUrl());
          result = result && getFormat()
              .equals(other.getFormat());
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + URL_FIELD_NUMBER;
          hash = (53 * hash) + getUrl().hashCode();
          hash = (37 * hash) + FORMAT_FIELD_NUMBER;
          hash = (53 * hash) + getFormat().hashCode();
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource)
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSourceOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_HttpSource_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_HttpSource_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.Builder.class);
          }

          // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            url_ = "";

            format_ = "";

            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_HttpSource_descriptor;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource getDefaultInstanceForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.getDefaultInstance();
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource build() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource buildPartial() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource(this);
            result.url_ = url_;
            result.format_ = format_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return (Builder) super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) {
              return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource other) {
            if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.getDefaultInstance()) return this;
            if (!other.getUrl().isEmpty()) {
              url_ = other.url_;
              onChanged();
            }
            if (!other.getFormat().isEmpty()) {
              format_ = other.format_;
              onChanged();
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private java.lang.Object url_ = "";
          /**
           * <pre>
           * URL of the source dictionary available over HTTP.
           * </pre>
           *
           * <code>string url = 1 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getUrl() {
            java.lang.Object ref = url_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              url_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * URL of the source dictionary available over HTTP.
           * </pre>
           *
           * <code>string url = 1 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getUrlBytes() {
            java.lang.Object ref = url_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              url_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * URL of the source dictionary available over HTTP.
           * </pre>
           *
           * <code>string url = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setUrl(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            url_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * URL of the source dictionary available over HTTP.
           * </pre>
           *
           * <code>string url = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearUrl() {
            
            url_ = getDefaultInstance().getUrl();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * URL of the source dictionary available over HTTP.
           * </pre>
           *
           * <code>string url = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setUrlBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            url_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object format_ = "";
          /**
           * <pre>
           * The data format. Valid values are all formats supported by ClickHouse SQL dialect.
           * </pre>
           *
           * <code>string format = 2 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getFormat() {
            java.lang.Object ref = format_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              format_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * The data format. Valid values are all formats supported by ClickHouse SQL dialect.
           * </pre>
           *
           * <code>string format = 2 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getFormatBytes() {
            java.lang.Object ref = format_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              format_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * The data format. Valid values are all formats supported by ClickHouse SQL dialect.
           * </pre>
           *
           * <code>string format = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setFormat(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            format_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * The data format. Valid values are all formats supported by ClickHouse SQL dialect.
           * </pre>
           *
           * <code>string format = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearFormat() {
            
            format_ = getDefaultInstance().getFormat();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * The data format. Valid values are all formats supported by ClickHouse SQL dialect.
           * </pre>
           *
           * <code>string format = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setFormatBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            format_ = value;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource)
        }

        // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource)
        private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource();
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<HttpSource>
            PARSER = new com.google.protobuf.AbstractParser<HttpSource>() {
          @java.lang.Override
          public HttpSource parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new HttpSource(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<HttpSource> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<HttpSource> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface MysqlSourceOrBuilder extends
          // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Name of the MySQL database to connect to.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getDb();
        /**
         * <pre>
         * Name of the MySQL database to connect to.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getDbBytes();

        /**
         * <pre>
         * Name of the database table to use as a ClickHouse dictionary.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getTable();
        /**
         * <pre>
         * Name of the database table to use as a ClickHouse dictionary.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getTableBytes();

        /**
         * <pre>
         * Default port to use when connecting to a replica of the dictionary source.
         * </pre>
         *
         * <code>int64 port = 3 [(.yandex.cloud.value) = "0-65535"];</code>
         */
        long getPort();

        /**
         * <pre>
         * Name of the default user for replicas of the dictionary source.
         * </pre>
         *
         * <code>string user = 4;</code>
         */
        java.lang.String getUser();
        /**
         * <pre>
         * Name of the default user for replicas of the dictionary source.
         * </pre>
         *
         * <code>string user = 4;</code>
         */
        com.google.protobuf.ByteString
            getUserBytes();

        /**
         * <pre>
         * Password of the default user for replicas of the dictionary source.
         * </pre>
         *
         * <code>string password = 5;</code>
         */
        java.lang.String getPassword();
        /**
         * <pre>
         * Password of the default user for replicas of the dictionary source.
         * </pre>
         *
         * <code>string password = 5;</code>
         */
        com.google.protobuf.ByteString
            getPasswordBytes();

        /**
         * <pre>
         * List of MySQL replicas of the database used as dictionary source.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica> 
            getReplicasList();
        /**
         * <pre>
         * List of MySQL replicas of the database used as dictionary source.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica getReplicas(int index);
        /**
         * <pre>
         * List of MySQL replicas of the database used as dictionary source.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        int getReplicasCount();
        /**
         * <pre>
         * List of MySQL replicas of the database used as dictionary source.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaOrBuilder> 
            getReplicasOrBuilderList();
        /**
         * <pre>
         * List of MySQL replicas of the database used as dictionary source.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaOrBuilder getReplicasOrBuilder(
            int index);

        /**
         * <pre>
         * Selection criteria for the data in the specified MySQL table.
         * </pre>
         *
         * <code>string where = 7;</code>
         */
        java.lang.String getWhere();
        /**
         * <pre>
         * Selection criteria for the data in the specified MySQL table.
         * </pre>
         *
         * <code>string where = 7;</code>
         */
        com.google.protobuf.ByteString
            getWhereBytes();

        /**
         * <pre>
         * Query for checking the dictionary status, to pull only updated data.
         * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
         * </pre>
         *
         * <code>string invalidate_query = 8;</code>
         */
        java.lang.String getInvalidateQuery();
        /**
         * <pre>
         * Query for checking the dictionary status, to pull only updated data.
         * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
         * </pre>
         *
         * <code>string invalidate_query = 8;</code>
         */
        com.google.protobuf.ByteString
            getInvalidateQueryBytes();
      }
      /**
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource}
       */
      public  static final class MysqlSource extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource)
          MysqlSourceOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use MysqlSource.newBuilder() to construct.
        private MysqlSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private MysqlSource() {
          db_ = "";
          table_ = "";
          port_ = 0L;
          user_ = "";
          password_ = "";
          replicas_ = java.util.Collections.emptyList();
          where_ = "";
          invalidateQuery_ = "";
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private MysqlSource(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  java.lang.String s = input.readStringRequireUtf8();

                  db_ = s;
                  break;
                }
                case 18: {
                  java.lang.String s = input.readStringRequireUtf8();

                  table_ = s;
                  break;
                }
                case 24: {

                  port_ = input.readInt64();
                  break;
                }
                case 34: {
                  java.lang.String s = input.readStringRequireUtf8();

                  user_ = s;
                  break;
                }
                case 42: {
                  java.lang.String s = input.readStringRequireUtf8();

                  password_ = s;
                  break;
                }
                case 50: {
                  if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                    replicas_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica>();
                    mutable_bitField0_ |= 0x00000020;
                  }
                  replicas_.add(
                      input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.parser(), extensionRegistry));
                  break;
                }
                case 58: {
                  java.lang.String s = input.readStringRequireUtf8();

                  where_ = s;
                  break;
                }
                case 66: {
                  java.lang.String s = input.readStringRequireUtf8();

                  invalidateQuery_ = s;
                  break;
                }
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
              replicas_ = java.util.Collections.unmodifiableList(replicas_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Builder.class);
        }

        public interface ReplicaOrBuilder extends
            // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica)
            com.google.protobuf.MessageOrBuilder {

          /**
           * <pre>
           * MySQL host of the replica.
           * </pre>
           *
           * <code>string host = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          java.lang.String getHost();
          /**
           * <pre>
           * MySQL host of the replica.
           * </pre>
           *
           * <code>string host = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          com.google.protobuf.ByteString
              getHostBytes();

          /**
           * <pre>
           * The priority of the replica that ClickHouse takes into account when connecting.
           * Replica with the highest priority should have this field set to the lowest number.
           * </pre>
           *
           * <code>int64 priority = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.value) = "&gt;0"];</code>
           */
          long getPriority();

          /**
           * <pre>
           * Port to use when connecting to the replica.
           * If a port is not specified for a replica, ClickHouse uses the port specified for the source.
           * </pre>
           *
           * <code>int64 port = 3 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          long getPort();

          /**
           * <pre>
           * Name of the MySQL database user.
           * </pre>
           *
           * <code>string user = 4;</code>
           */
          java.lang.String getUser();
          /**
           * <pre>
           * Name of the MySQL database user.
           * </pre>
           *
           * <code>string user = 4;</code>
           */
          com.google.protobuf.ByteString
              getUserBytes();

          /**
           * <pre>
           * Password of the MySQL database user.
           * </pre>
           *
           * <code>string password = 5;</code>
           */
          java.lang.String getPassword();
          /**
           * <pre>
           * Password of the MySQL database user.
           * </pre>
           *
           * <code>string password = 5;</code>
           */
          com.google.protobuf.ByteString
              getPasswordBytes();
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica}
         */
        public  static final class Replica extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica)
            ReplicaOrBuilder {
        private static final long serialVersionUID = 0L;
          // Use Replica.newBuilder() to construct.
          private Replica(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
          }
          private Replica() {
            host_ = "";
            priority_ = 0L;
            port_ = 0L;
            user_ = "";
            password_ = "";
          }

          @java.lang.Override
          public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
            return this.unknownFields;
          }
          private Replica(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    java.lang.String s = input.readStringRequireUtf8();

                    host_ = s;
                    break;
                  }
                  case 16: {

                    priority_ = input.readInt64();
                    break;
                  }
                  case 24: {

                    port_ = input.readInt64();
                    break;
                  }
                  case 34: {
                    java.lang.String s = input.readStringRequireUtf8();

                    user_ = s;
                    break;
                  }
                  case 42: {
                    java.lang.String s = input.readStringRequireUtf8();

                    password_ = s;
                    break;
                  }
                  default: {
                    if (!parseUnknownFieldProto3(
                        input, unknownFields, extensionRegistry, tag)) {
                      done = true;
                    }
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(
                  e).setUnfinishedMessage(this);
            } finally {
              this.unknownFields = unknownFields.build();
              makeExtensionsImmutable();
            }
          }
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder.class);
          }

          public static final int HOST_FIELD_NUMBER = 1;
          private volatile java.lang.Object host_;
          /**
           * <pre>
           * MySQL host of the replica.
           * </pre>
           *
           * <code>string host = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public java.lang.String getHost() {
            java.lang.Object ref = host_;
            if (ref instanceof java.lang.String) {
              return (java.lang.String) ref;
            } else {
              com.google.protobuf.ByteString bs = 
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              host_ = s;
              return s;
            }
          }
          /**
           * <pre>
           * MySQL host of the replica.
           * </pre>
           *
           * <code>string host = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public com.google.protobuf.ByteString
              getHostBytes() {
            java.lang.Object ref = host_;
            if (ref instanceof java.lang.String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              host_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }

          public static final int PRIORITY_FIELD_NUMBER = 2;
          private long priority_;
          /**
           * <pre>
           * The priority of the replica that ClickHouse takes into account when connecting.
           * Replica with the highest priority should have this field set to the lowest number.
           * </pre>
           *
           * <code>int64 priority = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.value) = "&gt;0"];</code>
           */
          public long getPriority() {
            return priority_;
          }

          public static final int PORT_FIELD_NUMBER = 3;
          private long port_;
          /**
           * <pre>
           * Port to use when connecting to the replica.
           * If a port is not specified for a replica, ClickHouse uses the port specified for the source.
           * </pre>
           *
           * <code>int64 port = 3 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public long getPort() {
            return port_;
          }

          public static final int USER_FIELD_NUMBER = 4;
          private volatile java.lang.Object user_;
          /**
           * <pre>
           * Name of the MySQL database user.
           * </pre>
           *
           * <code>string user = 4;</code>
           */
          public java.lang.String getUser() {
            java.lang.Object ref = user_;
            if (ref instanceof java.lang.String) {
              return (java.lang.String) ref;
            } else {
              com.google.protobuf.ByteString bs = 
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              user_ = s;
              return s;
            }
          }
          /**
           * <pre>
           * Name of the MySQL database user.
           * </pre>
           *
           * <code>string user = 4;</code>
           */
          public com.google.protobuf.ByteString
              getUserBytes() {
            java.lang.Object ref = user_;
            if (ref instanceof java.lang.String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              user_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }

          public static final int PASSWORD_FIELD_NUMBER = 5;
          private volatile java.lang.Object password_;
          /**
           * <pre>
           * Password of the MySQL database user.
           * </pre>
           *
           * <code>string password = 5;</code>
           */
          public java.lang.String getPassword() {
            java.lang.Object ref = password_;
            if (ref instanceof java.lang.String) {
              return (java.lang.String) ref;
            } else {
              com.google.protobuf.ByteString bs = 
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              password_ = s;
              return s;
            }
          }
          /**
           * <pre>
           * Password of the MySQL database user.
           * </pre>
           *
           * <code>string password = 5;</code>
           */
          public com.google.protobuf.ByteString
              getPasswordBytes() {
            java.lang.Object ref = password_;
            if (ref instanceof java.lang.String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              password_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }

          private byte memoizedIsInitialized = -1;
          @java.lang.Override
          public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
          }

          @java.lang.Override
          public void writeTo(com.google.protobuf.CodedOutputStream output)
                              throws java.io.IOException {
            if (!getHostBytes().isEmpty()) {
              com.google.protobuf.GeneratedMessageV3.writeString(output, 1, host_);
            }
            if (priority_ != 0L) {
              output.writeInt64(2, priority_);
            }
            if (port_ != 0L) {
              output.writeInt64(3, port_);
            }
            if (!getUserBytes().isEmpty()) {
              com.google.protobuf.GeneratedMessageV3.writeString(output, 4, user_);
            }
            if (!getPasswordBytes().isEmpty()) {
              com.google.protobuf.GeneratedMessageV3.writeString(output, 5, password_);
            }
            unknownFields.writeTo(output);
          }

          @java.lang.Override
          public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getHostBytes().isEmpty()) {
              size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, host_);
            }
            if (priority_ != 0L) {
              size += com.google.protobuf.CodedOutputStream
                .computeInt64Size(2, priority_);
            }
            if (port_ != 0L) {
              size += com.google.protobuf.CodedOutputStream
                .computeInt64Size(3, port_);
            }
            if (!getUserBytes().isEmpty()) {
              size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, user_);
            }
            if (!getPasswordBytes().isEmpty()) {
              size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, password_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
          }

          @java.lang.Override
          public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
             return true;
            }
            if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica)) {
              return super.equals(obj);
            }
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica) obj;

            boolean result = true;
            result = result && getHost()
                .equals(other.getHost());
            result = result && (getPriority()
                == other.getPriority());
            result = result && (getPort()
                == other.getPort());
            result = result && getUser()
                .equals(other.getUser());
            result = result && getPassword()
                .equals(other.getPassword());
            result = result && unknownFields.equals(other.unknownFields);
            return result;
          }

          @java.lang.Override
          public int hashCode() {
            if (memoizedHashCode != 0) {
              return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + HOST_FIELD_NUMBER;
            hash = (53 * hash) + getHost().hashCode();
            hash = (37 * hash) + PRIORITY_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getPriority());
            hash = (37 * hash) + PORT_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getPort());
            hash = (37 * hash) + USER_FIELD_NUMBER;
            hash = (53 * hash) + getUser().hashCode();
            hash = (37 * hash) + PASSWORD_FIELD_NUMBER;
            hash = (53 * hash) + getPassword().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
          }

          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseFrom(
              java.nio.ByteBuffer data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseFrom(
              byte[] data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }

          @java.lang.Override
          public Builder newBuilderForType() { return newBuilder(); }
          public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
          }
          public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
          }
          @java.lang.Override
          public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
          }

          @java.lang.Override
          protected Builder newBuilderForType(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
          }
          /**
           * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica}
           */
          public static final class Builder extends
              com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
              // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica)
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
                internalGetFieldAccessorTable() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder.class);
            }

            // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.newBuilder()
            private Builder() {
              maybeForceBuilderInitialization();
            }

            private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
              super(parent);
              maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
              if (com.google.protobuf.GeneratedMessageV3
                      .alwaysUseFieldBuilders) {
              }
            }
            @java.lang.Override
            public Builder clear() {
              super.clear();
              host_ = "";

              priority_ = 0L;

              port_ = 0L;

              user_ = "";

              password_ = "";

              return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica_descriptor;
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica getDefaultInstanceForType() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.getDefaultInstance();
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica build() {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica result = buildPartial();
              if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
              }
              return result;
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica buildPartial() {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica(this);
              result.host_ = host_;
              result.priority_ = priority_;
              result.port_ = port_;
              result.user_ = user_;
              result.password_ = password_;
              onBuilt();
              return result;
            }

            @java.lang.Override
            public Builder clone() {
              return (Builder) super.clone();
            }
            @java.lang.Override
            public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return (Builder) super.setField(field, value);
            }
            @java.lang.Override
            public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
              return (Builder) super.clearField(field);
            }
            @java.lang.Override
            public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
              return (Builder) super.clearOneof(oneof);
            }
            @java.lang.Override
            public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, java.lang.Object value) {
              return (Builder) super.setRepeatedField(field, index, value);
            }
            @java.lang.Override
            public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return (Builder) super.addRepeatedField(field, value);
            }
            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
              if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica) {
                return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica)other);
              } else {
                super.mergeFrom(other);
                return this;
              }
            }

            public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica other) {
              if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.getDefaultInstance()) return this;
              if (!other.getHost().isEmpty()) {
                host_ = other.host_;
                onChanged();
              }
              if (other.getPriority() != 0L) {
                setPriority(other.getPriority());
              }
              if (other.getPort() != 0L) {
                setPort(other.getPort());
              }
              if (!other.getUser().isEmpty()) {
                user_ = other.user_;
                onChanged();
              }
              if (!other.getPassword().isEmpty()) {
                password_ = other.password_;
                onChanged();
              }
              this.mergeUnknownFields(other.unknownFields);
              onChanged();
              return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
              return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica parsedMessage = null;
              try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica) e.getUnfinishedMessage();
                throw e.unwrapIOException();
              } finally {
                if (parsedMessage != null) {
                  mergeFrom(parsedMessage);
                }
              }
              return this;
            }

            private java.lang.Object host_ = "";
            /**
             * <pre>
             * MySQL host of the replica.
             * </pre>
             *
             * <code>string host = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
             */
            public java.lang.String getHost() {
              java.lang.Object ref = host_;
              if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                host_ = s;
                return s;
              } else {
                return (java.lang.String) ref;
              }
            }
            /**
             * <pre>
             * MySQL host of the replica.
             * </pre>
             *
             * <code>string host = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
             */
            public com.google.protobuf.ByteString
                getHostBytes() {
              java.lang.Object ref = host_;
              if (ref instanceof String) {
                com.google.protobuf.ByteString b = 
                    com.google.protobuf.ByteString.copyFromUtf8(
                        (java.lang.String) ref);
                host_ = b;
                return b;
              } else {
                return (com.google.protobuf.ByteString) ref;
              }
            }
            /**
             * <pre>
             * MySQL host of the replica.
             * </pre>
             *
             * <code>string host = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
             */
            public Builder setHost(
                java.lang.String value) {
              if (value == null) {
    throw new NullPointerException();
  }
  
              host_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * MySQL host of the replica.
             * </pre>
             *
             * <code>string host = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
             */
            public Builder clearHost() {
              
              host_ = getDefaultInstance().getHost();
              onChanged();
              return this;
            }
            /**
             * <pre>
             * MySQL host of the replica.
             * </pre>
             *
             * <code>string host = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
             */
            public Builder setHostBytes(
                com.google.protobuf.ByteString value) {
              if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
              
              host_ = value;
              onChanged();
              return this;
            }

            private long priority_ ;
            /**
             * <pre>
             * The priority of the replica that ClickHouse takes into account when connecting.
             * Replica with the highest priority should have this field set to the lowest number.
             * </pre>
             *
             * <code>int64 priority = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.value) = "&gt;0"];</code>
             */
            public long getPriority() {
              return priority_;
            }
            /**
             * <pre>
             * The priority of the replica that ClickHouse takes into account when connecting.
             * Replica with the highest priority should have this field set to the lowest number.
             * </pre>
             *
             * <code>int64 priority = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.value) = "&gt;0"];</code>
             */
            public Builder setPriority(long value) {
              
              priority_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * The priority of the replica that ClickHouse takes into account when connecting.
             * Replica with the highest priority should have this field set to the lowest number.
             * </pre>
             *
             * <code>int64 priority = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.value) = "&gt;0"];</code>
             */
            public Builder clearPriority() {
              
              priority_ = 0L;
              onChanged();
              return this;
            }

            private long port_ ;
            /**
             * <pre>
             * Port to use when connecting to the replica.
             * If a port is not specified for a replica, ClickHouse uses the port specified for the source.
             * </pre>
             *
             * <code>int64 port = 3 [(.yandex.cloud.value) = "0-65535"];</code>
             */
            public long getPort() {
              return port_;
            }
            /**
             * <pre>
             * Port to use when connecting to the replica.
             * If a port is not specified for a replica, ClickHouse uses the port specified for the source.
             * </pre>
             *
             * <code>int64 port = 3 [(.yandex.cloud.value) = "0-65535"];</code>
             */
            public Builder setPort(long value) {
              
              port_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Port to use when connecting to the replica.
             * If a port is not specified for a replica, ClickHouse uses the port specified for the source.
             * </pre>
             *
             * <code>int64 port = 3 [(.yandex.cloud.value) = "0-65535"];</code>
             */
            public Builder clearPort() {
              
              port_ = 0L;
              onChanged();
              return this;
            }

            private java.lang.Object user_ = "";
            /**
             * <pre>
             * Name of the MySQL database user.
             * </pre>
             *
             * <code>string user = 4;</code>
             */
            public java.lang.String getUser() {
              java.lang.Object ref = user_;
              if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                user_ = s;
                return s;
              } else {
                return (java.lang.String) ref;
              }
            }
            /**
             * <pre>
             * Name of the MySQL database user.
             * </pre>
             *
             * <code>string user = 4;</code>
             */
            public com.google.protobuf.ByteString
                getUserBytes() {
              java.lang.Object ref = user_;
              if (ref instanceof String) {
                com.google.protobuf.ByteString b = 
                    com.google.protobuf.ByteString.copyFromUtf8(
                        (java.lang.String) ref);
                user_ = b;
                return b;
              } else {
                return (com.google.protobuf.ByteString) ref;
              }
            }
            /**
             * <pre>
             * Name of the MySQL database user.
             * </pre>
             *
             * <code>string user = 4;</code>
             */
            public Builder setUser(
                java.lang.String value) {
              if (value == null) {
    throw new NullPointerException();
  }
  
              user_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Name of the MySQL database user.
             * </pre>
             *
             * <code>string user = 4;</code>
             */
            public Builder clearUser() {
              
              user_ = getDefaultInstance().getUser();
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Name of the MySQL database user.
             * </pre>
             *
             * <code>string user = 4;</code>
             */
            public Builder setUserBytes(
                com.google.protobuf.ByteString value) {
              if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
              
              user_ = value;
              onChanged();
              return this;
            }

            private java.lang.Object password_ = "";
            /**
             * <pre>
             * Password of the MySQL database user.
             * </pre>
             *
             * <code>string password = 5;</code>
             */
            public java.lang.String getPassword() {
              java.lang.Object ref = password_;
              if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                password_ = s;
                return s;
              } else {
                return (java.lang.String) ref;
              }
            }
            /**
             * <pre>
             * Password of the MySQL database user.
             * </pre>
             *
             * <code>string password = 5;</code>
             */
            public com.google.protobuf.ByteString
                getPasswordBytes() {
              java.lang.Object ref = password_;
              if (ref instanceof String) {
                com.google.protobuf.ByteString b = 
                    com.google.protobuf.ByteString.copyFromUtf8(
                        (java.lang.String) ref);
                password_ = b;
                return b;
              } else {
                return (com.google.protobuf.ByteString) ref;
              }
            }
            /**
             * <pre>
             * Password of the MySQL database user.
             * </pre>
             *
             * <code>string password = 5;</code>
             */
            public Builder setPassword(
                java.lang.String value) {
              if (value == null) {
    throw new NullPointerException();
  }
  
              password_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Password of the MySQL database user.
             * </pre>
             *
             * <code>string password = 5;</code>
             */
            public Builder clearPassword() {
              
              password_ = getDefaultInstance().getPassword();
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Password of the MySQL database user.
             * </pre>
             *
             * <code>string password = 5;</code>
             */
            public Builder setPasswordBytes(
                com.google.protobuf.ByteString value) {
              if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
              
              password_ = value;
              onChanged();
              return this;
            }
            @java.lang.Override
            public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.setUnknownFieldsProto3(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica)
          }

          // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica)
          private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica DEFAULT_INSTANCE;
          static {
            DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica();
          }

          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica getDefaultInstance() {
            return DEFAULT_INSTANCE;
          }

          private static final com.google.protobuf.Parser<Replica>
              PARSER = new com.google.protobuf.AbstractParser<Replica>() {
            @java.lang.Override
            public Replica parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              return new Replica(input, extensionRegistry);
            }
          };

          public static com.google.protobuf.Parser<Replica> parser() {
            return PARSER;
          }

          @java.lang.Override
          public com.google.protobuf.Parser<Replica> getParserForType() {
            return PARSER;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
          }

        }

        private int bitField0_;
        public static final int DB_FIELD_NUMBER = 1;
        private volatile java.lang.Object db_;
        /**
         * <pre>
         * Name of the MySQL database to connect to.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getDb() {
          java.lang.Object ref = db_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            db_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the MySQL database to connect to.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getDbBytes() {
          java.lang.Object ref = db_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            db_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int TABLE_FIELD_NUMBER = 2;
        private volatile java.lang.Object table_;
        /**
         * <pre>
         * Name of the database table to use as a ClickHouse dictionary.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getTable() {
          java.lang.Object ref = table_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            table_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the database table to use as a ClickHouse dictionary.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getTableBytes() {
          java.lang.Object ref = table_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            table_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int PORT_FIELD_NUMBER = 3;
        private long port_;
        /**
         * <pre>
         * Default port to use when connecting to a replica of the dictionary source.
         * </pre>
         *
         * <code>int64 port = 3 [(.yandex.cloud.value) = "0-65535"];</code>
         */
        public long getPort() {
          return port_;
        }

        public static final int USER_FIELD_NUMBER = 4;
        private volatile java.lang.Object user_;
        /**
         * <pre>
         * Name of the default user for replicas of the dictionary source.
         * </pre>
         *
         * <code>string user = 4;</code>
         */
        public java.lang.String getUser() {
          java.lang.Object ref = user_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            user_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the default user for replicas of the dictionary source.
         * </pre>
         *
         * <code>string user = 4;</code>
         */
        public com.google.protobuf.ByteString
            getUserBytes() {
          java.lang.Object ref = user_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            user_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int PASSWORD_FIELD_NUMBER = 5;
        private volatile java.lang.Object password_;
        /**
         * <pre>
         * Password of the default user for replicas of the dictionary source.
         * </pre>
         *
         * <code>string password = 5;</code>
         */
        public java.lang.String getPassword() {
          java.lang.Object ref = password_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            password_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Password of the default user for replicas of the dictionary source.
         * </pre>
         *
         * <code>string password = 5;</code>
         */
        public com.google.protobuf.ByteString
            getPasswordBytes() {
          java.lang.Object ref = password_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            password_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int REPLICAS_FIELD_NUMBER = 6;
        private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica> replicas_;
        /**
         * <pre>
         * List of MySQL replicas of the database used as dictionary source.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica> getReplicasList() {
          return replicas_;
        }
        /**
         * <pre>
         * List of MySQL replicas of the database used as dictionary source.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaOrBuilder> 
            getReplicasOrBuilderList() {
          return replicas_;
        }
        /**
         * <pre>
         * List of MySQL replicas of the database used as dictionary source.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public int getReplicasCount() {
          return replicas_.size();
        }
        /**
         * <pre>
         * List of MySQL replicas of the database used as dictionary source.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica getReplicas(int index) {
          return replicas_.get(index);
        }
        /**
         * <pre>
         * List of MySQL replicas of the database used as dictionary source.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaOrBuilder getReplicasOrBuilder(
            int index) {
          return replicas_.get(index);
        }

        public static final int WHERE_FIELD_NUMBER = 7;
        private volatile java.lang.Object where_;
        /**
         * <pre>
         * Selection criteria for the data in the specified MySQL table.
         * </pre>
         *
         * <code>string where = 7;</code>
         */
        public java.lang.String getWhere() {
          java.lang.Object ref = where_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            where_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Selection criteria for the data in the specified MySQL table.
         * </pre>
         *
         * <code>string where = 7;</code>
         */
        public com.google.protobuf.ByteString
            getWhereBytes() {
          java.lang.Object ref = where_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            where_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int INVALIDATE_QUERY_FIELD_NUMBER = 8;
        private volatile java.lang.Object invalidateQuery_;
        /**
         * <pre>
         * Query for checking the dictionary status, to pull only updated data.
         * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
         * </pre>
         *
         * <code>string invalidate_query = 8;</code>
         */
        public java.lang.String getInvalidateQuery() {
          java.lang.Object ref = invalidateQuery_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            invalidateQuery_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Query for checking the dictionary status, to pull only updated data.
         * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
         * </pre>
         *
         * <code>string invalidate_query = 8;</code>
         */
        public com.google.protobuf.ByteString
            getInvalidateQueryBytes() {
          java.lang.Object ref = invalidateQuery_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            invalidateQuery_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!getDbBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, db_);
          }
          if (!getTableBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, table_);
          }
          if (port_ != 0L) {
            output.writeInt64(3, port_);
          }
          if (!getUserBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 4, user_);
          }
          if (!getPasswordBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 5, password_);
          }
          for (int i = 0; i < replicas_.size(); i++) {
            output.writeMessage(6, replicas_.get(i));
          }
          if (!getWhereBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 7, where_);
          }
          if (!getInvalidateQueryBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 8, invalidateQuery_);
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!getDbBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, db_);
          }
          if (!getTableBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, table_);
          }
          if (port_ != 0L) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt64Size(3, port_);
          }
          if (!getUserBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, user_);
          }
          if (!getPasswordBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, password_);
          }
          for (int i = 0; i < replicas_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(6, replicas_.get(i));
          }
          if (!getWhereBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, where_);
          }
          if (!getInvalidateQueryBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, invalidateQuery_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource)) {
            return super.equals(obj);
          }
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) obj;

          boolean result = true;
          result = result && getDb()
              .equals(other.getDb());
          result = result && getTable()
              .equals(other.getTable());
          result = result && (getPort()
              == other.getPort());
          result = result && getUser()
              .equals(other.getUser());
          result = result && getPassword()
              .equals(other.getPassword());
          result = result && getReplicasList()
              .equals(other.getReplicasList());
          result = result && getWhere()
              .equals(other.getWhere());
          result = result && getInvalidateQuery()
              .equals(other.getInvalidateQuery());
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + DB_FIELD_NUMBER;
          hash = (53 * hash) + getDb().hashCode();
          hash = (37 * hash) + TABLE_FIELD_NUMBER;
          hash = (53 * hash) + getTable().hashCode();
          hash = (37 * hash) + PORT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getPort());
          hash = (37 * hash) + USER_FIELD_NUMBER;
          hash = (53 * hash) + getUser().hashCode();
          hash = (37 * hash) + PASSWORD_FIELD_NUMBER;
          hash = (53 * hash) + getPassword().hashCode();
          if (getReplicasCount() > 0) {
            hash = (37 * hash) + REPLICAS_FIELD_NUMBER;
            hash = (53 * hash) + getReplicasList().hashCode();
          }
          hash = (37 * hash) + WHERE_FIELD_NUMBER;
          hash = (53 * hash) + getWhere().hashCode();
          hash = (37 * hash) + INVALIDATE_QUERY_FIELD_NUMBER;
          hash = (53 * hash) + getInvalidateQuery().hashCode();
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource)
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSourceOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Builder.class);
          }

          // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
              getReplicasFieldBuilder();
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            db_ = "";

            table_ = "";

            port_ = 0L;

            user_ = "";

            password_ = "";

            if (replicasBuilder_ == null) {
              replicas_ = java.util.Collections.emptyList();
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              replicasBuilder_.clear();
            }
            where_ = "";

            invalidateQuery_ = "";

            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_descriptor;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource getDefaultInstanceForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.getDefaultInstance();
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource build() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource buildPartial() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            result.db_ = db_;
            result.table_ = table_;
            result.port_ = port_;
            result.user_ = user_;
            result.password_ = password_;
            if (replicasBuilder_ == null) {
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                replicas_ = java.util.Collections.unmodifiableList(replicas_);
                bitField0_ = (bitField0_ & ~0x00000020);
              }
              result.replicas_ = replicas_;
            } else {
              result.replicas_ = replicasBuilder_.build();
            }
            result.where_ = where_;
            result.invalidateQuery_ = invalidateQuery_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return (Builder) super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) {
              return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource other) {
            if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.getDefaultInstance()) return this;
            if (!other.getDb().isEmpty()) {
              db_ = other.db_;
              onChanged();
            }
            if (!other.getTable().isEmpty()) {
              table_ = other.table_;
              onChanged();
            }
            if (other.getPort() != 0L) {
              setPort(other.getPort());
            }
            if (!other.getUser().isEmpty()) {
              user_ = other.user_;
              onChanged();
            }
            if (!other.getPassword().isEmpty()) {
              password_ = other.password_;
              onChanged();
            }
            if (replicasBuilder_ == null) {
              if (!other.replicas_.isEmpty()) {
                if (replicas_.isEmpty()) {
                  replicas_ = other.replicas_;
                  bitField0_ = (bitField0_ & ~0x00000020);
                } else {
                  ensureReplicasIsMutable();
                  replicas_.addAll(other.replicas_);
                }
                onChanged();
              }
            } else {
              if (!other.replicas_.isEmpty()) {
                if (replicasBuilder_.isEmpty()) {
                  replicasBuilder_.dispose();
                  replicasBuilder_ = null;
                  replicas_ = other.replicas_;
                  bitField0_ = (bitField0_ & ~0x00000020);
                  replicasBuilder_ = 
                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                       getReplicasFieldBuilder() : null;
                } else {
                  replicasBuilder_.addAllMessages(other.replicas_);
                }
              }
            }
            if (!other.getWhere().isEmpty()) {
              where_ = other.where_;
              onChanged();
            }
            if (!other.getInvalidateQuery().isEmpty()) {
              invalidateQuery_ = other.invalidateQuery_;
              onChanged();
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          private java.lang.Object db_ = "";
          /**
           * <pre>
           * Name of the MySQL database to connect to.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getDb() {
            java.lang.Object ref = db_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              db_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the MySQL database to connect to.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getDbBytes() {
            java.lang.Object ref = db_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              db_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the MySQL database to connect to.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setDb(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            db_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the MySQL database to connect to.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearDb() {
            
            db_ = getDefaultInstance().getDb();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the MySQL database to connect to.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setDbBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            db_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object table_ = "";
          /**
           * <pre>
           * Name of the database table to use as a ClickHouse dictionary.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getTable() {
            java.lang.Object ref = table_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              table_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the database table to use as a ClickHouse dictionary.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getTableBytes() {
            java.lang.Object ref = table_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              table_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the database table to use as a ClickHouse dictionary.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setTable(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            table_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the database table to use as a ClickHouse dictionary.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearTable() {
            
            table_ = getDefaultInstance().getTable();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the database table to use as a ClickHouse dictionary.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setTableBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            table_ = value;
            onChanged();
            return this;
          }

          private long port_ ;
          /**
           * <pre>
           * Default port to use when connecting to a replica of the dictionary source.
           * </pre>
           *
           * <code>int64 port = 3 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public long getPort() {
            return port_;
          }
          /**
           * <pre>
           * Default port to use when connecting to a replica of the dictionary source.
           * </pre>
           *
           * <code>int64 port = 3 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public Builder setPort(long value) {
            
            port_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Default port to use when connecting to a replica of the dictionary source.
           * </pre>
           *
           * <code>int64 port = 3 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public Builder clearPort() {
            
            port_ = 0L;
            onChanged();
            return this;
          }

          private java.lang.Object user_ = "";
          /**
           * <pre>
           * Name of the default user for replicas of the dictionary source.
           * </pre>
           *
           * <code>string user = 4;</code>
           */
          public java.lang.String getUser() {
            java.lang.Object ref = user_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              user_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the default user for replicas of the dictionary source.
           * </pre>
           *
           * <code>string user = 4;</code>
           */
          public com.google.protobuf.ByteString
              getUserBytes() {
            java.lang.Object ref = user_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              user_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the default user for replicas of the dictionary source.
           * </pre>
           *
           * <code>string user = 4;</code>
           */
          public Builder setUser(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            user_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the default user for replicas of the dictionary source.
           * </pre>
           *
           * <code>string user = 4;</code>
           */
          public Builder clearUser() {
            
            user_ = getDefaultInstance().getUser();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the default user for replicas of the dictionary source.
           * </pre>
           *
           * <code>string user = 4;</code>
           */
          public Builder setUserBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            user_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object password_ = "";
          /**
           * <pre>
           * Password of the default user for replicas of the dictionary source.
           * </pre>
           *
           * <code>string password = 5;</code>
           */
          public java.lang.String getPassword() {
            java.lang.Object ref = password_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              password_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Password of the default user for replicas of the dictionary source.
           * </pre>
           *
           * <code>string password = 5;</code>
           */
          public com.google.protobuf.ByteString
              getPasswordBytes() {
            java.lang.Object ref = password_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              password_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Password of the default user for replicas of the dictionary source.
           * </pre>
           *
           * <code>string password = 5;</code>
           */
          public Builder setPassword(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            password_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Password of the default user for replicas of the dictionary source.
           * </pre>
           *
           * <code>string password = 5;</code>
           */
          public Builder clearPassword() {
            
            password_ = getDefaultInstance().getPassword();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Password of the default user for replicas of the dictionary source.
           * </pre>
           *
           * <code>string password = 5;</code>
           */
          public Builder setPasswordBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            password_ = value;
            onChanged();
            return this;
          }

          private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica> replicas_ =
            java.util.Collections.emptyList();
          private void ensureReplicasIsMutable() {
            if (!((bitField0_ & 0x00000020) == 0x00000020)) {
              replicas_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica>(replicas_);
              bitField0_ |= 0x00000020;
             }
          }

          private com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaOrBuilder> replicasBuilder_;

          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica> getReplicasList() {
            if (replicasBuilder_ == null) {
              return java.util.Collections.unmodifiableList(replicas_);
            } else {
              return replicasBuilder_.getMessageList();
            }
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public int getReplicasCount() {
            if (replicasBuilder_ == null) {
              return replicas_.size();
            } else {
              return replicasBuilder_.getCount();
            }
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica getReplicas(int index) {
            if (replicasBuilder_ == null) {
              return replicas_.get(index);
            } else {
              return replicasBuilder_.getMessage(index);
            }
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder setReplicas(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica value) {
            if (replicasBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureReplicasIsMutable();
              replicas_.set(index, value);
              onChanged();
            } else {
              replicasBuilder_.setMessage(index, value);
            }
            return this;
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder setReplicas(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder builderForValue) {
            if (replicasBuilder_ == null) {
              ensureReplicasIsMutable();
              replicas_.set(index, builderForValue.build());
              onChanged();
            } else {
              replicasBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addReplicas(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica value) {
            if (replicasBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureReplicasIsMutable();
              replicas_.add(value);
              onChanged();
            } else {
              replicasBuilder_.addMessage(value);
            }
            return this;
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addReplicas(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica value) {
            if (replicasBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureReplicasIsMutable();
              replicas_.add(index, value);
              onChanged();
            } else {
              replicasBuilder_.addMessage(index, value);
            }
            return this;
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addReplicas(
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder builderForValue) {
            if (replicasBuilder_ == null) {
              ensureReplicasIsMutable();
              replicas_.add(builderForValue.build());
              onChanged();
            } else {
              replicasBuilder_.addMessage(builderForValue.build());
            }
            return this;
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addReplicas(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder builderForValue) {
            if (replicasBuilder_ == null) {
              ensureReplicasIsMutable();
              replicas_.add(index, builderForValue.build());
              onChanged();
            } else {
              replicasBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addAllReplicas(
              java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica> values) {
            if (replicasBuilder_ == null) {
              ensureReplicasIsMutable();
              com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, replicas_);
              onChanged();
            } else {
              replicasBuilder_.addAllMessages(values);
            }
            return this;
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder clearReplicas() {
            if (replicasBuilder_ == null) {
              replicas_ = java.util.Collections.emptyList();
              bitField0_ = (bitField0_ & ~0x00000020);
              onChanged();
            } else {
              replicasBuilder_.clear();
            }
            return this;
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder removeReplicas(int index) {
            if (replicasBuilder_ == null) {
              ensureReplicasIsMutable();
              replicas_.remove(index);
              onChanged();
            } else {
              replicasBuilder_.remove(index);
            }
            return this;
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder getReplicasBuilder(
              int index) {
            return getReplicasFieldBuilder().getBuilder(index);
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaOrBuilder getReplicasOrBuilder(
              int index) {
            if (replicasBuilder_ == null) {
              return replicas_.get(index);  } else {
              return replicasBuilder_.getMessageOrBuilder(index);
            }
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaOrBuilder> 
               getReplicasOrBuilderList() {
            if (replicasBuilder_ != null) {
              return replicasBuilder_.getMessageOrBuilderList();
            } else {
              return java.util.Collections.unmodifiableList(replicas_);
            }
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder addReplicasBuilder() {
            return getReplicasFieldBuilder().addBuilder(
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.getDefaultInstance());
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder addReplicasBuilder(
              int index) {
            return getReplicasFieldBuilder().addBuilder(
                index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.getDefaultInstance());
          }
          /**
           * <pre>
           * List of MySQL replicas of the database used as dictionary source.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica replicas = 6 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder> 
               getReplicasBuilderList() {
            return getReplicasFieldBuilder().getBuilderList();
          }
          private com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaOrBuilder> 
              getReplicasFieldBuilder() {
            if (replicasBuilder_ == null) {
              replicasBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaOrBuilder>(
                      replicas_,
                      ((bitField0_ & 0x00000020) == 0x00000020),
                      getParentForChildren(),
                      isClean());
              replicas_ = null;
            }
            return replicasBuilder_;
          }

          private java.lang.Object where_ = "";
          /**
           * <pre>
           * Selection criteria for the data in the specified MySQL table.
           * </pre>
           *
           * <code>string where = 7;</code>
           */
          public java.lang.String getWhere() {
            java.lang.Object ref = where_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              where_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Selection criteria for the data in the specified MySQL table.
           * </pre>
           *
           * <code>string where = 7;</code>
           */
          public com.google.protobuf.ByteString
              getWhereBytes() {
            java.lang.Object ref = where_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              where_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Selection criteria for the data in the specified MySQL table.
           * </pre>
           *
           * <code>string where = 7;</code>
           */
          public Builder setWhere(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            where_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Selection criteria for the data in the specified MySQL table.
           * </pre>
           *
           * <code>string where = 7;</code>
           */
          public Builder clearWhere() {
            
            where_ = getDefaultInstance().getWhere();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Selection criteria for the data in the specified MySQL table.
           * </pre>
           *
           * <code>string where = 7;</code>
           */
          public Builder setWhereBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            where_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object invalidateQuery_ = "";
          /**
           * <pre>
           * Query for checking the dictionary status, to pull only updated data.
           * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
           * </pre>
           *
           * <code>string invalidate_query = 8;</code>
           */
          public java.lang.String getInvalidateQuery() {
            java.lang.Object ref = invalidateQuery_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              invalidateQuery_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Query for checking the dictionary status, to pull only updated data.
           * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
           * </pre>
           *
           * <code>string invalidate_query = 8;</code>
           */
          public com.google.protobuf.ByteString
              getInvalidateQueryBytes() {
            java.lang.Object ref = invalidateQuery_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              invalidateQuery_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Query for checking the dictionary status, to pull only updated data.
           * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
           * </pre>
           *
           * <code>string invalidate_query = 8;</code>
           */
          public Builder setInvalidateQuery(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            invalidateQuery_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Query for checking the dictionary status, to pull only updated data.
           * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
           * </pre>
           *
           * <code>string invalidate_query = 8;</code>
           */
          public Builder clearInvalidateQuery() {
            
            invalidateQuery_ = getDefaultInstance().getInvalidateQuery();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Query for checking the dictionary status, to pull only updated data.
           * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
           * </pre>
           *
           * <code>string invalidate_query = 8;</code>
           */
          public Builder setInvalidateQueryBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            invalidateQuery_ = value;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource)
        }

        // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource)
        private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource();
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<MysqlSource>
            PARSER = new com.google.protobuf.AbstractParser<MysqlSource>() {
          @java.lang.Override
          public MysqlSource parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new MysqlSource(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<MysqlSource> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<MysqlSource> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface ClickhouseSourceOrBuilder extends
          // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Name of the ClickHouse database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getDb();
        /**
         * <pre>
         * Name of the ClickHouse database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getDbBytes();

        /**
         * <pre>
         * Name of the table in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getTable();
        /**
         * <pre>
         * Name of the table in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getTableBytes();

        /**
         * <pre>
         * ClickHouse host of the specified database.
         * </pre>
         *
         * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
         */
        java.lang.String getHost();
        /**
         * <pre>
         * ClickHouse host of the specified database.
         * </pre>
         *
         * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
         */
        com.google.protobuf.ByteString
            getHostBytes();

        /**
         * <pre>
         * Port to use when connecting to the host.
         * </pre>
         *
         * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
         */
        long getPort();

        /**
         * <pre>
         * Name of the ClickHouse database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getUser();
        /**
         * <pre>
         * Name of the ClickHouse database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getUserBytes();

        /**
         * <pre>
         * Password of the ClickHouse database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        java.lang.String getPassword();
        /**
         * <pre>
         * Password of the ClickHouse database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        com.google.protobuf.ByteString
            getPasswordBytes();

        /**
         * <pre>
         * Selection criteria for the data in the specified ClickHouse table.
         * </pre>
         *
         * <code>string where = 7;</code>
         */
        java.lang.String getWhere();
        /**
         * <pre>
         * Selection criteria for the data in the specified ClickHouse table.
         * </pre>
         *
         * <code>string where = 7;</code>
         */
        com.google.protobuf.ByteString
            getWhereBytes();
      }
      /**
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource}
       */
      public  static final class ClickhouseSource extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource)
          ClickhouseSourceOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use ClickhouseSource.newBuilder() to construct.
        private ClickhouseSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private ClickhouseSource() {
          db_ = "";
          table_ = "";
          host_ = "";
          port_ = 0L;
          user_ = "";
          password_ = "";
          where_ = "";
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private ClickhouseSource(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  java.lang.String s = input.readStringRequireUtf8();

                  db_ = s;
                  break;
                }
                case 18: {
                  java.lang.String s = input.readStringRequireUtf8();

                  table_ = s;
                  break;
                }
                case 26: {
                  java.lang.String s = input.readStringRequireUtf8();

                  host_ = s;
                  break;
                }
                case 32: {

                  port_ = input.readInt64();
                  break;
                }
                case 42: {
                  java.lang.String s = input.readStringRequireUtf8();

                  user_ = s;
                  break;
                }
                case 50: {
                  java.lang.String s = input.readStringRequireUtf8();

                  password_ = s;
                  break;
                }
                case 58: {
                  java.lang.String s = input.readStringRequireUtf8();

                  where_ = s;
                  break;
                }
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_ClickhouseSource_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_ClickhouseSource_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.Builder.class);
        }

        public static final int DB_FIELD_NUMBER = 1;
        private volatile java.lang.Object db_;
        /**
         * <pre>
         * Name of the ClickHouse database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getDb() {
          java.lang.Object ref = db_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            db_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the ClickHouse database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getDbBytes() {
          java.lang.Object ref = db_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            db_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int TABLE_FIELD_NUMBER = 2;
        private volatile java.lang.Object table_;
        /**
         * <pre>
         * Name of the table in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getTable() {
          java.lang.Object ref = table_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            table_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the table in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getTableBytes() {
          java.lang.Object ref = table_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            table_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int HOST_FIELD_NUMBER = 3;
        private volatile java.lang.Object host_;
        /**
         * <pre>
         * ClickHouse host of the specified database.
         * </pre>
         *
         * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
         */
        public java.lang.String getHost() {
          java.lang.Object ref = host_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            host_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * ClickHouse host of the specified database.
         * </pre>
         *
         * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
         */
        public com.google.protobuf.ByteString
            getHostBytes() {
          java.lang.Object ref = host_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            host_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int PORT_FIELD_NUMBER = 4;
        private long port_;
        /**
         * <pre>
         * Port to use when connecting to the host.
         * </pre>
         *
         * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
         */
        public long getPort() {
          return port_;
        }

        public static final int USER_FIELD_NUMBER = 5;
        private volatile java.lang.Object user_;
        /**
         * <pre>
         * Name of the ClickHouse database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getUser() {
          java.lang.Object ref = user_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            user_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the ClickHouse database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getUserBytes() {
          java.lang.Object ref = user_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            user_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int PASSWORD_FIELD_NUMBER = 6;
        private volatile java.lang.Object password_;
        /**
         * <pre>
         * Password of the ClickHouse database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        public java.lang.String getPassword() {
          java.lang.Object ref = password_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            password_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Password of the ClickHouse database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        public com.google.protobuf.ByteString
            getPasswordBytes() {
          java.lang.Object ref = password_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            password_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int WHERE_FIELD_NUMBER = 7;
        private volatile java.lang.Object where_;
        /**
         * <pre>
         * Selection criteria for the data in the specified ClickHouse table.
         * </pre>
         *
         * <code>string where = 7;</code>
         */
        public java.lang.String getWhere() {
          java.lang.Object ref = where_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            where_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Selection criteria for the data in the specified ClickHouse table.
         * </pre>
         *
         * <code>string where = 7;</code>
         */
        public com.google.protobuf.ByteString
            getWhereBytes() {
          java.lang.Object ref = where_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            where_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!getDbBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, db_);
          }
          if (!getTableBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, table_);
          }
          if (!getHostBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 3, host_);
          }
          if (port_ != 0L) {
            output.writeInt64(4, port_);
          }
          if (!getUserBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 5, user_);
          }
          if (!getPasswordBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 6, password_);
          }
          if (!getWhereBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 7, where_);
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!getDbBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, db_);
          }
          if (!getTableBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, table_);
          }
          if (!getHostBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, host_);
          }
          if (port_ != 0L) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt64Size(4, port_);
          }
          if (!getUserBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, user_);
          }
          if (!getPasswordBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, password_);
          }
          if (!getWhereBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, where_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource)) {
            return super.equals(obj);
          }
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) obj;

          boolean result = true;
          result = result && getDb()
              .equals(other.getDb());
          result = result && getTable()
              .equals(other.getTable());
          result = result && getHost()
              .equals(other.getHost());
          result = result && (getPort()
              == other.getPort());
          result = result && getUser()
              .equals(other.getUser());
          result = result && getPassword()
              .equals(other.getPassword());
          result = result && getWhere()
              .equals(other.getWhere());
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + DB_FIELD_NUMBER;
          hash = (53 * hash) + getDb().hashCode();
          hash = (37 * hash) + TABLE_FIELD_NUMBER;
          hash = (53 * hash) + getTable().hashCode();
          hash = (37 * hash) + HOST_FIELD_NUMBER;
          hash = (53 * hash) + getHost().hashCode();
          hash = (37 * hash) + PORT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getPort());
          hash = (37 * hash) + USER_FIELD_NUMBER;
          hash = (53 * hash) + getUser().hashCode();
          hash = (37 * hash) + PASSWORD_FIELD_NUMBER;
          hash = (53 * hash) + getPassword().hashCode();
          hash = (37 * hash) + WHERE_FIELD_NUMBER;
          hash = (53 * hash) + getWhere().hashCode();
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource)
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSourceOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_ClickhouseSource_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_ClickhouseSource_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.Builder.class);
          }

          // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            db_ = "";

            table_ = "";

            host_ = "";

            port_ = 0L;

            user_ = "";

            password_ = "";

            where_ = "";

            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_ClickhouseSource_descriptor;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource getDefaultInstanceForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.getDefaultInstance();
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource build() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource buildPartial() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource(this);
            result.db_ = db_;
            result.table_ = table_;
            result.host_ = host_;
            result.port_ = port_;
            result.user_ = user_;
            result.password_ = password_;
            result.where_ = where_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return (Builder) super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) {
              return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource other) {
            if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.getDefaultInstance()) return this;
            if (!other.getDb().isEmpty()) {
              db_ = other.db_;
              onChanged();
            }
            if (!other.getTable().isEmpty()) {
              table_ = other.table_;
              onChanged();
            }
            if (!other.getHost().isEmpty()) {
              host_ = other.host_;
              onChanged();
            }
            if (other.getPort() != 0L) {
              setPort(other.getPort());
            }
            if (!other.getUser().isEmpty()) {
              user_ = other.user_;
              onChanged();
            }
            if (!other.getPassword().isEmpty()) {
              password_ = other.password_;
              onChanged();
            }
            if (!other.getWhere().isEmpty()) {
              where_ = other.where_;
              onChanged();
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private java.lang.Object db_ = "";
          /**
           * <pre>
           * Name of the ClickHouse database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getDb() {
            java.lang.Object ref = db_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              db_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the ClickHouse database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getDbBytes() {
            java.lang.Object ref = db_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              db_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the ClickHouse database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setDb(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            db_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the ClickHouse database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearDb() {
            
            db_ = getDefaultInstance().getDb();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the ClickHouse database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setDbBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            db_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object table_ = "";
          /**
           * <pre>
           * Name of the table in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getTable() {
            java.lang.Object ref = table_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              table_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the table in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getTableBytes() {
            java.lang.Object ref = table_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              table_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the table in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setTable(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            table_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the table in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearTable() {
            
            table_ = getDefaultInstance().getTable();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the table in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setTableBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            table_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object host_ = "";
          /**
           * <pre>
           * ClickHouse host of the specified database.
           * </pre>
           *
           * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public java.lang.String getHost() {
            java.lang.Object ref = host_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              host_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * ClickHouse host of the specified database.
           * </pre>
           *
           * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public com.google.protobuf.ByteString
              getHostBytes() {
            java.lang.Object ref = host_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              host_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * ClickHouse host of the specified database.
           * </pre>
           *
           * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public Builder setHost(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            host_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * ClickHouse host of the specified database.
           * </pre>
           *
           * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public Builder clearHost() {
            
            host_ = getDefaultInstance().getHost();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * ClickHouse host of the specified database.
           * </pre>
           *
           * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public Builder setHostBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            host_ = value;
            onChanged();
            return this;
          }

          private long port_ ;
          /**
           * <pre>
           * Port to use when connecting to the host.
           * </pre>
           *
           * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public long getPort() {
            return port_;
          }
          /**
           * <pre>
           * Port to use when connecting to the host.
           * </pre>
           *
           * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public Builder setPort(long value) {
            
            port_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Port to use when connecting to the host.
           * </pre>
           *
           * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public Builder clearPort() {
            
            port_ = 0L;
            onChanged();
            return this;
          }

          private java.lang.Object user_ = "";
          /**
           * <pre>
           * Name of the ClickHouse database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getUser() {
            java.lang.Object ref = user_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              user_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the ClickHouse database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getUserBytes() {
            java.lang.Object ref = user_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              user_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the ClickHouse database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setUser(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            user_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the ClickHouse database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearUser() {
            
            user_ = getDefaultInstance().getUser();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the ClickHouse database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setUserBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            user_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object password_ = "";
          /**
           * <pre>
           * Password of the ClickHouse database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public java.lang.String getPassword() {
            java.lang.Object ref = password_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              password_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Password of the ClickHouse database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public com.google.protobuf.ByteString
              getPasswordBytes() {
            java.lang.Object ref = password_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              password_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Password of the ClickHouse database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public Builder setPassword(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            password_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Password of the ClickHouse database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public Builder clearPassword() {
            
            password_ = getDefaultInstance().getPassword();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Password of the ClickHouse database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public Builder setPasswordBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            password_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object where_ = "";
          /**
           * <pre>
           * Selection criteria for the data in the specified ClickHouse table.
           * </pre>
           *
           * <code>string where = 7;</code>
           */
          public java.lang.String getWhere() {
            java.lang.Object ref = where_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              where_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Selection criteria for the data in the specified ClickHouse table.
           * </pre>
           *
           * <code>string where = 7;</code>
           */
          public com.google.protobuf.ByteString
              getWhereBytes() {
            java.lang.Object ref = where_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              where_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Selection criteria for the data in the specified ClickHouse table.
           * </pre>
           *
           * <code>string where = 7;</code>
           */
          public Builder setWhere(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            where_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Selection criteria for the data in the specified ClickHouse table.
           * </pre>
           *
           * <code>string where = 7;</code>
           */
          public Builder clearWhere() {
            
            where_ = getDefaultInstance().getWhere();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Selection criteria for the data in the specified ClickHouse table.
           * </pre>
           *
           * <code>string where = 7;</code>
           */
          public Builder setWhereBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            where_ = value;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource)
        }

        // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource)
        private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource();
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<ClickhouseSource>
            PARSER = new com.google.protobuf.AbstractParser<ClickhouseSource>() {
          @java.lang.Override
          public ClickhouseSource parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new ClickhouseSource(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<ClickhouseSource> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ClickhouseSource> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface MongodbSourceOrBuilder extends
          // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Name of the MongoDB database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getDb();
        /**
         * <pre>
         * Name of the MongoDB database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getDbBytes();

        /**
         * <pre>
         * Name of the collection in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string collection = 2 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getCollection();
        /**
         * <pre>
         * Name of the collection in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string collection = 2 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getCollectionBytes();

        /**
         * <pre>
         * MongoDB host of the specified database.
         * </pre>
         *
         * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
         */
        java.lang.String getHost();
        /**
         * <pre>
         * MongoDB host of the specified database.
         * </pre>
         *
         * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
         */
        com.google.protobuf.ByteString
            getHostBytes();

        /**
         * <pre>
         * Port to use when connecting to the host.
         * </pre>
         *
         * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
         */
        long getPort();

        /**
         * <pre>
         * Name of the MongoDB database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getUser();
        /**
         * <pre>
         * Name of the MongoDB database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getUserBytes();

        /**
         * <pre>
         * Password of the MongoDB database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        java.lang.String getPassword();
        /**
         * <pre>
         * Password of the MongoDB database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        com.google.protobuf.ByteString
            getPasswordBytes();
      }
      /**
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource}
       */
      public  static final class MongodbSource extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource)
          MongodbSourceOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use MongodbSource.newBuilder() to construct.
        private MongodbSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private MongodbSource() {
          db_ = "";
          collection_ = "";
          host_ = "";
          port_ = 0L;
          user_ = "";
          password_ = "";
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private MongodbSource(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  java.lang.String s = input.readStringRequireUtf8();

                  db_ = s;
                  break;
                }
                case 18: {
                  java.lang.String s = input.readStringRequireUtf8();

                  collection_ = s;
                  break;
                }
                case 26: {
                  java.lang.String s = input.readStringRequireUtf8();

                  host_ = s;
                  break;
                }
                case 32: {

                  port_ = input.readInt64();
                  break;
                }
                case 42: {
                  java.lang.String s = input.readStringRequireUtf8();

                  user_ = s;
                  break;
                }
                case 50: {
                  java.lang.String s = input.readStringRequireUtf8();

                  password_ = s;
                  break;
                }
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MongodbSource_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MongodbSource_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.Builder.class);
        }

        public static final int DB_FIELD_NUMBER = 1;
        private volatile java.lang.Object db_;
        /**
         * <pre>
         * Name of the MongoDB database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getDb() {
          java.lang.Object ref = db_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            db_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the MongoDB database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getDbBytes() {
          java.lang.Object ref = db_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            db_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int COLLECTION_FIELD_NUMBER = 2;
        private volatile java.lang.Object collection_;
        /**
         * <pre>
         * Name of the collection in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string collection = 2 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getCollection() {
          java.lang.Object ref = collection_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            collection_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the collection in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string collection = 2 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getCollectionBytes() {
          java.lang.Object ref = collection_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            collection_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int HOST_FIELD_NUMBER = 3;
        private volatile java.lang.Object host_;
        /**
         * <pre>
         * MongoDB host of the specified database.
         * </pre>
         *
         * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
         */
        public java.lang.String getHost() {
          java.lang.Object ref = host_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            host_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * MongoDB host of the specified database.
         * </pre>
         *
         * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
         */
        public com.google.protobuf.ByteString
            getHostBytes() {
          java.lang.Object ref = host_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            host_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int PORT_FIELD_NUMBER = 4;
        private long port_;
        /**
         * <pre>
         * Port to use when connecting to the host.
         * </pre>
         *
         * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
         */
        public long getPort() {
          return port_;
        }

        public static final int USER_FIELD_NUMBER = 5;
        private volatile java.lang.Object user_;
        /**
         * <pre>
         * Name of the MongoDB database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getUser() {
          java.lang.Object ref = user_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            user_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the MongoDB database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getUserBytes() {
          java.lang.Object ref = user_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            user_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int PASSWORD_FIELD_NUMBER = 6;
        private volatile java.lang.Object password_;
        /**
         * <pre>
         * Password of the MongoDB database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        public java.lang.String getPassword() {
          java.lang.Object ref = password_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            password_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Password of the MongoDB database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        public com.google.protobuf.ByteString
            getPasswordBytes() {
          java.lang.Object ref = password_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            password_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!getDbBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, db_);
          }
          if (!getCollectionBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, collection_);
          }
          if (!getHostBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 3, host_);
          }
          if (port_ != 0L) {
            output.writeInt64(4, port_);
          }
          if (!getUserBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 5, user_);
          }
          if (!getPasswordBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 6, password_);
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!getDbBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, db_);
          }
          if (!getCollectionBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, collection_);
          }
          if (!getHostBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, host_);
          }
          if (port_ != 0L) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt64Size(4, port_);
          }
          if (!getUserBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, user_);
          }
          if (!getPasswordBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, password_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource)) {
            return super.equals(obj);
          }
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) obj;

          boolean result = true;
          result = result && getDb()
              .equals(other.getDb());
          result = result && getCollection()
              .equals(other.getCollection());
          result = result && getHost()
              .equals(other.getHost());
          result = result && (getPort()
              == other.getPort());
          result = result && getUser()
              .equals(other.getUser());
          result = result && getPassword()
              .equals(other.getPassword());
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + DB_FIELD_NUMBER;
          hash = (53 * hash) + getDb().hashCode();
          hash = (37 * hash) + COLLECTION_FIELD_NUMBER;
          hash = (53 * hash) + getCollection().hashCode();
          hash = (37 * hash) + HOST_FIELD_NUMBER;
          hash = (53 * hash) + getHost().hashCode();
          hash = (37 * hash) + PORT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getPort());
          hash = (37 * hash) + USER_FIELD_NUMBER;
          hash = (53 * hash) + getUser().hashCode();
          hash = (37 * hash) + PASSWORD_FIELD_NUMBER;
          hash = (53 * hash) + getPassword().hashCode();
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource)
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSourceOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MongodbSource_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MongodbSource_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.Builder.class);
          }

          // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            db_ = "";

            collection_ = "";

            host_ = "";

            port_ = 0L;

            user_ = "";

            password_ = "";

            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MongodbSource_descriptor;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource getDefaultInstanceForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.getDefaultInstance();
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource build() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource buildPartial() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource(this);
            result.db_ = db_;
            result.collection_ = collection_;
            result.host_ = host_;
            result.port_ = port_;
            result.user_ = user_;
            result.password_ = password_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return (Builder) super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) {
              return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource other) {
            if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.getDefaultInstance()) return this;
            if (!other.getDb().isEmpty()) {
              db_ = other.db_;
              onChanged();
            }
            if (!other.getCollection().isEmpty()) {
              collection_ = other.collection_;
              onChanged();
            }
            if (!other.getHost().isEmpty()) {
              host_ = other.host_;
              onChanged();
            }
            if (other.getPort() != 0L) {
              setPort(other.getPort());
            }
            if (!other.getUser().isEmpty()) {
              user_ = other.user_;
              onChanged();
            }
            if (!other.getPassword().isEmpty()) {
              password_ = other.password_;
              onChanged();
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private java.lang.Object db_ = "";
          /**
           * <pre>
           * Name of the MongoDB database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getDb() {
            java.lang.Object ref = db_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              db_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the MongoDB database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getDbBytes() {
            java.lang.Object ref = db_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              db_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the MongoDB database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setDb(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            db_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the MongoDB database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearDb() {
            
            db_ = getDefaultInstance().getDb();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the MongoDB database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setDbBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            db_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object collection_ = "";
          /**
           * <pre>
           * Name of the collection in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string collection = 2 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getCollection() {
            java.lang.Object ref = collection_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              collection_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the collection in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string collection = 2 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getCollectionBytes() {
            java.lang.Object ref = collection_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              collection_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the collection in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string collection = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setCollection(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            collection_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the collection in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string collection = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearCollection() {
            
            collection_ = getDefaultInstance().getCollection();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the collection in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string collection = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setCollectionBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            collection_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object host_ = "";
          /**
           * <pre>
           * MongoDB host of the specified database.
           * </pre>
           *
           * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public java.lang.String getHost() {
            java.lang.Object ref = host_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              host_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * MongoDB host of the specified database.
           * </pre>
           *
           * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public com.google.protobuf.ByteString
              getHostBytes() {
            java.lang.Object ref = host_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              host_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * MongoDB host of the specified database.
           * </pre>
           *
           * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public Builder setHost(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            host_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * MongoDB host of the specified database.
           * </pre>
           *
           * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public Builder clearHost() {
            
            host_ = getDefaultInstance().getHost();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * MongoDB host of the specified database.
           * </pre>
           *
           * <code>string host = 3 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "&lt;=253"];</code>
           */
          public Builder setHostBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            host_ = value;
            onChanged();
            return this;
          }

          private long port_ ;
          /**
           * <pre>
           * Port to use when connecting to the host.
           * </pre>
           *
           * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public long getPort() {
            return port_;
          }
          /**
           * <pre>
           * Port to use when connecting to the host.
           * </pre>
           *
           * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public Builder setPort(long value) {
            
            port_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Port to use when connecting to the host.
           * </pre>
           *
           * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public Builder clearPort() {
            
            port_ = 0L;
            onChanged();
            return this;
          }

          private java.lang.Object user_ = "";
          /**
           * <pre>
           * Name of the MongoDB database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getUser() {
            java.lang.Object ref = user_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              user_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the MongoDB database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getUserBytes() {
            java.lang.Object ref = user_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              user_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the MongoDB database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setUser(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            user_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the MongoDB database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearUser() {
            
            user_ = getDefaultInstance().getUser();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the MongoDB database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setUserBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            user_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object password_ = "";
          /**
           * <pre>
           * Password of the MongoDB database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public java.lang.String getPassword() {
            java.lang.Object ref = password_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              password_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Password of the MongoDB database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public com.google.protobuf.ByteString
              getPasswordBytes() {
            java.lang.Object ref = password_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              password_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Password of the MongoDB database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public Builder setPassword(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            password_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Password of the MongoDB database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public Builder clearPassword() {
            
            password_ = getDefaultInstance().getPassword();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Password of the MongoDB database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public Builder setPasswordBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            password_ = value;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource)
        }

        // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource)
        private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource();
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<MongodbSource>
            PARSER = new com.google.protobuf.AbstractParser<MongodbSource>() {
          @java.lang.Override
          public MongodbSource parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new MongodbSource(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<MongodbSource> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<MongodbSource> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface PostgresqlSourceOrBuilder extends
          // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Name of the PostrgreSQL database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getDb();
        /**
         * <pre>
         * Name of the PostrgreSQL database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getDbBytes();

        /**
         * <pre>
         * Name of the table in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getTable();
        /**
         * <pre>
         * Name of the table in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getTableBytes();

        /**
         * <pre>
         * Name of the PostrgreSQL host
         * </pre>
         *
         * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        java.util.List<java.lang.String>
            getHostsList();
        /**
         * <pre>
         * Name of the PostrgreSQL host
         * </pre>
         *
         * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        int getHostsCount();
        /**
         * <pre>
         * Name of the PostrgreSQL host
         * </pre>
         *
         * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        java.lang.String getHosts(int index);
        /**
         * <pre>
         * Name of the PostrgreSQL host
         * </pre>
         *
         * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        com.google.protobuf.ByteString
            getHostsBytes(int index);

        /**
         * <pre>
         * Port to use when connecting to the host.
         * </pre>
         *
         * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
         */
        long getPort();

        /**
         * <pre>
         * Name of the PostrgreSQL database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getUser();
        /**
         * <pre>
         * Name of the PostrgreSQL database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getUserBytes();

        /**
         * <pre>
         * Password of the PostrgreSQL database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        java.lang.String getPassword();
        /**
         * <pre>
         * Password of the PostrgreSQL database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        com.google.protobuf.ByteString
            getPasswordBytes();

        /**
         * <pre>
         * Query for checking the dictionary status, to pull only updated data.
         * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
         * </pre>
         *
         * <code>string invalidate_query = 7;</code>
         */
        java.lang.String getInvalidateQuery();
        /**
         * <pre>
         * Query for checking the dictionary status, to pull only updated data.
         * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
         * </pre>
         *
         * <code>string invalidate_query = 7;</code>
         */
        com.google.protobuf.ByteString
            getInvalidateQueryBytes();

        /**
         * <pre>
         * Mode of SSL TCP/IP connection to the PostgreSQL host.
         * For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode ssl_mode = 8;</code>
         */
        int getSslModeValue();
        /**
         * <pre>
         * Mode of SSL TCP/IP connection to the PostgreSQL host.
         * For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode ssl_mode = 8;</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode getSslMode();
      }
      /**
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource}
       */
      public  static final class PostgresqlSource extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource)
          PostgresqlSourceOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use PostgresqlSource.newBuilder() to construct.
        private PostgresqlSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private PostgresqlSource() {
          db_ = "";
          table_ = "";
          hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          port_ = 0L;
          user_ = "";
          password_ = "";
          invalidateQuery_ = "";
          sslMode_ = 0;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private PostgresqlSource(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  java.lang.String s = input.readStringRequireUtf8();

                  db_ = s;
                  break;
                }
                case 18: {
                  java.lang.String s = input.readStringRequireUtf8();

                  table_ = s;
                  break;
                }
                case 26: {
                  java.lang.String s = input.readStringRequireUtf8();
                  if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    hosts_ = new com.google.protobuf.LazyStringArrayList();
                    mutable_bitField0_ |= 0x00000004;
                  }
                  hosts_.add(s);
                  break;
                }
                case 32: {

                  port_ = input.readInt64();
                  break;
                }
                case 42: {
                  java.lang.String s = input.readStringRequireUtf8();

                  user_ = s;
                  break;
                }
                case 50: {
                  java.lang.String s = input.readStringRequireUtf8();

                  password_ = s;
                  break;
                }
                case 58: {
                  java.lang.String s = input.readStringRequireUtf8();

                  invalidateQuery_ = s;
                  break;
                }
                case 64: {
                  int rawValue = input.readEnum();

                  sslMode_ = rawValue;
                  break;
                }
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              hosts_ = hosts_.getUnmodifiableView();
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_PostgresqlSource_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_PostgresqlSource_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.Builder.class);
        }

        /**
         * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode}
         */
        public enum SslMode
            implements com.google.protobuf.ProtocolMessageEnum {
          /**
           * <code>SSL_MODE_UNSPECIFIED = 0;</code>
           */
          SSL_MODE_UNSPECIFIED(0),
          /**
           * <pre>
           * Only try a non-SSL connection.
           * </pre>
           *
           * <code>DISABLE = 1;</code>
           */
          DISABLE(1),
          /**
           * <pre>
           * First try a non-SSL connection; if that fails, try an SSL connection.
           * </pre>
           *
           * <code>ALLOW = 2;</code>
           */
          ALLOW(2),
          /**
           * <pre>
           * First try an SSL connection; if that fails, try a non-SSL connection.
           * </pre>
           *
           * <code>PREFER = 3;</code>
           */
          PREFER(3),
          /**
           * <pre>
           * Only try an SSL connection, and verify that the server certificate is issued by a trusted certificate authority (CA).
           * </pre>
           *
           * <code>VERIFY_CA = 4;</code>
           */
          VERIFY_CA(4),
          /**
           * <pre>
           * Only try an SSL connection, verify that the server certificate is issued by a trusted CA and that the requested server host name matches that in the certificate.
           * </pre>
           *
           * <code>VERIFY_FULL = 5;</code>
           */
          VERIFY_FULL(5),
          UNRECOGNIZED(-1),
          ;

          /**
           * <code>SSL_MODE_UNSPECIFIED = 0;</code>
           */
          public static final int SSL_MODE_UNSPECIFIED_VALUE = 0;
          /**
           * <pre>
           * Only try a non-SSL connection.
           * </pre>
           *
           * <code>DISABLE = 1;</code>
           */
          public static final int DISABLE_VALUE = 1;
          /**
           * <pre>
           * First try a non-SSL connection; if that fails, try an SSL connection.
           * </pre>
           *
           * <code>ALLOW = 2;</code>
           */
          public static final int ALLOW_VALUE = 2;
          /**
           * <pre>
           * First try an SSL connection; if that fails, try a non-SSL connection.
           * </pre>
           *
           * <code>PREFER = 3;</code>
           */
          public static final int PREFER_VALUE = 3;
          /**
           * <pre>
           * Only try an SSL connection, and verify that the server certificate is issued by a trusted certificate authority (CA).
           * </pre>
           *
           * <code>VERIFY_CA = 4;</code>
           */
          public static final int VERIFY_CA_VALUE = 4;
          /**
           * <pre>
           * Only try an SSL connection, verify that the server certificate is issued by a trusted CA and that the requested server host name matches that in the certificate.
           * </pre>
           *
           * <code>VERIFY_FULL = 5;</code>
           */
          public static final int VERIFY_FULL_VALUE = 5;


          public final int getNumber() {
            if (this == UNRECOGNIZED) {
              throw new java.lang.IllegalArgumentException(
                  "Can't get the number of an unknown enum value.");
            }
            return value;
          }

          /**
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @java.lang.Deprecated
          public static SslMode valueOf(int value) {
            return forNumber(value);
          }

          public static SslMode forNumber(int value) {
            switch (value) {
              case 0: return SSL_MODE_UNSPECIFIED;
              case 1: return DISABLE;
              case 2: return ALLOW;
              case 3: return PREFER;
              case 4: return VERIFY_CA;
              case 5: return VERIFY_FULL;
              default: return null;
            }
          }

          public static com.google.protobuf.Internal.EnumLiteMap<SslMode>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final com.google.protobuf.Internal.EnumLiteMap<
              SslMode> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<SslMode>() {
                  public SslMode findValueByNumber(int number) {
                    return SslMode.forNumber(number);
                  }
                };

          public final com.google.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
          }
          public final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.getDescriptor().getEnumTypes().get(0);
          }

          private static final SslMode[] VALUES = values();

          public static SslMode valueOf(
              com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new java.lang.IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
              return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
          }

          private final int value;

          private SslMode(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode)
        }

        private int bitField0_;
        public static final int DB_FIELD_NUMBER = 1;
        private volatile java.lang.Object db_;
        /**
         * <pre>
         * Name of the PostrgreSQL database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getDb() {
          java.lang.Object ref = db_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            db_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the PostrgreSQL database.
         * </pre>
         *
         * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getDbBytes() {
          java.lang.Object ref = db_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            db_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int TABLE_FIELD_NUMBER = 2;
        private volatile java.lang.Object table_;
        /**
         * <pre>
         * Name of the table in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getTable() {
          java.lang.Object ref = table_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            table_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the table in the specified database to be used as the dictionary source.
         * </pre>
         *
         * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getTableBytes() {
          java.lang.Object ref = table_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            table_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int HOSTS_FIELD_NUMBER = 3;
        private com.google.protobuf.LazyStringList hosts_;
        /**
         * <pre>
         * Name of the PostrgreSQL host
         * </pre>
         *
         * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public com.google.protobuf.ProtocolStringList
            getHostsList() {
          return hosts_;
        }
        /**
         * <pre>
         * Name of the PostrgreSQL host
         * </pre>
         *
         * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public int getHostsCount() {
          return hosts_.size();
        }
        /**
         * <pre>
         * Name of the PostrgreSQL host
         * </pre>
         *
         * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public java.lang.String getHosts(int index) {
          return hosts_.get(index);
        }
        /**
         * <pre>
         * Name of the PostrgreSQL host
         * </pre>
         *
         * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public com.google.protobuf.ByteString
            getHostsBytes(int index) {
          return hosts_.getByteString(index);
        }

        public static final int PORT_FIELD_NUMBER = 4;
        private long port_;
        /**
         * <pre>
         * Port to use when connecting to the host.
         * </pre>
         *
         * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
         */
        public long getPort() {
          return port_;
        }

        public static final int USER_FIELD_NUMBER = 5;
        private volatile java.lang.Object user_;
        /**
         * <pre>
         * Name of the PostrgreSQL database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getUser() {
          java.lang.Object ref = user_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            user_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the PostrgreSQL database user.
         * </pre>
         *
         * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getUserBytes() {
          java.lang.Object ref = user_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            user_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int PASSWORD_FIELD_NUMBER = 6;
        private volatile java.lang.Object password_;
        /**
         * <pre>
         * Password of the PostrgreSQL database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        public java.lang.String getPassword() {
          java.lang.Object ref = password_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            password_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Password of the PostrgreSQL database user.
         * </pre>
         *
         * <code>string password = 6;</code>
         */
        public com.google.protobuf.ByteString
            getPasswordBytes() {
          java.lang.Object ref = password_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            password_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int INVALIDATE_QUERY_FIELD_NUMBER = 7;
        private volatile java.lang.Object invalidateQuery_;
        /**
         * <pre>
         * Query for checking the dictionary status, to pull only updated data.
         * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
         * </pre>
         *
         * <code>string invalidate_query = 7;</code>
         */
        public java.lang.String getInvalidateQuery() {
          java.lang.Object ref = invalidateQuery_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            invalidateQuery_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Query for checking the dictionary status, to pull only updated data.
         * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
         * </pre>
         *
         * <code>string invalidate_query = 7;</code>
         */
        public com.google.protobuf.ByteString
            getInvalidateQueryBytes() {
          java.lang.Object ref = invalidateQuery_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            invalidateQuery_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int SSL_MODE_FIELD_NUMBER = 8;
        private int sslMode_;
        /**
         * <pre>
         * Mode of SSL TCP/IP connection to the PostgreSQL host.
         * For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode ssl_mode = 8;</code>
         */
        public int getSslModeValue() {
          return sslMode_;
        }
        /**
         * <pre>
         * Mode of SSL TCP/IP connection to the PostgreSQL host.
         * For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode ssl_mode = 8;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode getSslMode() {
          @SuppressWarnings("deprecation")
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode result = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode.valueOf(sslMode_);
          return result == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode.UNRECOGNIZED : result;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!getDbBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, db_);
          }
          if (!getTableBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, table_);
          }
          for (int i = 0; i < hosts_.size(); i++) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 3, hosts_.getRaw(i));
          }
          if (port_ != 0L) {
            output.writeInt64(4, port_);
          }
          if (!getUserBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 5, user_);
          }
          if (!getPasswordBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 6, password_);
          }
          if (!getInvalidateQueryBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 7, invalidateQuery_);
          }
          if (sslMode_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode.SSL_MODE_UNSPECIFIED.getNumber()) {
            output.writeEnum(8, sslMode_);
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!getDbBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, db_);
          }
          if (!getTableBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, table_);
          }
          {
            int dataSize = 0;
            for (int i = 0; i < hosts_.size(); i++) {
              dataSize += computeStringSizeNoTag(hosts_.getRaw(i));
            }
            size += dataSize;
            size += 1 * getHostsList().size();
          }
          if (port_ != 0L) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt64Size(4, port_);
          }
          if (!getUserBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, user_);
          }
          if (!getPasswordBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, password_);
          }
          if (!getInvalidateQueryBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, invalidateQuery_);
          }
          if (sslMode_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode.SSL_MODE_UNSPECIFIED.getNumber()) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(8, sslMode_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource)) {
            return super.equals(obj);
          }
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) obj;

          boolean result = true;
          result = result && getDb()
              .equals(other.getDb());
          result = result && getTable()
              .equals(other.getTable());
          result = result && getHostsList()
              .equals(other.getHostsList());
          result = result && (getPort()
              == other.getPort());
          result = result && getUser()
              .equals(other.getUser());
          result = result && getPassword()
              .equals(other.getPassword());
          result = result && getInvalidateQuery()
              .equals(other.getInvalidateQuery());
          result = result && sslMode_ == other.sslMode_;
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + DB_FIELD_NUMBER;
          hash = (53 * hash) + getDb().hashCode();
          hash = (37 * hash) + TABLE_FIELD_NUMBER;
          hash = (53 * hash) + getTable().hashCode();
          if (getHostsCount() > 0) {
            hash = (37 * hash) + HOSTS_FIELD_NUMBER;
            hash = (53 * hash) + getHostsList().hashCode();
          }
          hash = (37 * hash) + PORT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getPort());
          hash = (37 * hash) + USER_FIELD_NUMBER;
          hash = (53 * hash) + getUser().hashCode();
          hash = (37 * hash) + PASSWORD_FIELD_NUMBER;
          hash = (53 * hash) + getPassword().hashCode();
          hash = (37 * hash) + INVALIDATE_QUERY_FIELD_NUMBER;
          hash = (53 * hash) + getInvalidateQuery().hashCode();
          hash = (37 * hash) + SSL_MODE_FIELD_NUMBER;
          hash = (53 * hash) + sslMode_;
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource)
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSourceOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_PostgresqlSource_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_PostgresqlSource_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.Builder.class);
          }

          // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            db_ = "";

            table_ = "";

            hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
            bitField0_ = (bitField0_ & ~0x00000004);
            port_ = 0L;

            user_ = "";

            password_ = "";

            invalidateQuery_ = "";

            sslMode_ = 0;

            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_PostgresqlSource_descriptor;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource getDefaultInstanceForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.getDefaultInstance();
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource build() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource buildPartial() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            result.db_ = db_;
            result.table_ = table_;
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              hosts_ = hosts_.getUnmodifiableView();
              bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.hosts_ = hosts_;
            result.port_ = port_;
            result.user_ = user_;
            result.password_ = password_;
            result.invalidateQuery_ = invalidateQuery_;
            result.sslMode_ = sslMode_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return (Builder) super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) {
              return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource other) {
            if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.getDefaultInstance()) return this;
            if (!other.getDb().isEmpty()) {
              db_ = other.db_;
              onChanged();
            }
            if (!other.getTable().isEmpty()) {
              table_ = other.table_;
              onChanged();
            }
            if (!other.hosts_.isEmpty()) {
              if (hosts_.isEmpty()) {
                hosts_ = other.hosts_;
                bitField0_ = (bitField0_ & ~0x00000004);
              } else {
                ensureHostsIsMutable();
                hosts_.addAll(other.hosts_);
              }
              onChanged();
            }
            if (other.getPort() != 0L) {
              setPort(other.getPort());
            }
            if (!other.getUser().isEmpty()) {
              user_ = other.user_;
              onChanged();
            }
            if (!other.getPassword().isEmpty()) {
              password_ = other.password_;
              onChanged();
            }
            if (!other.getInvalidateQuery().isEmpty()) {
              invalidateQuery_ = other.invalidateQuery_;
              onChanged();
            }
            if (other.sslMode_ != 0) {
              setSslModeValue(other.getSslModeValue());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          private java.lang.Object db_ = "";
          /**
           * <pre>
           * Name of the PostrgreSQL database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getDb() {
            java.lang.Object ref = db_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              db_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the PostrgreSQL database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getDbBytes() {
            java.lang.Object ref = db_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              db_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the PostrgreSQL database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setDb(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            db_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the PostrgreSQL database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearDb() {
            
            db_ = getDefaultInstance().getDb();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the PostrgreSQL database.
           * </pre>
           *
           * <code>string db = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setDbBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            db_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object table_ = "";
          /**
           * <pre>
           * Name of the table in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getTable() {
            java.lang.Object ref = table_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              table_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the table in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getTableBytes() {
            java.lang.Object ref = table_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              table_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the table in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setTable(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            table_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the table in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearTable() {
            
            table_ = getDefaultInstance().getTable();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the table in the specified database to be used as the dictionary source.
           * </pre>
           *
           * <code>string table = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setTableBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            table_ = value;
            onChanged();
            return this;
          }

          private com.google.protobuf.LazyStringList hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          private void ensureHostsIsMutable() {
            if (!((bitField0_ & 0x00000004) == 0x00000004)) {
              hosts_ = new com.google.protobuf.LazyStringArrayList(hosts_);
              bitField0_ |= 0x00000004;
             }
          }
          /**
           * <pre>
           * Name of the PostrgreSQL host
           * </pre>
           *
           * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public com.google.protobuf.ProtocolStringList
              getHostsList() {
            return hosts_.getUnmodifiableView();
          }
          /**
           * <pre>
           * Name of the PostrgreSQL host
           * </pre>
           *
           * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public int getHostsCount() {
            return hosts_.size();
          }
          /**
           * <pre>
           * Name of the PostrgreSQL host
           * </pre>
           *
           * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.lang.String getHosts(int index) {
            return hosts_.get(index);
          }
          /**
           * <pre>
           * Name of the PostrgreSQL host
           * </pre>
           *
           * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public com.google.protobuf.ByteString
              getHostsBytes(int index) {
            return hosts_.getByteString(index);
          }
          /**
           * <pre>
           * Name of the PostrgreSQL host
           * </pre>
           *
           * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder setHosts(
              int index, java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  ensureHostsIsMutable();
            hosts_.set(index, value);
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the PostrgreSQL host
           * </pre>
           *
           * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addHosts(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  ensureHostsIsMutable();
            hosts_.add(value);
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the PostrgreSQL host
           * </pre>
           *
           * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addAllHosts(
              java.lang.Iterable<java.lang.String> values) {
            ensureHostsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, hosts_);
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the PostrgreSQL host
           * </pre>
           *
           * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder clearHosts() {
            hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the PostrgreSQL host
           * </pre>
           *
           * <code>repeated string hosts = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addHostsBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            ensureHostsIsMutable();
            hosts_.add(value);
            onChanged();
            return this;
          }

          private long port_ ;
          /**
           * <pre>
           * Port to use when connecting to the host.
           * </pre>
           *
           * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public long getPort() {
            return port_;
          }
          /**
           * <pre>
           * Port to use when connecting to the host.
           * </pre>
           *
           * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public Builder setPort(long value) {
            
            port_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Port to use when connecting to the host.
           * </pre>
           *
           * <code>int64 port = 4 [(.yandex.cloud.value) = "0-65535"];</code>
           */
          public Builder clearPort() {
            
            port_ = 0L;
            onChanged();
            return this;
          }

          private java.lang.Object user_ = "";
          /**
           * <pre>
           * Name of the PostrgreSQL database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getUser() {
            java.lang.Object ref = user_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              user_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the PostrgreSQL database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getUserBytes() {
            java.lang.Object ref = user_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              user_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the PostrgreSQL database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setUser(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            user_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the PostrgreSQL database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearUser() {
            
            user_ = getDefaultInstance().getUser();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the PostrgreSQL database user.
           * </pre>
           *
           * <code>string user = 5 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setUserBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            user_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object password_ = "";
          /**
           * <pre>
           * Password of the PostrgreSQL database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public java.lang.String getPassword() {
            java.lang.Object ref = password_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              password_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Password of the PostrgreSQL database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public com.google.protobuf.ByteString
              getPasswordBytes() {
            java.lang.Object ref = password_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              password_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Password of the PostrgreSQL database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public Builder setPassword(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            password_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Password of the PostrgreSQL database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public Builder clearPassword() {
            
            password_ = getDefaultInstance().getPassword();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Password of the PostrgreSQL database user.
           * </pre>
           *
           * <code>string password = 6;</code>
           */
          public Builder setPasswordBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            password_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object invalidateQuery_ = "";
          /**
           * <pre>
           * Query for checking the dictionary status, to pull only updated data.
           * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
           * </pre>
           *
           * <code>string invalidate_query = 7;</code>
           */
          public java.lang.String getInvalidateQuery() {
            java.lang.Object ref = invalidateQuery_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              invalidateQuery_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Query for checking the dictionary status, to pull only updated data.
           * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
           * </pre>
           *
           * <code>string invalidate_query = 7;</code>
           */
          public com.google.protobuf.ByteString
              getInvalidateQueryBytes() {
            java.lang.Object ref = invalidateQuery_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              invalidateQuery_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Query for checking the dictionary status, to pull only updated data.
           * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
           * </pre>
           *
           * <code>string invalidate_query = 7;</code>
           */
          public Builder setInvalidateQuery(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            invalidateQuery_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Query for checking the dictionary status, to pull only updated data.
           * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
           * </pre>
           *
           * <code>string invalidate_query = 7;</code>
           */
          public Builder clearInvalidateQuery() {
            
            invalidateQuery_ = getDefaultInstance().getInvalidateQuery();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Query for checking the dictionary status, to pull only updated data.
           * For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
           * </pre>
           *
           * <code>string invalidate_query = 7;</code>
           */
          public Builder setInvalidateQueryBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            invalidateQuery_ = value;
            onChanged();
            return this;
          }

          private int sslMode_ = 0;
          /**
           * <pre>
           * Mode of SSL TCP/IP connection to the PostgreSQL host.
           * For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode ssl_mode = 8;</code>
           */
          public int getSslModeValue() {
            return sslMode_;
          }
          /**
           * <pre>
           * Mode of SSL TCP/IP connection to the PostgreSQL host.
           * For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode ssl_mode = 8;</code>
           */
          public Builder setSslModeValue(int value) {
            sslMode_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Mode of SSL TCP/IP connection to the PostgreSQL host.
           * For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode ssl_mode = 8;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode getSslMode() {
            @SuppressWarnings("deprecation")
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode result = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode.valueOf(sslMode_);
            return result == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode.UNRECOGNIZED : result;
          }
          /**
           * <pre>
           * Mode of SSL TCP/IP connection to the PostgreSQL host.
           * For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode ssl_mode = 8;</code>
           */
          public Builder setSslMode(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode value) {
            if (value == null) {
              throw new NullPointerException();
            }
            
            sslMode_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Mode of SSL TCP/IP connection to the PostgreSQL host.
           * For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode ssl_mode = 8;</code>
           */
          public Builder clearSslMode() {
            
            sslMode_ = 0;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource)
        }

        // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource)
        private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource();
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<PostgresqlSource>
            PARSER = new com.google.protobuf.AbstractParser<PostgresqlSource>() {
          @java.lang.Override
          public PostgresqlSource parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new PostgresqlSource(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<PostgresqlSource> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<PostgresqlSource> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface StructureOrBuilder extends
          // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Single numeric key column for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
         */
        boolean hasId();
        /**
         * <pre>
         * Single numeric key column for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id getId();
        /**
         * <pre>
         * Single numeric key column for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.IdOrBuilder getIdOrBuilder();

        /**
         * <pre>
         * Composite key for the dictionary, containing of one or more key columns.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
         */
        boolean hasKey();
        /**
         * <pre>
         * Composite key for the dictionary, containing of one or more key columns.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key getKey();
        /**
         * <pre>
         * Composite key for the dictionary, containing of one or more key columns.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.KeyOrBuilder getKeyOrBuilder();

        /**
         * <pre>
         * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
         */
        boolean hasRangeMin();
        /**
         * <pre>
         * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getRangeMin();
        /**
         * <pre>
         * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getRangeMinOrBuilder();

        /**
         * <pre>
         * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
         */
        boolean hasRangeMax();
        /**
         * <pre>
         * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getRangeMax();
        /**
         * <pre>
         * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getRangeMaxOrBuilder();

        /**
         * <pre>
         * Description of the fields available for database queries.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> 
            getAttributesList();
        /**
         * <pre>
         * Description of the fields available for database queries.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getAttributes(int index);
        /**
         * <pre>
         * Description of the fields available for database queries.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        int getAttributesCount();
        /**
         * <pre>
         * Description of the fields available for database queries.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> 
            getAttributesOrBuilderList();
        /**
         * <pre>
         * Description of the fields available for database queries.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getAttributesOrBuilder(
            int index);
      }
      /**
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure}
       */
      public  static final class Structure extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure)
          StructureOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use Structure.newBuilder() to construct.
        private Structure(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private Structure() {
          attributes_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private Structure(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.Builder subBuilder = null;
                  if (id_ != null) {
                    subBuilder = id_.toBuilder();
                  }
                  id_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(id_);
                    id_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 18: {
                  if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                    attributes_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute>();
                    mutable_bitField0_ |= 0x00000010;
                  }
                  attributes_.add(
                      input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.parser(), extensionRegistry));
                  break;
                }
                case 26: {
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.Builder subBuilder = null;
                  if (key_ != null) {
                    subBuilder = key_.toBuilder();
                  }
                  key_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(key_);
                    key_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 34: {
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder subBuilder = null;
                  if (rangeMin_ != null) {
                    subBuilder = rangeMin_.toBuilder();
                  }
                  rangeMin_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(rangeMin_);
                    rangeMin_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 42: {
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder subBuilder = null;
                  if (rangeMax_ != null) {
                    subBuilder = rangeMax_.toBuilder();
                  }
                  rangeMax_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(rangeMax_);
                    rangeMax_ = subBuilder.buildPartial();
                  }

                  break;
                }
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              attributes_ = java.util.Collections.unmodifiableList(attributes_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Builder.class);
        }

        public interface AttributeOrBuilder extends
            // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute)
            com.google.protobuf.MessageOrBuilder {

          /**
           * <pre>
           * Name of the column.
           * </pre>
           *
           * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
           */
          java.lang.String getName();
          /**
           * <pre>
           * Name of the column.
           * </pre>
           *
           * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
           */
          com.google.protobuf.ByteString
              getNameBytes();

          /**
           * <pre>
           * Type of the column.
           * </pre>
           *
           * <code>string type = 2 [(.yandex.cloud.required) = true];</code>
           */
          java.lang.String getType();
          /**
           * <pre>
           * Type of the column.
           * </pre>
           *
           * <code>string type = 2 [(.yandex.cloud.required) = true];</code>
           */
          com.google.protobuf.ByteString
              getTypeBytes();

          /**
           * <pre>
           * Default value for an element without data (for example, an empty string).
           * </pre>
           *
           * <code>string null_value = 3;</code>
           */
          java.lang.String getNullValue();
          /**
           * <pre>
           * Default value for an element without data (for example, an empty string).
           * </pre>
           *
           * <code>string null_value = 3;</code>
           */
          com.google.protobuf.ByteString
              getNullValueBytes();

          /**
           * <pre>
           * Expression, describing the attribute, if applicable.
           * </pre>
           *
           * <code>string expression = 4;</code>
           */
          java.lang.String getExpression();
          /**
           * <pre>
           * Expression, describing the attribute, if applicable.
           * </pre>
           *
           * <code>string expression = 4;</code>
           */
          com.google.protobuf.ByteString
              getExpressionBytes();

          /**
           * <pre>
           * Indication of hierarchy support.
           * Default value: `false`.
           * </pre>
           *
           * <code>bool hierarchical = 5;</code>
           */
          boolean getHierarchical();

          /**
           * <pre>
           * Indication of injective mapping "id -&gt; attribute".
           * Default value: `false`.
           * </pre>
           *
           * <code>bool injective = 6;</code>
           */
          boolean getInjective();
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute}
         */
        public  static final class Attribute extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute)
            AttributeOrBuilder {
        private static final long serialVersionUID = 0L;
          // Use Attribute.newBuilder() to construct.
          private Attribute(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
          }
          private Attribute() {
            name_ = "";
            type_ = "";
            nullValue_ = "";
            expression_ = "";
            hierarchical_ = false;
            injective_ = false;
          }

          @java.lang.Override
          public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
            return this.unknownFields;
          }
          private Attribute(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    java.lang.String s = input.readStringRequireUtf8();

                    name_ = s;
                    break;
                  }
                  case 18: {
                    java.lang.String s = input.readStringRequireUtf8();

                    type_ = s;
                    break;
                  }
                  case 26: {
                    java.lang.String s = input.readStringRequireUtf8();

                    nullValue_ = s;
                    break;
                  }
                  case 34: {
                    java.lang.String s = input.readStringRequireUtf8();

                    expression_ = s;
                    break;
                  }
                  case 40: {

                    hierarchical_ = input.readBool();
                    break;
                  }
                  case 48: {

                    injective_ = input.readBool();
                    break;
                  }
                  default: {
                    if (!parseUnknownFieldProto3(
                        input, unknownFields, extensionRegistry, tag)) {
                      done = true;
                    }
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(
                  e).setUnfinishedMessage(this);
            } finally {
              this.unknownFields = unknownFields.build();
              makeExtensionsImmutable();
            }
          }
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Attribute_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Attribute_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder.class);
          }

          public static final int NAME_FIELD_NUMBER = 1;
          private volatile java.lang.Object name_;
          /**
           * <pre>
           * Name of the column.
           * </pre>
           *
           * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getName() {
            java.lang.Object ref = name_;
            if (ref instanceof java.lang.String) {
              return (java.lang.String) ref;
            } else {
              com.google.protobuf.ByteString bs = 
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              name_ = s;
              return s;
            }
          }
          /**
           * <pre>
           * Name of the column.
           * </pre>
           *
           * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getNameBytes() {
            java.lang.Object ref = name_;
            if (ref instanceof java.lang.String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              name_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }

          public static final int TYPE_FIELD_NUMBER = 2;
          private volatile java.lang.Object type_;
          /**
           * <pre>
           * Type of the column.
           * </pre>
           *
           * <code>string type = 2 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getType() {
            java.lang.Object ref = type_;
            if (ref instanceof java.lang.String) {
              return (java.lang.String) ref;
            } else {
              com.google.protobuf.ByteString bs = 
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              type_ = s;
              return s;
            }
          }
          /**
           * <pre>
           * Type of the column.
           * </pre>
           *
           * <code>string type = 2 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getTypeBytes() {
            java.lang.Object ref = type_;
            if (ref instanceof java.lang.String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              type_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }

          public static final int NULL_VALUE_FIELD_NUMBER = 3;
          private volatile java.lang.Object nullValue_;
          /**
           * <pre>
           * Default value for an element without data (for example, an empty string).
           * </pre>
           *
           * <code>string null_value = 3;</code>
           */
          public java.lang.String getNullValue() {
            java.lang.Object ref = nullValue_;
            if (ref instanceof java.lang.String) {
              return (java.lang.String) ref;
            } else {
              com.google.protobuf.ByteString bs = 
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              nullValue_ = s;
              return s;
            }
          }
          /**
           * <pre>
           * Default value for an element without data (for example, an empty string).
           * </pre>
           *
           * <code>string null_value = 3;</code>
           */
          public com.google.protobuf.ByteString
              getNullValueBytes() {
            java.lang.Object ref = nullValue_;
            if (ref instanceof java.lang.String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              nullValue_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }

          public static final int EXPRESSION_FIELD_NUMBER = 4;
          private volatile java.lang.Object expression_;
          /**
           * <pre>
           * Expression, describing the attribute, if applicable.
           * </pre>
           *
           * <code>string expression = 4;</code>
           */
          public java.lang.String getExpression() {
            java.lang.Object ref = expression_;
            if (ref instanceof java.lang.String) {
              return (java.lang.String) ref;
            } else {
              com.google.protobuf.ByteString bs = 
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              expression_ = s;
              return s;
            }
          }
          /**
           * <pre>
           * Expression, describing the attribute, if applicable.
           * </pre>
           *
           * <code>string expression = 4;</code>
           */
          public com.google.protobuf.ByteString
              getExpressionBytes() {
            java.lang.Object ref = expression_;
            if (ref instanceof java.lang.String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              expression_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }

          public static final int HIERARCHICAL_FIELD_NUMBER = 5;
          private boolean hierarchical_;
          /**
           * <pre>
           * Indication of hierarchy support.
           * Default value: `false`.
           * </pre>
           *
           * <code>bool hierarchical = 5;</code>
           */
          public boolean getHierarchical() {
            return hierarchical_;
          }

          public static final int INJECTIVE_FIELD_NUMBER = 6;
          private boolean injective_;
          /**
           * <pre>
           * Indication of injective mapping "id -&gt; attribute".
           * Default value: `false`.
           * </pre>
           *
           * <code>bool injective = 6;</code>
           */
          public boolean getInjective() {
            return injective_;
          }

          private byte memoizedIsInitialized = -1;
          @java.lang.Override
          public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
          }

          @java.lang.Override
          public void writeTo(com.google.protobuf.CodedOutputStream output)
                              throws java.io.IOException {
            if (!getNameBytes().isEmpty()) {
              com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
            }
            if (!getTypeBytes().isEmpty()) {
              com.google.protobuf.GeneratedMessageV3.writeString(output, 2, type_);
            }
            if (!getNullValueBytes().isEmpty()) {
              com.google.protobuf.GeneratedMessageV3.writeString(output, 3, nullValue_);
            }
            if (!getExpressionBytes().isEmpty()) {
              com.google.protobuf.GeneratedMessageV3.writeString(output, 4, expression_);
            }
            if (hierarchical_ != false) {
              output.writeBool(5, hierarchical_);
            }
            if (injective_ != false) {
              output.writeBool(6, injective_);
            }
            unknownFields.writeTo(output);
          }

          @java.lang.Override
          public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getNameBytes().isEmpty()) {
              size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
            }
            if (!getTypeBytes().isEmpty()) {
              size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, type_);
            }
            if (!getNullValueBytes().isEmpty()) {
              size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, nullValue_);
            }
            if (!getExpressionBytes().isEmpty()) {
              size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, expression_);
            }
            if (hierarchical_ != false) {
              size += com.google.protobuf.CodedOutputStream
                .computeBoolSize(5, hierarchical_);
            }
            if (injective_ != false) {
              size += com.google.protobuf.CodedOutputStream
                .computeBoolSize(6, injective_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
          }

          @java.lang.Override
          public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
             return true;
            }
            if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute)) {
              return super.equals(obj);
            }
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute) obj;

            boolean result = true;
            result = result && getName()
                .equals(other.getName());
            result = result && getType()
                .equals(other.getType());
            result = result && getNullValue()
                .equals(other.getNullValue());
            result = result && getExpression()
                .equals(other.getExpression());
            result = result && (getHierarchical()
                == other.getHierarchical());
            result = result && (getInjective()
                == other.getInjective());
            result = result && unknownFields.equals(other.unknownFields);
            return result;
          }

          @java.lang.Override
          public int hashCode() {
            if (memoizedHashCode != 0) {
              return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + NAME_FIELD_NUMBER;
            hash = (53 * hash) + getName().hashCode();
            hash = (37 * hash) + TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getType().hashCode();
            hash = (37 * hash) + NULL_VALUE_FIELD_NUMBER;
            hash = (53 * hash) + getNullValue().hashCode();
            hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
            hash = (53 * hash) + getExpression().hashCode();
            hash = (37 * hash) + HIERARCHICAL_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getHierarchical());
            hash = (37 * hash) + INJECTIVE_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getInjective());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
          }

          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseFrom(
              java.nio.ByteBuffer data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseFrom(
              byte[] data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }

          @java.lang.Override
          public Builder newBuilderForType() { return newBuilder(); }
          public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
          }
          public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
          }
          @java.lang.Override
          public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
          }

          @java.lang.Override
          protected Builder newBuilderForType(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
          }
          /**
           * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute}
           */
          public static final class Builder extends
              com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
              // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute)
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Attribute_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
                internalGetFieldAccessorTable() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Attribute_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder.class);
            }

            // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.newBuilder()
            private Builder() {
              maybeForceBuilderInitialization();
            }

            private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
              super(parent);
              maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
              if (com.google.protobuf.GeneratedMessageV3
                      .alwaysUseFieldBuilders) {
              }
            }
            @java.lang.Override
            public Builder clear() {
              super.clear();
              name_ = "";

              type_ = "";

              nullValue_ = "";

              expression_ = "";

              hierarchical_ = false;

              injective_ = false;

              return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Attribute_descriptor;
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getDefaultInstanceForType() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance();
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute build() {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute result = buildPartial();
              if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
              }
              return result;
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute buildPartial() {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute(this);
              result.name_ = name_;
              result.type_ = type_;
              result.nullValue_ = nullValue_;
              result.expression_ = expression_;
              result.hierarchical_ = hierarchical_;
              result.injective_ = injective_;
              onBuilt();
              return result;
            }

            @java.lang.Override
            public Builder clone() {
              return (Builder) super.clone();
            }
            @java.lang.Override
            public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return (Builder) super.setField(field, value);
            }
            @java.lang.Override
            public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
              return (Builder) super.clearField(field);
            }
            @java.lang.Override
            public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
              return (Builder) super.clearOneof(oneof);
            }
            @java.lang.Override
            public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, java.lang.Object value) {
              return (Builder) super.setRepeatedField(field, index, value);
            }
            @java.lang.Override
            public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return (Builder) super.addRepeatedField(field, value);
            }
            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
              if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute) {
                return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute)other);
              } else {
                super.mergeFrom(other);
                return this;
              }
            }

            public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute other) {
              if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance()) return this;
              if (!other.getName().isEmpty()) {
                name_ = other.name_;
                onChanged();
              }
              if (!other.getType().isEmpty()) {
                type_ = other.type_;
                onChanged();
              }
              if (!other.getNullValue().isEmpty()) {
                nullValue_ = other.nullValue_;
                onChanged();
              }
              if (!other.getExpression().isEmpty()) {
                expression_ = other.expression_;
                onChanged();
              }
              if (other.getHierarchical() != false) {
                setHierarchical(other.getHierarchical());
              }
              if (other.getInjective() != false) {
                setInjective(other.getInjective());
              }
              this.mergeUnknownFields(other.unknownFields);
              onChanged();
              return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
              return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute parsedMessage = null;
              try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute) e.getUnfinishedMessage();
                throw e.unwrapIOException();
              } finally {
                if (parsedMessage != null) {
                  mergeFrom(parsedMessage);
                }
              }
              return this;
            }

            private java.lang.Object name_ = "";
            /**
             * <pre>
             * Name of the column.
             * </pre>
             *
             * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
             */
            public java.lang.String getName() {
              java.lang.Object ref = name_;
              if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                name_ = s;
                return s;
              } else {
                return (java.lang.String) ref;
              }
            }
            /**
             * <pre>
             * Name of the column.
             * </pre>
             *
             * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
             */
            public com.google.protobuf.ByteString
                getNameBytes() {
              java.lang.Object ref = name_;
              if (ref instanceof String) {
                com.google.protobuf.ByteString b = 
                    com.google.protobuf.ByteString.copyFromUtf8(
                        (java.lang.String) ref);
                name_ = b;
                return b;
              } else {
                return (com.google.protobuf.ByteString) ref;
              }
            }
            /**
             * <pre>
             * Name of the column.
             * </pre>
             *
             * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
             */
            public Builder setName(
                java.lang.String value) {
              if (value == null) {
    throw new NullPointerException();
  }
  
              name_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Name of the column.
             * </pre>
             *
             * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
             */
            public Builder clearName() {
              
              name_ = getDefaultInstance().getName();
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Name of the column.
             * </pre>
             *
             * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
             */
            public Builder setNameBytes(
                com.google.protobuf.ByteString value) {
              if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
              
              name_ = value;
              onChanged();
              return this;
            }

            private java.lang.Object type_ = "";
            /**
             * <pre>
             * Type of the column.
             * </pre>
             *
             * <code>string type = 2 [(.yandex.cloud.required) = true];</code>
             */
            public java.lang.String getType() {
              java.lang.Object ref = type_;
              if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                type_ = s;
                return s;
              } else {
                return (java.lang.String) ref;
              }
            }
            /**
             * <pre>
             * Type of the column.
             * </pre>
             *
             * <code>string type = 2 [(.yandex.cloud.required) = true];</code>
             */
            public com.google.protobuf.ByteString
                getTypeBytes() {
              java.lang.Object ref = type_;
              if (ref instanceof String) {
                com.google.protobuf.ByteString b = 
                    com.google.protobuf.ByteString.copyFromUtf8(
                        (java.lang.String) ref);
                type_ = b;
                return b;
              } else {
                return (com.google.protobuf.ByteString) ref;
              }
            }
            /**
             * <pre>
             * Type of the column.
             * </pre>
             *
             * <code>string type = 2 [(.yandex.cloud.required) = true];</code>
             */
            public Builder setType(
                java.lang.String value) {
              if (value == null) {
    throw new NullPointerException();
  }
  
              type_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Type of the column.
             * </pre>
             *
             * <code>string type = 2 [(.yandex.cloud.required) = true];</code>
             */
            public Builder clearType() {
              
              type_ = getDefaultInstance().getType();
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Type of the column.
             * </pre>
             *
             * <code>string type = 2 [(.yandex.cloud.required) = true];</code>
             */
            public Builder setTypeBytes(
                com.google.protobuf.ByteString value) {
              if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
              
              type_ = value;
              onChanged();
              return this;
            }

            private java.lang.Object nullValue_ = "";
            /**
             * <pre>
             * Default value for an element without data (for example, an empty string).
             * </pre>
             *
             * <code>string null_value = 3;</code>
             */
            public java.lang.String getNullValue() {
              java.lang.Object ref = nullValue_;
              if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                nullValue_ = s;
                return s;
              } else {
                return (java.lang.String) ref;
              }
            }
            /**
             * <pre>
             * Default value for an element without data (for example, an empty string).
             * </pre>
             *
             * <code>string null_value = 3;</code>
             */
            public com.google.protobuf.ByteString
                getNullValueBytes() {
              java.lang.Object ref = nullValue_;
              if (ref instanceof String) {
                com.google.protobuf.ByteString b = 
                    com.google.protobuf.ByteString.copyFromUtf8(
                        (java.lang.String) ref);
                nullValue_ = b;
                return b;
              } else {
                return (com.google.protobuf.ByteString) ref;
              }
            }
            /**
             * <pre>
             * Default value for an element without data (for example, an empty string).
             * </pre>
             *
             * <code>string null_value = 3;</code>
             */
            public Builder setNullValue(
                java.lang.String value) {
              if (value == null) {
    throw new NullPointerException();
  }
  
              nullValue_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Default value for an element without data (for example, an empty string).
             * </pre>
             *
             * <code>string null_value = 3;</code>
             */
            public Builder clearNullValue() {
              
              nullValue_ = getDefaultInstance().getNullValue();
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Default value for an element without data (for example, an empty string).
             * </pre>
             *
             * <code>string null_value = 3;</code>
             */
            public Builder setNullValueBytes(
                com.google.protobuf.ByteString value) {
              if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
              
              nullValue_ = value;
              onChanged();
              return this;
            }

            private java.lang.Object expression_ = "";
            /**
             * <pre>
             * Expression, describing the attribute, if applicable.
             * </pre>
             *
             * <code>string expression = 4;</code>
             */
            public java.lang.String getExpression() {
              java.lang.Object ref = expression_;
              if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                expression_ = s;
                return s;
              } else {
                return (java.lang.String) ref;
              }
            }
            /**
             * <pre>
             * Expression, describing the attribute, if applicable.
             * </pre>
             *
             * <code>string expression = 4;</code>
             */
            public com.google.protobuf.ByteString
                getExpressionBytes() {
              java.lang.Object ref = expression_;
              if (ref instanceof String) {
                com.google.protobuf.ByteString b = 
                    com.google.protobuf.ByteString.copyFromUtf8(
                        (java.lang.String) ref);
                expression_ = b;
                return b;
              } else {
                return (com.google.protobuf.ByteString) ref;
              }
            }
            /**
             * <pre>
             * Expression, describing the attribute, if applicable.
             * </pre>
             *
             * <code>string expression = 4;</code>
             */
            public Builder setExpression(
                java.lang.String value) {
              if (value == null) {
    throw new NullPointerException();
  }
  
              expression_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Expression, describing the attribute, if applicable.
             * </pre>
             *
             * <code>string expression = 4;</code>
             */
            public Builder clearExpression() {
              
              expression_ = getDefaultInstance().getExpression();
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Expression, describing the attribute, if applicable.
             * </pre>
             *
             * <code>string expression = 4;</code>
             */
            public Builder setExpressionBytes(
                com.google.protobuf.ByteString value) {
              if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
              
              expression_ = value;
              onChanged();
              return this;
            }

            private boolean hierarchical_ ;
            /**
             * <pre>
             * Indication of hierarchy support.
             * Default value: `false`.
             * </pre>
             *
             * <code>bool hierarchical = 5;</code>
             */
            public boolean getHierarchical() {
              return hierarchical_;
            }
            /**
             * <pre>
             * Indication of hierarchy support.
             * Default value: `false`.
             * </pre>
             *
             * <code>bool hierarchical = 5;</code>
             */
            public Builder setHierarchical(boolean value) {
              
              hierarchical_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Indication of hierarchy support.
             * Default value: `false`.
             * </pre>
             *
             * <code>bool hierarchical = 5;</code>
             */
            public Builder clearHierarchical() {
              
              hierarchical_ = false;
              onChanged();
              return this;
            }

            private boolean injective_ ;
            /**
             * <pre>
             * Indication of injective mapping "id -&gt; attribute".
             * Default value: `false`.
             * </pre>
             *
             * <code>bool injective = 6;</code>
             */
            public boolean getInjective() {
              return injective_;
            }
            /**
             * <pre>
             * Indication of injective mapping "id -&gt; attribute".
             * Default value: `false`.
             * </pre>
             *
             * <code>bool injective = 6;</code>
             */
            public Builder setInjective(boolean value) {
              
              injective_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Indication of injective mapping "id -&gt; attribute".
             * Default value: `false`.
             * </pre>
             *
             * <code>bool injective = 6;</code>
             */
            public Builder clearInjective() {
              
              injective_ = false;
              onChanged();
              return this;
            }
            @java.lang.Override
            public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.setUnknownFieldsProto3(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute)
          }

          // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute)
          private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute DEFAULT_INSTANCE;
          static {
            DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute();
          }

          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getDefaultInstance() {
            return DEFAULT_INSTANCE;
          }

          private static final com.google.protobuf.Parser<Attribute>
              PARSER = new com.google.protobuf.AbstractParser<Attribute>() {
            @java.lang.Override
            public Attribute parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              return new Attribute(input, extensionRegistry);
            }
          };

          public static com.google.protobuf.Parser<Attribute> parser() {
            return PARSER;
          }

          @java.lang.Override
          public com.google.protobuf.Parser<Attribute> getParserForType() {
            return PARSER;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
          }

        }

        public interface IdOrBuilder extends
            // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id)
            com.google.protobuf.MessageOrBuilder {

          /**
           * <pre>
           * Name of the numeric key.
           * </pre>
           *
           * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
           */
          java.lang.String getName();
          /**
           * <pre>
           * Name of the numeric key.
           * </pre>
           *
           * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
           */
          com.google.protobuf.ByteString
              getNameBytes();
        }
        /**
         * <pre>
         * Numeric key.
         * </pre>
         *
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id}
         */
        public  static final class Id extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id)
            IdOrBuilder {
        private static final long serialVersionUID = 0L;
          // Use Id.newBuilder() to construct.
          private Id(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
          }
          private Id() {
            name_ = "";
          }

          @java.lang.Override
          public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
            return this.unknownFields;
          }
          private Id(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    java.lang.String s = input.readStringRequireUtf8();

                    name_ = s;
                    break;
                  }
                  default: {
                    if (!parseUnknownFieldProto3(
                        input, unknownFields, extensionRegistry, tag)) {
                      done = true;
                    }
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(
                  e).setUnfinishedMessage(this);
            } finally {
              this.unknownFields = unknownFields.build();
              makeExtensionsImmutable();
            }
          }
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Id_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Id_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.Builder.class);
          }

          public static final int NAME_FIELD_NUMBER = 1;
          private volatile java.lang.Object name_;
          /**
           * <pre>
           * Name of the numeric key.
           * </pre>
           *
           * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getName() {
            java.lang.Object ref = name_;
            if (ref instanceof java.lang.String) {
              return (java.lang.String) ref;
            } else {
              com.google.protobuf.ByteString bs = 
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              name_ = s;
              return s;
            }
          }
          /**
           * <pre>
           * Name of the numeric key.
           * </pre>
           *
           * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getNameBytes() {
            java.lang.Object ref = name_;
            if (ref instanceof java.lang.String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              name_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }

          private byte memoizedIsInitialized = -1;
          @java.lang.Override
          public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
          }

          @java.lang.Override
          public void writeTo(com.google.protobuf.CodedOutputStream output)
                              throws java.io.IOException {
            if (!getNameBytes().isEmpty()) {
              com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
            }
            unknownFields.writeTo(output);
          }

          @java.lang.Override
          public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getNameBytes().isEmpty()) {
              size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
          }

          @java.lang.Override
          public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
             return true;
            }
            if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id)) {
              return super.equals(obj);
            }
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id) obj;

            boolean result = true;
            result = result && getName()
                .equals(other.getName());
            result = result && unknownFields.equals(other.unknownFields);
            return result;
          }

          @java.lang.Override
          public int hashCode() {
            if (memoizedHashCode != 0) {
              return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + NAME_FIELD_NUMBER;
            hash = (53 * hash) + getName().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
          }

          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseFrom(
              java.nio.ByteBuffer data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseFrom(
              byte[] data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }

          @java.lang.Override
          public Builder newBuilderForType() { return newBuilder(); }
          public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
          }
          public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
          }
          @java.lang.Override
          public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
          }

          @java.lang.Override
          protected Builder newBuilderForType(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
          }
          /**
           * <pre>
           * Numeric key.
           * </pre>
           *
           * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id}
           */
          public static final class Builder extends
              com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
              // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id)
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.IdOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Id_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
                internalGetFieldAccessorTable() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Id_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.Builder.class);
            }

            // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.newBuilder()
            private Builder() {
              maybeForceBuilderInitialization();
            }

            private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
              super(parent);
              maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
              if (com.google.protobuf.GeneratedMessageV3
                      .alwaysUseFieldBuilders) {
              }
            }
            @java.lang.Override
            public Builder clear() {
              super.clear();
              name_ = "";

              return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Id_descriptor;
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id getDefaultInstanceForType() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.getDefaultInstance();
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id build() {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id result = buildPartial();
              if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
              }
              return result;
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id buildPartial() {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id(this);
              result.name_ = name_;
              onBuilt();
              return result;
            }

            @java.lang.Override
            public Builder clone() {
              return (Builder) super.clone();
            }
            @java.lang.Override
            public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return (Builder) super.setField(field, value);
            }
            @java.lang.Override
            public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
              return (Builder) super.clearField(field);
            }
            @java.lang.Override
            public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
              return (Builder) super.clearOneof(oneof);
            }
            @java.lang.Override
            public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, java.lang.Object value) {
              return (Builder) super.setRepeatedField(field, index, value);
            }
            @java.lang.Override
            public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return (Builder) super.addRepeatedField(field, value);
            }
            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
              if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id) {
                return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id)other);
              } else {
                super.mergeFrom(other);
                return this;
              }
            }

            public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id other) {
              if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.getDefaultInstance()) return this;
              if (!other.getName().isEmpty()) {
                name_ = other.name_;
                onChanged();
              }
              this.mergeUnknownFields(other.unknownFields);
              onChanged();
              return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
              return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id parsedMessage = null;
              try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id) e.getUnfinishedMessage();
                throw e.unwrapIOException();
              } finally {
                if (parsedMessage != null) {
                  mergeFrom(parsedMessage);
                }
              }
              return this;
            }

            private java.lang.Object name_ = "";
            /**
             * <pre>
             * Name of the numeric key.
             * </pre>
             *
             * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
             */
            public java.lang.String getName() {
              java.lang.Object ref = name_;
              if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                name_ = s;
                return s;
              } else {
                return (java.lang.String) ref;
              }
            }
            /**
             * <pre>
             * Name of the numeric key.
             * </pre>
             *
             * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
             */
            public com.google.protobuf.ByteString
                getNameBytes() {
              java.lang.Object ref = name_;
              if (ref instanceof String) {
                com.google.protobuf.ByteString b = 
                    com.google.protobuf.ByteString.copyFromUtf8(
                        (java.lang.String) ref);
                name_ = b;
                return b;
              } else {
                return (com.google.protobuf.ByteString) ref;
              }
            }
            /**
             * <pre>
             * Name of the numeric key.
             * </pre>
             *
             * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
             */
            public Builder setName(
                java.lang.String value) {
              if (value == null) {
    throw new NullPointerException();
  }
  
              name_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Name of the numeric key.
             * </pre>
             *
             * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
             */
            public Builder clearName() {
              
              name_ = getDefaultInstance().getName();
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Name of the numeric key.
             * </pre>
             *
             * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
             */
            public Builder setNameBytes(
                com.google.protobuf.ByteString value) {
              if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
              
              name_ = value;
              onChanged();
              return this;
            }
            @java.lang.Override
            public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.setUnknownFieldsProto3(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id)
          }

          // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id)
          private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id DEFAULT_INSTANCE;
          static {
            DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id();
          }

          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id getDefaultInstance() {
            return DEFAULT_INSTANCE;
          }

          private static final com.google.protobuf.Parser<Id>
              PARSER = new com.google.protobuf.AbstractParser<Id>() {
            @java.lang.Override
            public Id parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              return new Id(input, extensionRegistry);
            }
          };

          public static com.google.protobuf.Parser<Id> parser() {
            return PARSER;
          }

          @java.lang.Override
          public com.google.protobuf.Parser<Id> getParserForType() {
            return PARSER;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
          }

        }

        public interface KeyOrBuilder extends
            // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key)
            com.google.protobuf.MessageOrBuilder {

          /**
           * <pre>
           * Attributes of a complex key.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> 
              getAttributesList();
          /**
           * <pre>
           * Attributes of a complex key.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getAttributes(int index);
          /**
           * <pre>
           * Attributes of a complex key.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          int getAttributesCount();
          /**
           * <pre>
           * Attributes of a complex key.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> 
              getAttributesOrBuilderList();
          /**
           * <pre>
           * Attributes of a complex key.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getAttributesOrBuilder(
              int index);
        }
        /**
         * <pre>
         * Complex key.
         * </pre>
         *
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key}
         */
        public  static final class Key extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key)
            KeyOrBuilder {
        private static final long serialVersionUID = 0L;
          // Use Key.newBuilder() to construct.
          private Key(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
          }
          private Key() {
            attributes_ = java.util.Collections.emptyList();
          }

          @java.lang.Override
          public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
            return this.unknownFields;
          }
          private Key(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                      attributes_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute>();
                      mutable_bitField0_ |= 0x00000001;
                    }
                    attributes_.add(
                        input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.parser(), extensionRegistry));
                    break;
                  }
                  default: {
                    if (!parseUnknownFieldProto3(
                        input, unknownFields, extensionRegistry, tag)) {
                      done = true;
                    }
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(
                  e).setUnfinishedMessage(this);
            } finally {
              if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                attributes_ = java.util.Collections.unmodifiableList(attributes_);
              }
              this.unknownFields = unknownFields.build();
              makeExtensionsImmutable();
            }
          }
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Key_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Key_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.Builder.class);
          }

          public static final int ATTRIBUTES_FIELD_NUMBER = 1;
          private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> attributes_;
          /**
           * <pre>
           * Attributes of a complex key.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> getAttributesList() {
            return attributes_;
          }
          /**
           * <pre>
           * Attributes of a complex key.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> 
              getAttributesOrBuilderList() {
            return attributes_;
          }
          /**
           * <pre>
           * Attributes of a complex key.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public int getAttributesCount() {
            return attributes_.size();
          }
          /**
           * <pre>
           * Attributes of a complex key.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getAttributes(int index) {
            return attributes_.get(index);
          }
          /**
           * <pre>
           * Attributes of a complex key.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getAttributesOrBuilder(
              int index) {
            return attributes_.get(index);
          }

          private byte memoizedIsInitialized = -1;
          @java.lang.Override
          public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
          }

          @java.lang.Override
          public void writeTo(com.google.protobuf.CodedOutputStream output)
                              throws java.io.IOException {
            for (int i = 0; i < attributes_.size(); i++) {
              output.writeMessage(1, attributes_.get(i));
            }
            unknownFields.writeTo(output);
          }

          @java.lang.Override
          public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < attributes_.size(); i++) {
              size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(1, attributes_.get(i));
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
          }

          @java.lang.Override
          public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
             return true;
            }
            if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key)) {
              return super.equals(obj);
            }
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key) obj;

            boolean result = true;
            result = result && getAttributesList()
                .equals(other.getAttributesList());
            result = result && unknownFields.equals(other.unknownFields);
            return result;
          }

          @java.lang.Override
          public int hashCode() {
            if (memoizedHashCode != 0) {
              return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getAttributesCount() > 0) {
              hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
              hash = (53 * hash) + getAttributesList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
          }

          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseFrom(
              java.nio.ByteBuffer data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseFrom(
              byte[] data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }

          @java.lang.Override
          public Builder newBuilderForType() { return newBuilder(); }
          public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
          }
          public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
          }
          @java.lang.Override
          public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
          }

          @java.lang.Override
          protected Builder newBuilderForType(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
          }
          /**
           * <pre>
           * Complex key.
           * </pre>
           *
           * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key}
           */
          public static final class Builder extends
              com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
              // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key)
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.KeyOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Key_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
                internalGetFieldAccessorTable() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Key_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.Builder.class);
            }

            // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.newBuilder()
            private Builder() {
              maybeForceBuilderInitialization();
            }

            private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
              super(parent);
              maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
              if (com.google.protobuf.GeneratedMessageV3
                      .alwaysUseFieldBuilders) {
                getAttributesFieldBuilder();
              }
            }
            @java.lang.Override
            public Builder clear() {
              super.clear();
              if (attributesBuilder_ == null) {
                attributes_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                attributesBuilder_.clear();
              }
              return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Key_descriptor;
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key getDefaultInstanceForType() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.getDefaultInstance();
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key build() {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key result = buildPartial();
              if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
              }
              return result;
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key buildPartial() {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key(this);
              int from_bitField0_ = bitField0_;
              if (attributesBuilder_ == null) {
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  attributes_ = java.util.Collections.unmodifiableList(attributes_);
                  bitField0_ = (bitField0_ & ~0x00000001);
                }
                result.attributes_ = attributes_;
              } else {
                result.attributes_ = attributesBuilder_.build();
              }
              onBuilt();
              return result;
            }

            @java.lang.Override
            public Builder clone() {
              return (Builder) super.clone();
            }
            @java.lang.Override
            public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return (Builder) super.setField(field, value);
            }
            @java.lang.Override
            public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
              return (Builder) super.clearField(field);
            }
            @java.lang.Override
            public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
              return (Builder) super.clearOneof(oneof);
            }
            @java.lang.Override
            public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, java.lang.Object value) {
              return (Builder) super.setRepeatedField(field, index, value);
            }
            @java.lang.Override
            public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return (Builder) super.addRepeatedField(field, value);
            }
            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
              if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key) {
                return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key)other);
              } else {
                super.mergeFrom(other);
                return this;
              }
            }

            public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key other) {
              if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.getDefaultInstance()) return this;
              if (attributesBuilder_ == null) {
                if (!other.attributes_.isEmpty()) {
                  if (attributes_.isEmpty()) {
                    attributes_ = other.attributes_;
                    bitField0_ = (bitField0_ & ~0x00000001);
                  } else {
                    ensureAttributesIsMutable();
                    attributes_.addAll(other.attributes_);
                  }
                  onChanged();
                }
              } else {
                if (!other.attributes_.isEmpty()) {
                  if (attributesBuilder_.isEmpty()) {
                    attributesBuilder_.dispose();
                    attributesBuilder_ = null;
                    attributes_ = other.attributes_;
                    bitField0_ = (bitField0_ & ~0x00000001);
                    attributesBuilder_ = 
                      com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                         getAttributesFieldBuilder() : null;
                  } else {
                    attributesBuilder_.addAllMessages(other.attributes_);
                  }
                }
              }
              this.mergeUnknownFields(other.unknownFields);
              onChanged();
              return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
              return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key parsedMessage = null;
              try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key) e.getUnfinishedMessage();
                throw e.unwrapIOException();
              } finally {
                if (parsedMessage != null) {
                  mergeFrom(parsedMessage);
                }
              }
              return this;
            }
            private int bitField0_;

            private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> attributes_ =
              java.util.Collections.emptyList();
            private void ensureAttributesIsMutable() {
              if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                attributes_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute>(attributes_);
                bitField0_ |= 0x00000001;
               }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> attributesBuilder_;

            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> getAttributesList() {
              if (attributesBuilder_ == null) {
                return java.util.Collections.unmodifiableList(attributes_);
              } else {
                return attributesBuilder_.getMessageList();
              }
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public int getAttributesCount() {
              if (attributesBuilder_ == null) {
                return attributes_.size();
              } else {
                return attributesBuilder_.getCount();
              }
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getAttributes(int index) {
              if (attributesBuilder_ == null) {
                return attributes_.get(index);
              } else {
                return attributesBuilder_.getMessage(index);
              }
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public Builder setAttributes(
                int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute value) {
              if (attributesBuilder_ == null) {
                if (value == null) {
                  throw new NullPointerException();
                }
                ensureAttributesIsMutable();
                attributes_.set(index, value);
                onChanged();
              } else {
                attributesBuilder_.setMessage(index, value);
              }
              return this;
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public Builder setAttributes(
                int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder builderForValue) {
              if (attributesBuilder_ == null) {
                ensureAttributesIsMutable();
                attributes_.set(index, builderForValue.build());
                onChanged();
              } else {
                attributesBuilder_.setMessage(index, builderForValue.build());
              }
              return this;
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public Builder addAttributes(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute value) {
              if (attributesBuilder_ == null) {
                if (value == null) {
                  throw new NullPointerException();
                }
                ensureAttributesIsMutable();
                attributes_.add(value);
                onChanged();
              } else {
                attributesBuilder_.addMessage(value);
              }
              return this;
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public Builder addAttributes(
                int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute value) {
              if (attributesBuilder_ == null) {
                if (value == null) {
                  throw new NullPointerException();
                }
                ensureAttributesIsMutable();
                attributes_.add(index, value);
                onChanged();
              } else {
                attributesBuilder_.addMessage(index, value);
              }
              return this;
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public Builder addAttributes(
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder builderForValue) {
              if (attributesBuilder_ == null) {
                ensureAttributesIsMutable();
                attributes_.add(builderForValue.build());
                onChanged();
              } else {
                attributesBuilder_.addMessage(builderForValue.build());
              }
              return this;
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public Builder addAttributes(
                int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder builderForValue) {
              if (attributesBuilder_ == null) {
                ensureAttributesIsMutable();
                attributes_.add(index, builderForValue.build());
                onChanged();
              } else {
                attributesBuilder_.addMessage(index, builderForValue.build());
              }
              return this;
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public Builder addAllAttributes(
                java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> values) {
              if (attributesBuilder_ == null) {
                ensureAttributesIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                    values, attributes_);
                onChanged();
              } else {
                attributesBuilder_.addAllMessages(values);
              }
              return this;
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public Builder clearAttributes() {
              if (attributesBuilder_ == null) {
                attributes_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
                onChanged();
              } else {
                attributesBuilder_.clear();
              }
              return this;
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public Builder removeAttributes(int index) {
              if (attributesBuilder_ == null) {
                ensureAttributesIsMutable();
                attributes_.remove(index);
                onChanged();
              } else {
                attributesBuilder_.remove(index);
              }
              return this;
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder getAttributesBuilder(
                int index) {
              return getAttributesFieldBuilder().getBuilder(index);
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getAttributesOrBuilder(
                int index) {
              if (attributesBuilder_ == null) {
                return attributes_.get(index);  } else {
                return attributesBuilder_.getMessageOrBuilder(index);
              }
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> 
                 getAttributesOrBuilderList() {
              if (attributesBuilder_ != null) {
                return attributesBuilder_.getMessageOrBuilderList();
              } else {
                return java.util.Collections.unmodifiableList(attributes_);
              }
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder addAttributesBuilder() {
              return getAttributesFieldBuilder().addBuilder(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance());
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder addAttributesBuilder(
                int index) {
              return getAttributesFieldBuilder().addBuilder(
                  index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance());
            }
            /**
             * <pre>
             * Attributes of a complex key.
             * </pre>
             *
             * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 1 [(.yandex.cloud.size) = "&gt;0"];</code>
             */
            public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder> 
                 getAttributesBuilderList() {
              return getAttributesFieldBuilder().getBuilderList();
            }
            private com.google.protobuf.RepeatedFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> 
                getAttributesFieldBuilder() {
              if (attributesBuilder_ == null) {
                attributesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder>(
                        attributes_,
                        ((bitField0_ & 0x00000001) == 0x00000001),
                        getParentForChildren(),
                        isClean());
                attributes_ = null;
              }
              return attributesBuilder_;
            }
            @java.lang.Override
            public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.setUnknownFieldsProto3(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key)
          }

          // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key)
          private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key DEFAULT_INSTANCE;
          static {
            DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key();
          }

          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key getDefaultInstance() {
            return DEFAULT_INSTANCE;
          }

          private static final com.google.protobuf.Parser<Key>
              PARSER = new com.google.protobuf.AbstractParser<Key>() {
            @java.lang.Override
            public Key parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              return new Key(input, extensionRegistry);
            }
          };

          public static com.google.protobuf.Parser<Key> parser() {
            return PARSER;
          }

          @java.lang.Override
          public com.google.protobuf.Parser<Key> getParserForType() {
            return PARSER;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
          }

        }

        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id id_;
        /**
         * <pre>
         * Single numeric key column for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
         */
        public boolean hasId() {
          return id_ != null;
        }
        /**
         * <pre>
         * Single numeric key column for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id getId() {
          return id_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.getDefaultInstance() : id_;
        }
        /**
         * <pre>
         * Single numeric key column for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.IdOrBuilder getIdOrBuilder() {
          return getId();
        }

        public static final int KEY_FIELD_NUMBER = 3;
        private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key key_;
        /**
         * <pre>
         * Composite key for the dictionary, containing of one or more key columns.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
         */
        public boolean hasKey() {
          return key_ != null;
        }
        /**
         * <pre>
         * Composite key for the dictionary, containing of one or more key columns.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key getKey() {
          return key_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.getDefaultInstance() : key_;
        }
        /**
         * <pre>
         * Composite key for the dictionary, containing of one or more key columns.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.KeyOrBuilder getKeyOrBuilder() {
          return getKey();
        }

        public static final int RANGE_MIN_FIELD_NUMBER = 4;
        private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute rangeMin_;
        /**
         * <pre>
         * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
         */
        public boolean hasRangeMin() {
          return rangeMin_ != null;
        }
        /**
         * <pre>
         * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getRangeMin() {
          return rangeMin_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance() : rangeMin_;
        }
        /**
         * <pre>
         * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getRangeMinOrBuilder() {
          return getRangeMin();
        }

        public static final int RANGE_MAX_FIELD_NUMBER = 5;
        private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute rangeMax_;
        /**
         * <pre>
         * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
         */
        public boolean hasRangeMax() {
          return rangeMax_ != null;
        }
        /**
         * <pre>
         * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getRangeMax() {
          return rangeMax_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance() : rangeMax_;
        }
        /**
         * <pre>
         * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getRangeMaxOrBuilder() {
          return getRangeMax();
        }

        public static final int ATTRIBUTES_FIELD_NUMBER = 2;
        private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> attributes_;
        /**
         * <pre>
         * Description of the fields available for database queries.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> getAttributesList() {
          return attributes_;
        }
        /**
         * <pre>
         * Description of the fields available for database queries.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> 
            getAttributesOrBuilderList() {
          return attributes_;
        }
        /**
         * <pre>
         * Description of the fields available for database queries.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public int getAttributesCount() {
          return attributes_.size();
        }
        /**
         * <pre>
         * Description of the fields available for database queries.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getAttributes(int index) {
          return attributes_.get(index);
        }
        /**
         * <pre>
         * Description of the fields available for database queries.
         * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getAttributesOrBuilder(
            int index) {
          return attributes_.get(index);
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (id_ != null) {
            output.writeMessage(1, getId());
          }
          for (int i = 0; i < attributes_.size(); i++) {
            output.writeMessage(2, attributes_.get(i));
          }
          if (key_ != null) {
            output.writeMessage(3, getKey());
          }
          if (rangeMin_ != null) {
            output.writeMessage(4, getRangeMin());
          }
          if (rangeMax_ != null) {
            output.writeMessage(5, getRangeMax());
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (id_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(1, getId());
          }
          for (int i = 0; i < attributes_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(2, attributes_.get(i));
          }
          if (key_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(3, getKey());
          }
          if (rangeMin_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(4, getRangeMin());
          }
          if (rangeMax_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(5, getRangeMax());
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure)) {
            return super.equals(obj);
          }
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure) obj;

          boolean result = true;
          result = result && (hasId() == other.hasId());
          if (hasId()) {
            result = result && getId()
                .equals(other.getId());
          }
          result = result && (hasKey() == other.hasKey());
          if (hasKey()) {
            result = result && getKey()
                .equals(other.getKey());
          }
          result = result && (hasRangeMin() == other.hasRangeMin());
          if (hasRangeMin()) {
            result = result && getRangeMin()
                .equals(other.getRangeMin());
          }
          result = result && (hasRangeMax() == other.hasRangeMax());
          if (hasRangeMax()) {
            result = result && getRangeMax()
                .equals(other.getRangeMax());
          }
          result = result && getAttributesList()
              .equals(other.getAttributesList());
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasId()) {
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getId().hashCode();
          }
          if (hasKey()) {
            hash = (37 * hash) + KEY_FIELD_NUMBER;
            hash = (53 * hash) + getKey().hashCode();
          }
          if (hasRangeMin()) {
            hash = (37 * hash) + RANGE_MIN_FIELD_NUMBER;
            hash = (53 * hash) + getRangeMin().hashCode();
          }
          if (hasRangeMax()) {
            hash = (37 * hash) + RANGE_MAX_FIELD_NUMBER;
            hash = (53 * hash) + getRangeMax().hashCode();
          }
          if (getAttributesCount() > 0) {
            hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
            hash = (53 * hash) + getAttributesList().hashCode();
          }
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure)
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.StructureOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Builder.class);
          }

          // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
              getAttributesFieldBuilder();
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            if (idBuilder_ == null) {
              id_ = null;
            } else {
              id_ = null;
              idBuilder_ = null;
            }
            if (keyBuilder_ == null) {
              key_ = null;
            } else {
              key_ = null;
              keyBuilder_ = null;
            }
            if (rangeMinBuilder_ == null) {
              rangeMin_ = null;
            } else {
              rangeMin_ = null;
              rangeMinBuilder_ = null;
            }
            if (rangeMaxBuilder_ == null) {
              rangeMax_ = null;
            } else {
              rangeMax_ = null;
              rangeMaxBuilder_ = null;
            }
            if (attributesBuilder_ == null) {
              attributes_ = java.util.Collections.emptyList();
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              attributesBuilder_.clear();
            }
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_descriptor;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure getDefaultInstanceForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.getDefaultInstance();
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure build() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure buildPartial() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (idBuilder_ == null) {
              result.id_ = id_;
            } else {
              result.id_ = idBuilder_.build();
            }
            if (keyBuilder_ == null) {
              result.key_ = key_;
            } else {
              result.key_ = keyBuilder_.build();
            }
            if (rangeMinBuilder_ == null) {
              result.rangeMin_ = rangeMin_;
            } else {
              result.rangeMin_ = rangeMinBuilder_.build();
            }
            if (rangeMaxBuilder_ == null) {
              result.rangeMax_ = rangeMax_;
            } else {
              result.rangeMax_ = rangeMaxBuilder_.build();
            }
            if (attributesBuilder_ == null) {
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                attributes_ = java.util.Collections.unmodifiableList(attributes_);
                bitField0_ = (bitField0_ & ~0x00000010);
              }
              result.attributes_ = attributes_;
            } else {
              result.attributes_ = attributesBuilder_.build();
            }
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return (Builder) super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure) {
              return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure other) {
            if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.getDefaultInstance()) return this;
            if (other.hasId()) {
              mergeId(other.getId());
            }
            if (other.hasKey()) {
              mergeKey(other.getKey());
            }
            if (other.hasRangeMin()) {
              mergeRangeMin(other.getRangeMin());
            }
            if (other.hasRangeMax()) {
              mergeRangeMax(other.getRangeMax());
            }
            if (attributesBuilder_ == null) {
              if (!other.attributes_.isEmpty()) {
                if (attributes_.isEmpty()) {
                  attributes_ = other.attributes_;
                  bitField0_ = (bitField0_ & ~0x00000010);
                } else {
                  ensureAttributesIsMutable();
                  attributes_.addAll(other.attributes_);
                }
                onChanged();
              }
            } else {
              if (!other.attributes_.isEmpty()) {
                if (attributesBuilder_.isEmpty()) {
                  attributesBuilder_.dispose();
                  attributesBuilder_ = null;
                  attributes_ = other.attributes_;
                  bitField0_ = (bitField0_ & ~0x00000010);
                  attributesBuilder_ = 
                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                       getAttributesFieldBuilder() : null;
                } else {
                  attributesBuilder_.addAllMessages(other.attributes_);
                }
              }
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id id_ = null;
          private com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.IdOrBuilder> idBuilder_;
          /**
           * <pre>
           * Single numeric key column for the dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
           */
          public boolean hasId() {
            return idBuilder_ != null || id_ != null;
          }
          /**
           * <pre>
           * Single numeric key column for the dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id getId() {
            if (idBuilder_ == null) {
              return id_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.getDefaultInstance() : id_;
            } else {
              return idBuilder_.getMessage();
            }
          }
          /**
           * <pre>
           * Single numeric key column for the dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
           */
          public Builder setId(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id value) {
            if (idBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              id_ = value;
              onChanged();
            } else {
              idBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <pre>
           * Single numeric key column for the dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
           */
          public Builder setId(
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.Builder builderForValue) {
            if (idBuilder_ == null) {
              id_ = builderForValue.build();
              onChanged();
            } else {
              idBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <pre>
           * Single numeric key column for the dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
           */
          public Builder mergeId(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id value) {
            if (idBuilder_ == null) {
              if (id_ != null) {
                id_ =
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.newBuilder(id_).mergeFrom(value).buildPartial();
              } else {
                id_ = value;
              }
              onChanged();
            } else {
              idBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <pre>
           * Single numeric key column for the dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
           */
          public Builder clearId() {
            if (idBuilder_ == null) {
              id_ = null;
              onChanged();
            } else {
              id_ = null;
              idBuilder_ = null;
            }

            return this;
          }
          /**
           * <pre>
           * Single numeric key column for the dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.Builder getIdBuilder() {
            
            onChanged();
            return getIdFieldBuilder().getBuilder();
          }
          /**
           * <pre>
           * Single numeric key column for the dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.IdOrBuilder getIdOrBuilder() {
            if (idBuilder_ != null) {
              return idBuilder_.getMessageOrBuilder();
            } else {
              return id_ == null ?
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.getDefaultInstance() : id_;
            }
          }
          /**
           * <pre>
           * Single numeric key column for the dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id id = 1;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.IdOrBuilder> 
              getIdFieldBuilder() {
            if (idBuilder_ == null) {
              idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Id.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.IdOrBuilder>(
                      getId(),
                      getParentForChildren(),
                      isClean());
              id_ = null;
            }
            return idBuilder_;
          }

          private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key key_ = null;
          private com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.KeyOrBuilder> keyBuilder_;
          /**
           * <pre>
           * Composite key for the dictionary, containing of one or more key columns.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
           */
          public boolean hasKey() {
            return keyBuilder_ != null || key_ != null;
          }
          /**
           * <pre>
           * Composite key for the dictionary, containing of one or more key columns.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key getKey() {
            if (keyBuilder_ == null) {
              return key_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.getDefaultInstance() : key_;
            } else {
              return keyBuilder_.getMessage();
            }
          }
          /**
           * <pre>
           * Composite key for the dictionary, containing of one or more key columns.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
           */
          public Builder setKey(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key value) {
            if (keyBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              key_ = value;
              onChanged();
            } else {
              keyBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <pre>
           * Composite key for the dictionary, containing of one or more key columns.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
           */
          public Builder setKey(
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.Builder builderForValue) {
            if (keyBuilder_ == null) {
              key_ = builderForValue.build();
              onChanged();
            } else {
              keyBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <pre>
           * Composite key for the dictionary, containing of one or more key columns.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
           */
          public Builder mergeKey(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key value) {
            if (keyBuilder_ == null) {
              if (key_ != null) {
                key_ =
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.newBuilder(key_).mergeFrom(value).buildPartial();
              } else {
                key_ = value;
              }
              onChanged();
            } else {
              keyBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <pre>
           * Composite key for the dictionary, containing of one or more key columns.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
           */
          public Builder clearKey() {
            if (keyBuilder_ == null) {
              key_ = null;
              onChanged();
            } else {
              key_ = null;
              keyBuilder_ = null;
            }

            return this;
          }
          /**
           * <pre>
           * Composite key for the dictionary, containing of one or more key columns.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.Builder getKeyBuilder() {
            
            onChanged();
            return getKeyFieldBuilder().getBuilder();
          }
          /**
           * <pre>
           * Composite key for the dictionary, containing of one or more key columns.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.KeyOrBuilder getKeyOrBuilder() {
            if (keyBuilder_ != null) {
              return keyBuilder_.getMessageOrBuilder();
            } else {
              return key_ == null ?
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.getDefaultInstance() : key_;
            }
          }
          /**
           * <pre>
           * Composite key for the dictionary, containing of one or more key columns.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key key = 3;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.KeyOrBuilder> 
              getKeyFieldBuilder() {
            if (keyBuilder_ == null) {
              keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Key.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.KeyOrBuilder>(
                      getKey(),
                      getParentForChildren(),
                      isClean());
              key_ = null;
            }
            return keyBuilder_;
          }

          private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute rangeMin_ = null;
          private com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> rangeMinBuilder_;
          /**
           * <pre>
           * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
           */
          public boolean hasRangeMin() {
            return rangeMinBuilder_ != null || rangeMin_ != null;
          }
          /**
           * <pre>
           * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getRangeMin() {
            if (rangeMinBuilder_ == null) {
              return rangeMin_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance() : rangeMin_;
            } else {
              return rangeMinBuilder_.getMessage();
            }
          }
          /**
           * <pre>
           * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
           */
          public Builder setRangeMin(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute value) {
            if (rangeMinBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              rangeMin_ = value;
              onChanged();
            } else {
              rangeMinBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <pre>
           * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
           */
          public Builder setRangeMin(
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder builderForValue) {
            if (rangeMinBuilder_ == null) {
              rangeMin_ = builderForValue.build();
              onChanged();
            } else {
              rangeMinBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <pre>
           * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
           */
          public Builder mergeRangeMin(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute value) {
            if (rangeMinBuilder_ == null) {
              if (rangeMin_ != null) {
                rangeMin_ =
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.newBuilder(rangeMin_).mergeFrom(value).buildPartial();
              } else {
                rangeMin_ = value;
              }
              onChanged();
            } else {
              rangeMinBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <pre>
           * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
           */
          public Builder clearRangeMin() {
            if (rangeMinBuilder_ == null) {
              rangeMin_ = null;
              onChanged();
            } else {
              rangeMin_ = null;
              rangeMinBuilder_ = null;
            }

            return this;
          }
          /**
           * <pre>
           * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder getRangeMinBuilder() {
            
            onChanged();
            return getRangeMinFieldBuilder().getBuilder();
          }
          /**
           * <pre>
           * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getRangeMinOrBuilder() {
            if (rangeMinBuilder_ != null) {
              return rangeMinBuilder_.getMessageOrBuilder();
            } else {
              return rangeMin_ == null ?
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance() : rangeMin_;
            }
          }
          /**
           * <pre>
           * Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_min = 4;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> 
              getRangeMinFieldBuilder() {
            if (rangeMinBuilder_ == null) {
              rangeMinBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder>(
                      getRangeMin(),
                      getParentForChildren(),
                      isClean());
              rangeMin_ = null;
            }
            return rangeMinBuilder_;
          }

          private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute rangeMax_ = null;
          private com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> rangeMaxBuilder_;
          /**
           * <pre>
           * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
           */
          public boolean hasRangeMax() {
            return rangeMaxBuilder_ != null || rangeMax_ != null;
          }
          /**
           * <pre>
           * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getRangeMax() {
            if (rangeMaxBuilder_ == null) {
              return rangeMax_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance() : rangeMax_;
            } else {
              return rangeMaxBuilder_.getMessage();
            }
          }
          /**
           * <pre>
           * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
           */
          public Builder setRangeMax(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute value) {
            if (rangeMaxBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              rangeMax_ = value;
              onChanged();
            } else {
              rangeMaxBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <pre>
           * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
           */
          public Builder setRangeMax(
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder builderForValue) {
            if (rangeMaxBuilder_ == null) {
              rangeMax_ = builderForValue.build();
              onChanged();
            } else {
              rangeMaxBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <pre>
           * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
           */
          public Builder mergeRangeMax(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute value) {
            if (rangeMaxBuilder_ == null) {
              if (rangeMax_ != null) {
                rangeMax_ =
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.newBuilder(rangeMax_).mergeFrom(value).buildPartial();
              } else {
                rangeMax_ = value;
              }
              onChanged();
            } else {
              rangeMaxBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <pre>
           * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
           */
          public Builder clearRangeMax() {
            if (rangeMaxBuilder_ == null) {
              rangeMax_ = null;
              onChanged();
            } else {
              rangeMax_ = null;
              rangeMaxBuilder_ = null;
            }

            return this;
          }
          /**
           * <pre>
           * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder getRangeMaxBuilder() {
            
            onChanged();
            return getRangeMaxFieldBuilder().getBuilder();
          }
          /**
           * <pre>
           * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getRangeMaxOrBuilder() {
            if (rangeMaxBuilder_ != null) {
              return rangeMaxBuilder_.getMessageOrBuilder();
            } else {
              return rangeMax_ == null ?
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance() : rangeMax_;
            }
          }
          /**
           * <pre>
           * Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute range_max = 5;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> 
              getRangeMaxFieldBuilder() {
            if (rangeMaxBuilder_ == null) {
              rangeMaxBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder>(
                      getRangeMax(),
                      getParentForChildren(),
                      isClean());
              rangeMax_ = null;
            }
            return rangeMaxBuilder_;
          }

          private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> attributes_ =
            java.util.Collections.emptyList();
          private void ensureAttributesIsMutable() {
            if (!((bitField0_ & 0x00000010) == 0x00000010)) {
              attributes_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute>(attributes_);
              bitField0_ |= 0x00000010;
             }
          }

          private com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> attributesBuilder_;

          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> getAttributesList() {
            if (attributesBuilder_ == null) {
              return java.util.Collections.unmodifiableList(attributes_);
            } else {
              return attributesBuilder_.getMessageList();
            }
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public int getAttributesCount() {
            if (attributesBuilder_ == null) {
              return attributes_.size();
            } else {
              return attributesBuilder_.getCount();
            }
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute getAttributes(int index) {
            if (attributesBuilder_ == null) {
              return attributes_.get(index);
            } else {
              return attributesBuilder_.getMessage(index);
            }
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder setAttributes(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute value) {
            if (attributesBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureAttributesIsMutable();
              attributes_.set(index, value);
              onChanged();
            } else {
              attributesBuilder_.setMessage(index, value);
            }
            return this;
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder setAttributes(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder builderForValue) {
            if (attributesBuilder_ == null) {
              ensureAttributesIsMutable();
              attributes_.set(index, builderForValue.build());
              onChanged();
            } else {
              attributesBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addAttributes(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute value) {
            if (attributesBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureAttributesIsMutable();
              attributes_.add(value);
              onChanged();
            } else {
              attributesBuilder_.addMessage(value);
            }
            return this;
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addAttributes(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute value) {
            if (attributesBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureAttributesIsMutable();
              attributes_.add(index, value);
              onChanged();
            } else {
              attributesBuilder_.addMessage(index, value);
            }
            return this;
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addAttributes(
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder builderForValue) {
            if (attributesBuilder_ == null) {
              ensureAttributesIsMutable();
              attributes_.add(builderForValue.build());
              onChanged();
            } else {
              attributesBuilder_.addMessage(builderForValue.build());
            }
            return this;
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addAttributes(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder builderForValue) {
            if (attributesBuilder_ == null) {
              ensureAttributesIsMutable();
              attributes_.add(index, builderForValue.build());
              onChanged();
            } else {
              attributesBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addAllAttributes(
              java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute> values) {
            if (attributesBuilder_ == null) {
              ensureAttributesIsMutable();
              com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, attributes_);
              onChanged();
            } else {
              attributesBuilder_.addAllMessages(values);
            }
            return this;
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder clearAttributes() {
            if (attributesBuilder_ == null) {
              attributes_ = java.util.Collections.emptyList();
              bitField0_ = (bitField0_ & ~0x00000010);
              onChanged();
            } else {
              attributesBuilder_.clear();
            }
            return this;
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder removeAttributes(int index) {
            if (attributesBuilder_ == null) {
              ensureAttributesIsMutable();
              attributes_.remove(index);
              onChanged();
            } else {
              attributesBuilder_.remove(index);
            }
            return this;
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder getAttributesBuilder(
              int index) {
            return getAttributesFieldBuilder().getBuilder(index);
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder getAttributesOrBuilder(
              int index) {
            if (attributesBuilder_ == null) {
              return attributes_.get(index);  } else {
              return attributesBuilder_.getMessageOrBuilder(index);
            }
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> 
               getAttributesOrBuilderList() {
            if (attributesBuilder_ != null) {
              return attributesBuilder_.getMessageOrBuilderList();
            } else {
              return java.util.Collections.unmodifiableList(attributes_);
            }
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder addAttributesBuilder() {
            return getAttributesFieldBuilder().addBuilder(
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance());
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder addAttributesBuilder(
              int index) {
            return getAttributesFieldBuilder().addBuilder(
                index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.getDefaultInstance());
          }
          /**
           * <pre>
           * Description of the fields available for database queries.
           * For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute attributes = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder> 
               getAttributesBuilderList() {
            return getAttributesFieldBuilder().getBuilderList();
          }
          private com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder> 
              getAttributesFieldBuilder() {
            if (attributesBuilder_ == null) {
              attributesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Attribute.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.AttributeOrBuilder>(
                      attributes_,
                      ((bitField0_ & 0x00000010) == 0x00000010),
                      getParentForChildren(),
                      isClean());
              attributes_ = null;
            }
            return attributesBuilder_;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure)
        }

        // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure)
        private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure();
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Structure>
            PARSER = new com.google.protobuf.AbstractParser<Structure>() {
          @java.lang.Override
          public Structure parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Structure(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<Structure> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Structure> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface LayoutOrBuilder extends
          // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Layout type for an external dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type type = 1 [(.yandex.cloud.required) = true];</code>
         */
        int getTypeValue();
        /**
         * <pre>
         * Layout type for an external dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type type = 1 [(.yandex.cloud.required) = true];</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type getType();

        /**
         * <pre>
         * Number of cells in the cache. Rounded up to a power of two.
         * Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
         * </pre>
         *
         * <code>int64 size_in_cells = 2;</code>
         */
        long getSizeInCells();
      }
      /**
       * <pre>
       * Layout determining how to store the dictionary in memory.
       * </pre>
       *
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout}
       */
      public  static final class Layout extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout)
          LayoutOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use Layout.newBuilder() to construct.
        private Layout(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private Layout() {
          type_ = 0;
          sizeInCells_ = 0L;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private Layout(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  int rawValue = input.readEnum();

                  type_ = rawValue;
                  break;
                }
                case 16: {

                  sizeInCells_ = input.readInt64();
                  break;
                }
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Layout_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Layout_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Builder.class);
        }

        /**
         * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type}
         */
        public enum Type
            implements com.google.protobuf.ProtocolMessageEnum {
          /**
           * <code>TYPE_UNSPECIFIED = 0;</code>
           */
          TYPE_UNSPECIFIED(0),
          /**
           * <pre>
           * The entire dictionary is stored in memory in the form of flat arrays.
           * Available for all dictionary sources.
           * </pre>
           *
           * <code>FLAT = 1;</code>
           */
          FLAT(1),
          /**
           * <pre>
           * The entire dictionary is stored in memory in the form of a hash table.
           * Available for all dictionary sources.
           * </pre>
           *
           * <code>HASHED = 2;</code>
           */
          HASHED(2),
          /**
           * <pre>
           * Similar to HASHED, to be used with composite keys.
           * Available for all dictionary sources.
           * </pre>
           *
           * <code>COMPLEX_KEY_HASHED = 3;</code>
           */
          COMPLEX_KEY_HASHED(3),
          /**
           * <pre>
           * The entire dictionary is stored in memory in the form of a hash table,
           * with an ordered array of ranges and their corresponding values.
           * Available for all dictionary sources.
           * </pre>
           *
           * <code>RANGE_HASHED = 4;</code>
           */
          RANGE_HASHED(4),
          /**
           * <pre>
           * The dictionary is stored in a cache with a set number of cells.
           * Available for MySQL, ClickHouse and HTTP dictionary sources.
           * </pre>
           *
           * <code>CACHE = 5;</code>
           */
          CACHE(5),
          /**
           * <pre>
           * Similar to CACHE, to be used with composite keys.
           * Available for MySQL, ClickHouse and HTTP dictionary sources.
           * </pre>
           *
           * <code>COMPLEX_KEY_CACHE = 6;</code>
           */
          COMPLEX_KEY_CACHE(6),
          UNRECOGNIZED(-1),
          ;

          /**
           * <code>TYPE_UNSPECIFIED = 0;</code>
           */
          public static final int TYPE_UNSPECIFIED_VALUE = 0;
          /**
           * <pre>
           * The entire dictionary is stored in memory in the form of flat arrays.
           * Available for all dictionary sources.
           * </pre>
           *
           * <code>FLAT = 1;</code>
           */
          public static final int FLAT_VALUE = 1;
          /**
           * <pre>
           * The entire dictionary is stored in memory in the form of a hash table.
           * Available for all dictionary sources.
           * </pre>
           *
           * <code>HASHED = 2;</code>
           */
          public static final int HASHED_VALUE = 2;
          /**
           * <pre>
           * Similar to HASHED, to be used with composite keys.
           * Available for all dictionary sources.
           * </pre>
           *
           * <code>COMPLEX_KEY_HASHED = 3;</code>
           */
          public static final int COMPLEX_KEY_HASHED_VALUE = 3;
          /**
           * <pre>
           * The entire dictionary is stored in memory in the form of a hash table,
           * with an ordered array of ranges and their corresponding values.
           * Available for all dictionary sources.
           * </pre>
           *
           * <code>RANGE_HASHED = 4;</code>
           */
          public static final int RANGE_HASHED_VALUE = 4;
          /**
           * <pre>
           * The dictionary is stored in a cache with a set number of cells.
           * Available for MySQL, ClickHouse and HTTP dictionary sources.
           * </pre>
           *
           * <code>CACHE = 5;</code>
           */
          public static final int CACHE_VALUE = 5;
          /**
           * <pre>
           * Similar to CACHE, to be used with composite keys.
           * Available for MySQL, ClickHouse and HTTP dictionary sources.
           * </pre>
           *
           * <code>COMPLEX_KEY_CACHE = 6;</code>
           */
          public static final int COMPLEX_KEY_CACHE_VALUE = 6;


          public final int getNumber() {
            if (this == UNRECOGNIZED) {
              throw new java.lang.IllegalArgumentException(
                  "Can't get the number of an unknown enum value.");
            }
            return value;
          }

          /**
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @java.lang.Deprecated
          public static Type valueOf(int value) {
            return forNumber(value);
          }

          public static Type forNumber(int value) {
            switch (value) {
              case 0: return TYPE_UNSPECIFIED;
              case 1: return FLAT;
              case 2: return HASHED;
              case 3: return COMPLEX_KEY_HASHED;
              case 4: return RANGE_HASHED;
              case 5: return CACHE;
              case 6: return COMPLEX_KEY_CACHE;
              default: return null;
            }
          }

          public static com.google.protobuf.Internal.EnumLiteMap<Type>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final com.google.protobuf.Internal.EnumLiteMap<
              Type> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<Type>() {
                  public Type findValueByNumber(int number) {
                    return Type.forNumber(number);
                  }
                };

          public final com.google.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
          }
          public final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.getDescriptor().getEnumTypes().get(0);
          }

          private static final Type[] VALUES = values();

          public static Type valueOf(
              com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new java.lang.IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
              return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
          }

          private final int value;

          private Type(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type)
        }

        public static final int TYPE_FIELD_NUMBER = 1;
        private int type_;
        /**
         * <pre>
         * Layout type for an external dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type type = 1 [(.yandex.cloud.required) = true];</code>
         */
        public int getTypeValue() {
          return type_;
        }
        /**
         * <pre>
         * Layout type for an external dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type type = 1 [(.yandex.cloud.required) = true];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type getType() {
          @SuppressWarnings("deprecation")
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type result = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type.valueOf(type_);
          return result == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type.UNRECOGNIZED : result;
        }

        public static final int SIZE_IN_CELLS_FIELD_NUMBER = 2;
        private long sizeInCells_;
        /**
         * <pre>
         * Number of cells in the cache. Rounded up to a power of two.
         * Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
         * </pre>
         *
         * <code>int64 size_in_cells = 2;</code>
         */
        public long getSizeInCells() {
          return sizeInCells_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (type_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type.TYPE_UNSPECIFIED.getNumber()) {
            output.writeEnum(1, type_);
          }
          if (sizeInCells_ != 0L) {
            output.writeInt64(2, sizeInCells_);
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (type_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type.TYPE_UNSPECIFIED.getNumber()) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(1, type_);
          }
          if (sizeInCells_ != 0L) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt64Size(2, sizeInCells_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout)) {
            return super.equals(obj);
          }
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout) obj;

          boolean result = true;
          result = result && type_ == other.type_;
          result = result && (getSizeInCells()
              == other.getSizeInCells());
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + type_;
          hash = (37 * hash) + SIZE_IN_CELLS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getSizeInCells());
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * Layout determining how to store the dictionary in memory.
         * </pre>
         *
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout)
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.LayoutOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Layout_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Layout_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Builder.class);
          }

          // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            type_ = 0;

            sizeInCells_ = 0L;

            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Layout_descriptor;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout getDefaultInstanceForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.getDefaultInstance();
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout build() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout buildPartial() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout(this);
            result.type_ = type_;
            result.sizeInCells_ = sizeInCells_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return (Builder) super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout) {
              return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout other) {
            if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.getDefaultInstance()) return this;
            if (other.type_ != 0) {
              setTypeValue(other.getTypeValue());
            }
            if (other.getSizeInCells() != 0L) {
              setSizeInCells(other.getSizeInCells());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private int type_ = 0;
          /**
           * <pre>
           * Layout type for an external dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type type = 1 [(.yandex.cloud.required) = true];</code>
           */
          public int getTypeValue() {
            return type_;
          }
          /**
           * <pre>
           * Layout type for an external dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type type = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setTypeValue(int value) {
            type_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Layout type for an external dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type type = 1 [(.yandex.cloud.required) = true];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type getType() {
            @SuppressWarnings("deprecation")
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type result = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type.valueOf(type_);
            return result == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type.UNRECOGNIZED : result;
          }
          /**
           * <pre>
           * Layout type for an external dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type type = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setType(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Type value) {
            if (value == null) {
              throw new NullPointerException();
            }
            
            type_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Layout type for an external dictionary.
           * </pre>
           *
           * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type type = 1 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearType() {
            
            type_ = 0;
            onChanged();
            return this;
          }

          private long sizeInCells_ ;
          /**
           * <pre>
           * Number of cells in the cache. Rounded up to a power of two.
           * Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
           * </pre>
           *
           * <code>int64 size_in_cells = 2;</code>
           */
          public long getSizeInCells() {
            return sizeInCells_;
          }
          /**
           * <pre>
           * Number of cells in the cache. Rounded up to a power of two.
           * Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
           * </pre>
           *
           * <code>int64 size_in_cells = 2;</code>
           */
          public Builder setSizeInCells(long value) {
            
            sizeInCells_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Number of cells in the cache. Rounded up to a power of two.
           * Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
           * </pre>
           *
           * <code>int64 size_in_cells = 2;</code>
           */
          public Builder clearSizeInCells() {
            
            sizeInCells_ = 0L;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout)
        }

        // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout)
        private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout();
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Layout>
            PARSER = new com.google.protobuf.AbstractParser<Layout>() {
          @java.lang.Override
          public Layout parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Layout(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<Layout> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Layout> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface RangeOrBuilder extends
          // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Minimum dictionary lifetime.
         * </pre>
         *
         * <code>int64 min = 1;</code>
         */
        long getMin();

        /**
         * <pre>
         * Maximum dictionary lifetime.
         * </pre>
         *
         * <code>int64 max = 2;</code>
         */
        long getMax();
      }
      /**
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range}
       */
      public  static final class Range extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range)
          RangeOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use Range.newBuilder() to construct.
        private Range(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private Range() {
          min_ = 0L;
          max_ = 0L;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private Range(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {

                  min_ = input.readInt64();
                  break;
                }
                case 16: {

                  max_ = input.readInt64();
                  break;
                }
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Range_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Range_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.Builder.class);
        }

        public static final int MIN_FIELD_NUMBER = 1;
        private long min_;
        /**
         * <pre>
         * Minimum dictionary lifetime.
         * </pre>
         *
         * <code>int64 min = 1;</code>
         */
        public long getMin() {
          return min_;
        }

        public static final int MAX_FIELD_NUMBER = 2;
        private long max_;
        /**
         * <pre>
         * Maximum dictionary lifetime.
         * </pre>
         *
         * <code>int64 max = 2;</code>
         */
        public long getMax() {
          return max_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (min_ != 0L) {
            output.writeInt64(1, min_);
          }
          if (max_ != 0L) {
            output.writeInt64(2, max_);
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (min_ != 0L) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt64Size(1, min_);
          }
          if (max_ != 0L) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt64Size(2, max_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range)) {
            return super.equals(obj);
          }
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) obj;

          boolean result = true;
          result = result && (getMin()
              == other.getMin());
          result = result && (getMax()
              == other.getMax());
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + MIN_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getMin());
          hash = (37 * hash) + MAX_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getMax());
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range)
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.RangeOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Range_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Range_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.Builder.class);
          }

          // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            min_ = 0L;

            max_ = 0L;

            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Range_descriptor;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range getDefaultInstanceForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.getDefaultInstance();
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range build() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range buildPartial() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range(this);
            result.min_ = min_;
            result.max_ = max_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return (Builder) super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) {
              return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range other) {
            if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.getDefaultInstance()) return this;
            if (other.getMin() != 0L) {
              setMin(other.getMin());
            }
            if (other.getMax() != 0L) {
              setMax(other.getMax());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private long min_ ;
          /**
           * <pre>
           * Minimum dictionary lifetime.
           * </pre>
           *
           * <code>int64 min = 1;</code>
           */
          public long getMin() {
            return min_;
          }
          /**
           * <pre>
           * Minimum dictionary lifetime.
           * </pre>
           *
           * <code>int64 min = 1;</code>
           */
          public Builder setMin(long value) {
            
            min_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Minimum dictionary lifetime.
           * </pre>
           *
           * <code>int64 min = 1;</code>
           */
          public Builder clearMin() {
            
            min_ = 0L;
            onChanged();
            return this;
          }

          private long max_ ;
          /**
           * <pre>
           * Maximum dictionary lifetime.
           * </pre>
           *
           * <code>int64 max = 2;</code>
           */
          public long getMax() {
            return max_;
          }
          /**
           * <pre>
           * Maximum dictionary lifetime.
           * </pre>
           *
           * <code>int64 max = 2;</code>
           */
          public Builder setMax(long value) {
            
            max_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Maximum dictionary lifetime.
           * </pre>
           *
           * <code>int64 max = 2;</code>
           */
          public Builder clearMax() {
            
            max_ = 0L;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range)
        }

        // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range)
        private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range();
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Range>
            PARSER = new com.google.protobuf.AbstractParser<Range>() {
          @java.lang.Override
          public Range parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Range(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<Range> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Range> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int lifetimeCase_ = 0;
      private java.lang.Object lifetime_;
      public enum LifetimeCase
          implements com.google.protobuf.Internal.EnumLite {
        FIXED_LIFETIME(4),
        LIFETIME_RANGE(5),
        LIFETIME_NOT_SET(0);
        private final int value;
        private LifetimeCase(int value) {
          this.value = value;
        }
        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static LifetimeCase valueOf(int value) {
          return forNumber(value);
        }

        public static LifetimeCase forNumber(int value) {
          switch (value) {
            case 4: return FIXED_LIFETIME;
            case 5: return LIFETIME_RANGE;
            case 0: return LIFETIME_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public LifetimeCase
      getLifetimeCase() {
        return LifetimeCase.forNumber(
            lifetimeCase_);
      }

      private int sourceCase_ = 0;
      private java.lang.Object source_;
      public enum SourceCase
          implements com.google.protobuf.Internal.EnumLite {
        HTTP_SOURCE(6),
        MYSQL_SOURCE(7),
        CLICKHOUSE_SOURCE(8),
        MONGODB_SOURCE(9),
        POSTGRESQL_SOURCE(10),
        SOURCE_NOT_SET(0);
        private final int value;
        private SourceCase(int value) {
          this.value = value;
        }
        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static SourceCase valueOf(int value) {
          return forNumber(value);
        }

        public static SourceCase forNumber(int value) {
          switch (value) {
            case 6: return HTTP_SOURCE;
            case 7: return MYSQL_SOURCE;
            case 8: return CLICKHOUSE_SOURCE;
            case 9: return MONGODB_SOURCE;
            case 10: return POSTGRESQL_SOURCE;
            case 0: return SOURCE_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public SourceCase
      getSourceCase() {
        return SourceCase.forNumber(
            sourceCase_);
      }

      public static final int NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object name_;
      /**
       * <pre>
       * Name of the external dictionary.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * Name of the external dictionary.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int STRUCTURE_FIELD_NUMBER = 2;
      private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure structure_;
      /**
       * <pre>
       * Set of attributes for the external dictionary.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
       */
      public boolean hasStructure() {
        return structure_ != null;
      }
      /**
       * <pre>
       * Set of attributes for the external dictionary.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure getStructure() {
        return structure_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.getDefaultInstance() : structure_;
      }
      /**
       * <pre>
       * Set of attributes for the external dictionary.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.StructureOrBuilder getStructureOrBuilder() {
        return getStructure();
      }

      public static final int LAYOUT_FIELD_NUMBER = 3;
      private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout layout_;
      /**
       * <pre>
       * Layout for storing the dictionary in memory.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
       */
      public boolean hasLayout() {
        return layout_ != null;
      }
      /**
       * <pre>
       * Layout for storing the dictionary in memory.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout getLayout() {
        return layout_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.getDefaultInstance() : layout_;
      }
      /**
       * <pre>
       * Layout for storing the dictionary in memory.
       * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.LayoutOrBuilder getLayoutOrBuilder() {
        return getLayout();
      }

      public static final int FIXED_LIFETIME_FIELD_NUMBER = 4;
      /**
       * <pre>
       * Fixed interval between dictionary updates.
       * </pre>
       *
       * <code>int64 fixed_lifetime = 4;</code>
       */
      public long getFixedLifetime() {
        if (lifetimeCase_ == 4) {
          return (java.lang.Long) lifetime_;
        }
        return 0L;
      }

      public static final int LIFETIME_RANGE_FIELD_NUMBER = 5;
      /**
       * <pre>
       * Range of intervals between dictionary updates for ClickHouse to choose from.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
       */
      public boolean hasLifetimeRange() {
        return lifetimeCase_ == 5;
      }
      /**
       * <pre>
       * Range of intervals between dictionary updates for ClickHouse to choose from.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range getLifetimeRange() {
        if (lifetimeCase_ == 5) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) lifetime_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.getDefaultInstance();
      }
      /**
       * <pre>
       * Range of intervals between dictionary updates for ClickHouse to choose from.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.RangeOrBuilder getLifetimeRangeOrBuilder() {
        if (lifetimeCase_ == 5) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) lifetime_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.getDefaultInstance();
      }

      public static final int HTTP_SOURCE_FIELD_NUMBER = 6;
      /**
       * <pre>
       * HTTP source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
       */
      public boolean hasHttpSource() {
        return sourceCase_ == 6;
      }
      /**
       * <pre>
       * HTTP source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource getHttpSource() {
        if (sourceCase_ == 6) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) source_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.getDefaultInstance();
      }
      /**
       * <pre>
       * HTTP source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSourceOrBuilder getHttpSourceOrBuilder() {
        if (sourceCase_ == 6) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) source_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.getDefaultInstance();
      }

      public static final int MYSQL_SOURCE_FIELD_NUMBER = 7;
      /**
       * <pre>
       * MySQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
       */
      public boolean hasMysqlSource() {
        return sourceCase_ == 7;
      }
      /**
       * <pre>
       * MySQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource getMysqlSource() {
        if (sourceCase_ == 7) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) source_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.getDefaultInstance();
      }
      /**
       * <pre>
       * MySQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSourceOrBuilder getMysqlSourceOrBuilder() {
        if (sourceCase_ == 7) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) source_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.getDefaultInstance();
      }

      public static final int CLICKHOUSE_SOURCE_FIELD_NUMBER = 8;
      /**
       * <pre>
       * ClickHouse source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
       */
      public boolean hasClickhouseSource() {
        return sourceCase_ == 8;
      }
      /**
       * <pre>
       * ClickHouse source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource getClickhouseSource() {
        if (sourceCase_ == 8) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) source_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.getDefaultInstance();
      }
      /**
       * <pre>
       * ClickHouse source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSourceOrBuilder getClickhouseSourceOrBuilder() {
        if (sourceCase_ == 8) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) source_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.getDefaultInstance();
      }

      public static final int MONGODB_SOURCE_FIELD_NUMBER = 9;
      /**
       * <pre>
       * MongoDB source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
       */
      public boolean hasMongodbSource() {
        return sourceCase_ == 9;
      }
      /**
       * <pre>
       * MongoDB source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource getMongodbSource() {
        if (sourceCase_ == 9) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) source_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.getDefaultInstance();
      }
      /**
       * <pre>
       * MongoDB source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSourceOrBuilder getMongodbSourceOrBuilder() {
        if (sourceCase_ == 9) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) source_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.getDefaultInstance();
      }

      public static final int POSTGRESQL_SOURCE_FIELD_NUMBER = 10;
      /**
       * <pre>
       * PostgreSQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
       */
      public boolean hasPostgresqlSource() {
        return sourceCase_ == 10;
      }
      /**
       * <pre>
       * PostgreSQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource getPostgresqlSource() {
        if (sourceCase_ == 10) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) source_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.getDefaultInstance();
      }
      /**
       * <pre>
       * PostgreSQL source for the dictionary.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSourceOrBuilder getPostgresqlSourceOrBuilder() {
        if (sourceCase_ == 10) {
           return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) source_;
        }
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.getDefaultInstance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getNameBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (structure_ != null) {
          output.writeMessage(2, getStructure());
        }
        if (layout_ != null) {
          output.writeMessage(3, getLayout());
        }
        if (lifetimeCase_ == 4) {
          output.writeInt64(
              4, (long)((java.lang.Long) lifetime_));
        }
        if (lifetimeCase_ == 5) {
          output.writeMessage(5, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) lifetime_);
        }
        if (sourceCase_ == 6) {
          output.writeMessage(6, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) source_);
        }
        if (sourceCase_ == 7) {
          output.writeMessage(7, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) source_);
        }
        if (sourceCase_ == 8) {
          output.writeMessage(8, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) source_);
        }
        if (sourceCase_ == 9) {
          output.writeMessage(9, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) source_);
        }
        if (sourceCase_ == 10) {
          output.writeMessage(10, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) source_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getNameBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (structure_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getStructure());
        }
        if (layout_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getLayout());
        }
        if (lifetimeCase_ == 4) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(
                4, (long)((java.lang.Long) lifetime_));
        }
        if (lifetimeCase_ == 5) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) lifetime_);
        }
        if (sourceCase_ == 6) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) source_);
        }
        if (sourceCase_ == 7) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) source_);
        }
        if (sourceCase_ == 8) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) source_);
        }
        if (sourceCase_ == 9) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) source_);
        }
        if (sourceCase_ == 10) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) source_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary)) {
          return super.equals(obj);
        }
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary) obj;

        boolean result = true;
        result = result && getName()
            .equals(other.getName());
        result = result && (hasStructure() == other.hasStructure());
        if (hasStructure()) {
          result = result && getStructure()
              .equals(other.getStructure());
        }
        result = result && (hasLayout() == other.hasLayout());
        if (hasLayout()) {
          result = result && getLayout()
              .equals(other.getLayout());
        }
        result = result && getLifetimeCase().equals(
            other.getLifetimeCase());
        if (!result) return false;
        switch (lifetimeCase_) {
          case 4:
            result = result && (getFixedLifetime()
                == other.getFixedLifetime());
            break;
          case 5:
            result = result && getLifetimeRange()
                .equals(other.getLifetimeRange());
            break;
          case 0:
          default:
        }
        result = result && getSourceCase().equals(
            other.getSourceCase());
        if (!result) return false;
        switch (sourceCase_) {
          case 6:
            result = result && getHttpSource()
                .equals(other.getHttpSource());
            break;
          case 7:
            result = result && getMysqlSource()
                .equals(other.getMysqlSource());
            break;
          case 8:
            result = result && getClickhouseSource()
                .equals(other.getClickhouseSource());
            break;
          case 9:
            result = result && getMongodbSource()
                .equals(other.getMongodbSource());
            break;
          case 10:
            result = result && getPostgresqlSource()
                .equals(other.getPostgresqlSource());
            break;
          case 0:
          default:
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        if (hasStructure()) {
          hash = (37 * hash) + STRUCTURE_FIELD_NUMBER;
          hash = (53 * hash) + getStructure().hashCode();
        }
        if (hasLayout()) {
          hash = (37 * hash) + LAYOUT_FIELD_NUMBER;
          hash = (53 * hash) + getLayout().hashCode();
        }
        switch (lifetimeCase_) {
          case 4:
            hash = (37 * hash) + FIXED_LIFETIME_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getFixedLifetime());
            break;
          case 5:
            hash = (37 * hash) + LIFETIME_RANGE_FIELD_NUMBER;
            hash = (53 * hash) + getLifetimeRange().hashCode();
            break;
          case 0:
          default:
        }
        switch (sourceCase_) {
          case 6:
            hash = (37 * hash) + HTTP_SOURCE_FIELD_NUMBER;
            hash = (53 * hash) + getHttpSource().hashCode();
            break;
          case 7:
            hash = (37 * hash) + MYSQL_SOURCE_FIELD_NUMBER;
            hash = (53 * hash) + getMysqlSource().hashCode();
            break;
          case 8:
            hash = (37 * hash) + CLICKHOUSE_SOURCE_FIELD_NUMBER;
            hash = (53 * hash) + getClickhouseSource().hashCode();
            break;
          case 9:
            hash = (37 * hash) + MONGODB_SOURCE_FIELD_NUMBER;
            hash = (53 * hash) + getMongodbSource().hashCode();
            break;
          case 10:
            hash = (37 * hash) + POSTGRESQL_SOURCE_FIELD_NUMBER;
            hash = (53 * hash) + getPostgresqlSource().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary)
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionaryOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder.class);
        }

        // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          name_ = "";

          if (structureBuilder_ == null) {
            structure_ = null;
          } else {
            structure_ = null;
            structureBuilder_ = null;
          }
          if (layoutBuilder_ == null) {
            layout_ = null;
          } else {
            layout_ = null;
            layoutBuilder_ = null;
          }
          lifetimeCase_ = 0;
          lifetime_ = null;
          sourceCase_ = 0;
          source_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary getDefaultInstanceForType() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.getDefaultInstance();
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary build() {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary buildPartial() {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary(this);
          result.name_ = name_;
          if (structureBuilder_ == null) {
            result.structure_ = structure_;
          } else {
            result.structure_ = structureBuilder_.build();
          }
          if (layoutBuilder_ == null) {
            result.layout_ = layout_;
          } else {
            result.layout_ = layoutBuilder_.build();
          }
          if (lifetimeCase_ == 4) {
            result.lifetime_ = lifetime_;
          }
          if (lifetimeCase_ == 5) {
            if (lifetimeRangeBuilder_ == null) {
              result.lifetime_ = lifetime_;
            } else {
              result.lifetime_ = lifetimeRangeBuilder_.build();
            }
          }
          if (sourceCase_ == 6) {
            if (httpSourceBuilder_ == null) {
              result.source_ = source_;
            } else {
              result.source_ = httpSourceBuilder_.build();
            }
          }
          if (sourceCase_ == 7) {
            if (mysqlSourceBuilder_ == null) {
              result.source_ = source_;
            } else {
              result.source_ = mysqlSourceBuilder_.build();
            }
          }
          if (sourceCase_ == 8) {
            if (clickhouseSourceBuilder_ == null) {
              result.source_ = source_;
            } else {
              result.source_ = clickhouseSourceBuilder_.build();
            }
          }
          if (sourceCase_ == 9) {
            if (mongodbSourceBuilder_ == null) {
              result.source_ = source_;
            } else {
              result.source_ = mongodbSourceBuilder_.build();
            }
          }
          if (sourceCase_ == 10) {
            if (postgresqlSourceBuilder_ == null) {
              result.source_ = source_;
            } else {
              result.source_ = postgresqlSourceBuilder_.build();
            }
          }
          result.lifetimeCase_ = lifetimeCase_;
          result.sourceCase_ = sourceCase_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return (Builder) super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary) {
            return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary other) {
          if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.getDefaultInstance()) return this;
          if (!other.getName().isEmpty()) {
            name_ = other.name_;
            onChanged();
          }
          if (other.hasStructure()) {
            mergeStructure(other.getStructure());
          }
          if (other.hasLayout()) {
            mergeLayout(other.getLayout());
          }
          switch (other.getLifetimeCase()) {
            case FIXED_LIFETIME: {
              setFixedLifetime(other.getFixedLifetime());
              break;
            }
            case LIFETIME_RANGE: {
              mergeLifetimeRange(other.getLifetimeRange());
              break;
            }
            case LIFETIME_NOT_SET: {
              break;
            }
          }
          switch (other.getSourceCase()) {
            case HTTP_SOURCE: {
              mergeHttpSource(other.getHttpSource());
              break;
            }
            case MYSQL_SOURCE: {
              mergeMysqlSource(other.getMysqlSource());
              break;
            }
            case CLICKHOUSE_SOURCE: {
              mergeClickhouseSource(other.getClickhouseSource());
              break;
            }
            case MONGODB_SOURCE: {
              mergeMongodbSource(other.getMongodbSource());
              break;
            }
            case POSTGRESQL_SOURCE: {
              mergePostgresqlSource(other.getPostgresqlSource());
              break;
            }
            case SOURCE_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int lifetimeCase_ = 0;
        private java.lang.Object lifetime_;
        public LifetimeCase
            getLifetimeCase() {
          return LifetimeCase.forNumber(
              lifetimeCase_);
        }

        public Builder clearLifetime() {
          lifetimeCase_ = 0;
          lifetime_ = null;
          onChanged();
          return this;
        }

        private int sourceCase_ = 0;
        private java.lang.Object source_;
        public SourceCase
            getSourceCase() {
          return SourceCase.forNumber(
              sourceCase_);
        }

        public Builder clearSource() {
          sourceCase_ = 0;
          source_ = null;
          onChanged();
          return this;
        }


        private java.lang.Object name_ = "";
        /**
         * <pre>
         * Name of the external dictionary.
         * </pre>
         *
         * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Name of the external dictionary.
         * </pre>
         *
         * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Name of the external dictionary.
         * </pre>
         *
         * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Name of the external dictionary.
         * </pre>
         *
         * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
         */
        public Builder clearName() {
          
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Name of the external dictionary.
         * </pre>
         *
         * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          name_ = value;
          onChanged();
          return this;
        }

        private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure structure_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.StructureOrBuilder> structureBuilder_;
        /**
         * <pre>
         * Set of attributes for the external dictionary.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
         */
        public boolean hasStructure() {
          return structureBuilder_ != null || structure_ != null;
        }
        /**
         * <pre>
         * Set of attributes for the external dictionary.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure getStructure() {
          if (structureBuilder_ == null) {
            return structure_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.getDefaultInstance() : structure_;
          } else {
            return structureBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Set of attributes for the external dictionary.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
         */
        public Builder setStructure(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure value) {
          if (structureBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            structure_ = value;
            onChanged();
          } else {
            structureBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Set of attributes for the external dictionary.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
         */
        public Builder setStructure(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Builder builderForValue) {
          if (structureBuilder_ == null) {
            structure_ = builderForValue.build();
            onChanged();
          } else {
            structureBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Set of attributes for the external dictionary.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
         */
        public Builder mergeStructure(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure value) {
          if (structureBuilder_ == null) {
            if (structure_ != null) {
              structure_ =
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.newBuilder(structure_).mergeFrom(value).buildPartial();
            } else {
              structure_ = value;
            }
            onChanged();
          } else {
            structureBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Set of attributes for the external dictionary.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
         */
        public Builder clearStructure() {
          if (structureBuilder_ == null) {
            structure_ = null;
            onChanged();
          } else {
            structure_ = null;
            structureBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Set of attributes for the external dictionary.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Builder getStructureBuilder() {
          
          onChanged();
          return getStructureFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Set of attributes for the external dictionary.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.StructureOrBuilder getStructureOrBuilder() {
          if (structureBuilder_ != null) {
            return structureBuilder_.getMessageOrBuilder();
          } else {
            return structure_ == null ?
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.getDefaultInstance() : structure_;
          }
        }
        /**
         * <pre>
         * Set of attributes for the external dictionary.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure structure = 2 [(.yandex.cloud.required) = true];</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.StructureOrBuilder> 
            getStructureFieldBuilder() {
          if (structureBuilder_ == null) {
            structureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Structure.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.StructureOrBuilder>(
                    getStructure(),
                    getParentForChildren(),
                    isClean());
            structure_ = null;
          }
          return structureBuilder_;
        }

        private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout layout_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.LayoutOrBuilder> layoutBuilder_;
        /**
         * <pre>
         * Layout for storing the dictionary in memory.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
         */
        public boolean hasLayout() {
          return layoutBuilder_ != null || layout_ != null;
        }
        /**
         * <pre>
         * Layout for storing the dictionary in memory.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout getLayout() {
          if (layoutBuilder_ == null) {
            return layout_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.getDefaultInstance() : layout_;
          } else {
            return layoutBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Layout for storing the dictionary in memory.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
         */
        public Builder setLayout(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout value) {
          if (layoutBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            layout_ = value;
            onChanged();
          } else {
            layoutBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Layout for storing the dictionary in memory.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
         */
        public Builder setLayout(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Builder builderForValue) {
          if (layoutBuilder_ == null) {
            layout_ = builderForValue.build();
            onChanged();
          } else {
            layoutBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Layout for storing the dictionary in memory.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
         */
        public Builder mergeLayout(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout value) {
          if (layoutBuilder_ == null) {
            if (layout_ != null) {
              layout_ =
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.newBuilder(layout_).mergeFrom(value).buildPartial();
            } else {
              layout_ = value;
            }
            onChanged();
          } else {
            layoutBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Layout for storing the dictionary in memory.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
         */
        public Builder clearLayout() {
          if (layoutBuilder_ == null) {
            layout_ = null;
            onChanged();
          } else {
            layout_ = null;
            layoutBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Layout for storing the dictionary in memory.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Builder getLayoutBuilder() {
          
          onChanged();
          return getLayoutFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Layout for storing the dictionary in memory.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.LayoutOrBuilder getLayoutOrBuilder() {
          if (layoutBuilder_ != null) {
            return layoutBuilder_.getMessageOrBuilder();
          } else {
            return layout_ == null ?
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.getDefaultInstance() : layout_;
          }
        }
        /**
         * <pre>
         * Layout for storing the dictionary in memory.
         * For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout layout = 3 [(.yandex.cloud.required) = true];</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.LayoutOrBuilder> 
            getLayoutFieldBuilder() {
          if (layoutBuilder_ == null) {
            layoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Layout.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.LayoutOrBuilder>(
                    getLayout(),
                    getParentForChildren(),
                    isClean());
            layout_ = null;
          }
          return layoutBuilder_;
        }

        /**
         * <pre>
         * Fixed interval between dictionary updates.
         * </pre>
         *
         * <code>int64 fixed_lifetime = 4;</code>
         */
        public long getFixedLifetime() {
          if (lifetimeCase_ == 4) {
            return (java.lang.Long) lifetime_;
          }
          return 0L;
        }
        /**
         * <pre>
         * Fixed interval between dictionary updates.
         * </pre>
         *
         * <code>int64 fixed_lifetime = 4;</code>
         */
        public Builder setFixedLifetime(long value) {
          lifetimeCase_ = 4;
          lifetime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Fixed interval between dictionary updates.
         * </pre>
         *
         * <code>int64 fixed_lifetime = 4;</code>
         */
        public Builder clearFixedLifetime() {
          if (lifetimeCase_ == 4) {
            lifetimeCase_ = 0;
            lifetime_ = null;
            onChanged();
          }
          return this;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.RangeOrBuilder> lifetimeRangeBuilder_;
        /**
         * <pre>
         * Range of intervals between dictionary updates for ClickHouse to choose from.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
         */
        public boolean hasLifetimeRange() {
          return lifetimeCase_ == 5;
        }
        /**
         * <pre>
         * Range of intervals between dictionary updates for ClickHouse to choose from.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range getLifetimeRange() {
          if (lifetimeRangeBuilder_ == null) {
            if (lifetimeCase_ == 5) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) lifetime_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.getDefaultInstance();
          } else {
            if (lifetimeCase_ == 5) {
              return lifetimeRangeBuilder_.getMessage();
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * Range of intervals between dictionary updates for ClickHouse to choose from.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
         */
        public Builder setLifetimeRange(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range value) {
          if (lifetimeRangeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            lifetime_ = value;
            onChanged();
          } else {
            lifetimeRangeBuilder_.setMessage(value);
          }
          lifetimeCase_ = 5;
          return this;
        }
        /**
         * <pre>
         * Range of intervals between dictionary updates for ClickHouse to choose from.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
         */
        public Builder setLifetimeRange(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.Builder builderForValue) {
          if (lifetimeRangeBuilder_ == null) {
            lifetime_ = builderForValue.build();
            onChanged();
          } else {
            lifetimeRangeBuilder_.setMessage(builderForValue.build());
          }
          lifetimeCase_ = 5;
          return this;
        }
        /**
         * <pre>
         * Range of intervals between dictionary updates for ClickHouse to choose from.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
         */
        public Builder mergeLifetimeRange(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range value) {
          if (lifetimeRangeBuilder_ == null) {
            if (lifetimeCase_ == 5 &&
                lifetime_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.getDefaultInstance()) {
              lifetime_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.newBuilder((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) lifetime_)
                  .mergeFrom(value).buildPartial();
            } else {
              lifetime_ = value;
            }
            onChanged();
          } else {
            if (lifetimeCase_ == 5) {
              lifetimeRangeBuilder_.mergeFrom(value);
            }
            lifetimeRangeBuilder_.setMessage(value);
          }
          lifetimeCase_ = 5;
          return this;
        }
        /**
         * <pre>
         * Range of intervals between dictionary updates for ClickHouse to choose from.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
         */
        public Builder clearLifetimeRange() {
          if (lifetimeRangeBuilder_ == null) {
            if (lifetimeCase_ == 5) {
              lifetimeCase_ = 0;
              lifetime_ = null;
              onChanged();
            }
          } else {
            if (lifetimeCase_ == 5) {
              lifetimeCase_ = 0;
              lifetime_ = null;
            }
            lifetimeRangeBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * Range of intervals between dictionary updates for ClickHouse to choose from.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.Builder getLifetimeRangeBuilder() {
          return getLifetimeRangeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Range of intervals between dictionary updates for ClickHouse to choose from.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.RangeOrBuilder getLifetimeRangeOrBuilder() {
          if ((lifetimeCase_ == 5) && (lifetimeRangeBuilder_ != null)) {
            return lifetimeRangeBuilder_.getMessageOrBuilder();
          } else {
            if (lifetimeCase_ == 5) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) lifetime_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * Range of intervals between dictionary updates for ClickHouse to choose from.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range lifetime_range = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.RangeOrBuilder> 
            getLifetimeRangeFieldBuilder() {
          if (lifetimeRangeBuilder_ == null) {
            if (!(lifetimeCase_ == 5)) {
              lifetime_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.getDefaultInstance();
            }
            lifetimeRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.RangeOrBuilder>(
                    (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Range) lifetime_,
                    getParentForChildren(),
                    isClean());
            lifetime_ = null;
          }
          lifetimeCase_ = 5;
          onChanged();;
          return lifetimeRangeBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSourceOrBuilder> httpSourceBuilder_;
        /**
         * <pre>
         * HTTP source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
         */
        public boolean hasHttpSource() {
          return sourceCase_ == 6;
        }
        /**
         * <pre>
         * HTTP source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource getHttpSource() {
          if (httpSourceBuilder_ == null) {
            if (sourceCase_ == 6) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) source_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.getDefaultInstance();
          } else {
            if (sourceCase_ == 6) {
              return httpSourceBuilder_.getMessage();
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * HTTP source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
         */
        public Builder setHttpSource(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource value) {
          if (httpSourceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            source_ = value;
            onChanged();
          } else {
            httpSourceBuilder_.setMessage(value);
          }
          sourceCase_ = 6;
          return this;
        }
        /**
         * <pre>
         * HTTP source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
         */
        public Builder setHttpSource(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.Builder builderForValue) {
          if (httpSourceBuilder_ == null) {
            source_ = builderForValue.build();
            onChanged();
          } else {
            httpSourceBuilder_.setMessage(builderForValue.build());
          }
          sourceCase_ = 6;
          return this;
        }
        /**
         * <pre>
         * HTTP source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
         */
        public Builder mergeHttpSource(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource value) {
          if (httpSourceBuilder_ == null) {
            if (sourceCase_ == 6 &&
                source_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.getDefaultInstance()) {
              source_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.newBuilder((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) source_)
                  .mergeFrom(value).buildPartial();
            } else {
              source_ = value;
            }
            onChanged();
          } else {
            if (sourceCase_ == 6) {
              httpSourceBuilder_.mergeFrom(value);
            }
            httpSourceBuilder_.setMessage(value);
          }
          sourceCase_ = 6;
          return this;
        }
        /**
         * <pre>
         * HTTP source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
         */
        public Builder clearHttpSource() {
          if (httpSourceBuilder_ == null) {
            if (sourceCase_ == 6) {
              sourceCase_ = 0;
              source_ = null;
              onChanged();
            }
          } else {
            if (sourceCase_ == 6) {
              sourceCase_ = 0;
              source_ = null;
            }
            httpSourceBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * HTTP source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.Builder getHttpSourceBuilder() {
          return getHttpSourceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * HTTP source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSourceOrBuilder getHttpSourceOrBuilder() {
          if ((sourceCase_ == 6) && (httpSourceBuilder_ != null)) {
            return httpSourceBuilder_.getMessageOrBuilder();
          } else {
            if (sourceCase_ == 6) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) source_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * HTTP source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource http_source = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSourceOrBuilder> 
            getHttpSourceFieldBuilder() {
          if (httpSourceBuilder_ == null) {
            if (!(sourceCase_ == 6)) {
              source_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.getDefaultInstance();
            }
            httpSourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSourceOrBuilder>(
                    (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.HttpSource) source_,
                    getParentForChildren(),
                    isClean());
            source_ = null;
          }
          sourceCase_ = 6;
          onChanged();;
          return httpSourceBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSourceOrBuilder> mysqlSourceBuilder_;
        /**
         * <pre>
         * MySQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
         */
        public boolean hasMysqlSource() {
          return sourceCase_ == 7;
        }
        /**
         * <pre>
         * MySQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource getMysqlSource() {
          if (mysqlSourceBuilder_ == null) {
            if (sourceCase_ == 7) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) source_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.getDefaultInstance();
          } else {
            if (sourceCase_ == 7) {
              return mysqlSourceBuilder_.getMessage();
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * MySQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
         */
        public Builder setMysqlSource(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource value) {
          if (mysqlSourceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            source_ = value;
            onChanged();
          } else {
            mysqlSourceBuilder_.setMessage(value);
          }
          sourceCase_ = 7;
          return this;
        }
        /**
         * <pre>
         * MySQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
         */
        public Builder setMysqlSource(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Builder builderForValue) {
          if (mysqlSourceBuilder_ == null) {
            source_ = builderForValue.build();
            onChanged();
          } else {
            mysqlSourceBuilder_.setMessage(builderForValue.build());
          }
          sourceCase_ = 7;
          return this;
        }
        /**
         * <pre>
         * MySQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
         */
        public Builder mergeMysqlSource(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource value) {
          if (mysqlSourceBuilder_ == null) {
            if (sourceCase_ == 7 &&
                source_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.getDefaultInstance()) {
              source_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.newBuilder((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) source_)
                  .mergeFrom(value).buildPartial();
            } else {
              source_ = value;
            }
            onChanged();
          } else {
            if (sourceCase_ == 7) {
              mysqlSourceBuilder_.mergeFrom(value);
            }
            mysqlSourceBuilder_.setMessage(value);
          }
          sourceCase_ = 7;
          return this;
        }
        /**
         * <pre>
         * MySQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
         */
        public Builder clearMysqlSource() {
          if (mysqlSourceBuilder_ == null) {
            if (sourceCase_ == 7) {
              sourceCase_ = 0;
              source_ = null;
              onChanged();
            }
          } else {
            if (sourceCase_ == 7) {
              sourceCase_ = 0;
              source_ = null;
            }
            mysqlSourceBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * MySQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Builder getMysqlSourceBuilder() {
          return getMysqlSourceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * MySQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSourceOrBuilder getMysqlSourceOrBuilder() {
          if ((sourceCase_ == 7) && (mysqlSourceBuilder_ != null)) {
            return mysqlSourceBuilder_.getMessageOrBuilder();
          } else {
            if (sourceCase_ == 7) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) source_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * MySQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource mysql_source = 7;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSourceOrBuilder> 
            getMysqlSourceFieldBuilder() {
          if (mysqlSourceBuilder_ == null) {
            if (!(sourceCase_ == 7)) {
              source_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.getDefaultInstance();
            }
            mysqlSourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSourceOrBuilder>(
                    (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MysqlSource) source_,
                    getParentForChildren(),
                    isClean());
            source_ = null;
          }
          sourceCase_ = 7;
          onChanged();;
          return mysqlSourceBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSourceOrBuilder> clickhouseSourceBuilder_;
        /**
         * <pre>
         * ClickHouse source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
         */
        public boolean hasClickhouseSource() {
          return sourceCase_ == 8;
        }
        /**
         * <pre>
         * ClickHouse source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource getClickhouseSource() {
          if (clickhouseSourceBuilder_ == null) {
            if (sourceCase_ == 8) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) source_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.getDefaultInstance();
          } else {
            if (sourceCase_ == 8) {
              return clickhouseSourceBuilder_.getMessage();
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * ClickHouse source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
         */
        public Builder setClickhouseSource(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource value) {
          if (clickhouseSourceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            source_ = value;
            onChanged();
          } else {
            clickhouseSourceBuilder_.setMessage(value);
          }
          sourceCase_ = 8;
          return this;
        }
        /**
         * <pre>
         * ClickHouse source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
         */
        public Builder setClickhouseSource(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.Builder builderForValue) {
          if (clickhouseSourceBuilder_ == null) {
            source_ = builderForValue.build();
            onChanged();
          } else {
            clickhouseSourceBuilder_.setMessage(builderForValue.build());
          }
          sourceCase_ = 8;
          return this;
        }
        /**
         * <pre>
         * ClickHouse source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
         */
        public Builder mergeClickhouseSource(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource value) {
          if (clickhouseSourceBuilder_ == null) {
            if (sourceCase_ == 8 &&
                source_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.getDefaultInstance()) {
              source_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.newBuilder((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) source_)
                  .mergeFrom(value).buildPartial();
            } else {
              source_ = value;
            }
            onChanged();
          } else {
            if (sourceCase_ == 8) {
              clickhouseSourceBuilder_.mergeFrom(value);
            }
            clickhouseSourceBuilder_.setMessage(value);
          }
          sourceCase_ = 8;
          return this;
        }
        /**
         * <pre>
         * ClickHouse source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
         */
        public Builder clearClickhouseSource() {
          if (clickhouseSourceBuilder_ == null) {
            if (sourceCase_ == 8) {
              sourceCase_ = 0;
              source_ = null;
              onChanged();
            }
          } else {
            if (sourceCase_ == 8) {
              sourceCase_ = 0;
              source_ = null;
            }
            clickhouseSourceBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * ClickHouse source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.Builder getClickhouseSourceBuilder() {
          return getClickhouseSourceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ClickHouse source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSourceOrBuilder getClickhouseSourceOrBuilder() {
          if ((sourceCase_ == 8) && (clickhouseSourceBuilder_ != null)) {
            return clickhouseSourceBuilder_.getMessageOrBuilder();
          } else {
            if (sourceCase_ == 8) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) source_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * ClickHouse source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource clickhouse_source = 8;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSourceOrBuilder> 
            getClickhouseSourceFieldBuilder() {
          if (clickhouseSourceBuilder_ == null) {
            if (!(sourceCase_ == 8)) {
              source_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.getDefaultInstance();
            }
            clickhouseSourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSourceOrBuilder>(
                    (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.ClickhouseSource) source_,
                    getParentForChildren(),
                    isClean());
            source_ = null;
          }
          sourceCase_ = 8;
          onChanged();;
          return clickhouseSourceBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSourceOrBuilder> mongodbSourceBuilder_;
        /**
         * <pre>
         * MongoDB source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
         */
        public boolean hasMongodbSource() {
          return sourceCase_ == 9;
        }
        /**
         * <pre>
         * MongoDB source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource getMongodbSource() {
          if (mongodbSourceBuilder_ == null) {
            if (sourceCase_ == 9) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) source_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.getDefaultInstance();
          } else {
            if (sourceCase_ == 9) {
              return mongodbSourceBuilder_.getMessage();
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * MongoDB source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
         */
        public Builder setMongodbSource(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource value) {
          if (mongodbSourceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            source_ = value;
            onChanged();
          } else {
            mongodbSourceBuilder_.setMessage(value);
          }
          sourceCase_ = 9;
          return this;
        }
        /**
         * <pre>
         * MongoDB source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
         */
        public Builder setMongodbSource(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.Builder builderForValue) {
          if (mongodbSourceBuilder_ == null) {
            source_ = builderForValue.build();
            onChanged();
          } else {
            mongodbSourceBuilder_.setMessage(builderForValue.build());
          }
          sourceCase_ = 9;
          return this;
        }
        /**
         * <pre>
         * MongoDB source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
         */
        public Builder mergeMongodbSource(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource value) {
          if (mongodbSourceBuilder_ == null) {
            if (sourceCase_ == 9 &&
                source_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.getDefaultInstance()) {
              source_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.newBuilder((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) source_)
                  .mergeFrom(value).buildPartial();
            } else {
              source_ = value;
            }
            onChanged();
          } else {
            if (sourceCase_ == 9) {
              mongodbSourceBuilder_.mergeFrom(value);
            }
            mongodbSourceBuilder_.setMessage(value);
          }
          sourceCase_ = 9;
          return this;
        }
        /**
         * <pre>
         * MongoDB source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
         */
        public Builder clearMongodbSource() {
          if (mongodbSourceBuilder_ == null) {
            if (sourceCase_ == 9) {
              sourceCase_ = 0;
              source_ = null;
              onChanged();
            }
          } else {
            if (sourceCase_ == 9) {
              sourceCase_ = 0;
              source_ = null;
            }
            mongodbSourceBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * MongoDB source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.Builder getMongodbSourceBuilder() {
          return getMongodbSourceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * MongoDB source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSourceOrBuilder getMongodbSourceOrBuilder() {
          if ((sourceCase_ == 9) && (mongodbSourceBuilder_ != null)) {
            return mongodbSourceBuilder_.getMessageOrBuilder();
          } else {
            if (sourceCase_ == 9) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) source_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * MongoDB source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource mongodb_source = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSourceOrBuilder> 
            getMongodbSourceFieldBuilder() {
          if (mongodbSourceBuilder_ == null) {
            if (!(sourceCase_ == 9)) {
              source_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.getDefaultInstance();
            }
            mongodbSourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSourceOrBuilder>(
                    (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.MongodbSource) source_,
                    getParentForChildren(),
                    isClean());
            source_ = null;
          }
          sourceCase_ = 9;
          onChanged();;
          return mongodbSourceBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSourceOrBuilder> postgresqlSourceBuilder_;
        /**
         * <pre>
         * PostgreSQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
         */
        public boolean hasPostgresqlSource() {
          return sourceCase_ == 10;
        }
        /**
         * <pre>
         * PostgreSQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource getPostgresqlSource() {
          if (postgresqlSourceBuilder_ == null) {
            if (sourceCase_ == 10) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) source_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.getDefaultInstance();
          } else {
            if (sourceCase_ == 10) {
              return postgresqlSourceBuilder_.getMessage();
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * PostgreSQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
         */
        public Builder setPostgresqlSource(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource value) {
          if (postgresqlSourceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            source_ = value;
            onChanged();
          } else {
            postgresqlSourceBuilder_.setMessage(value);
          }
          sourceCase_ = 10;
          return this;
        }
        /**
         * <pre>
         * PostgreSQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
         */
        public Builder setPostgresqlSource(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.Builder builderForValue) {
          if (postgresqlSourceBuilder_ == null) {
            source_ = builderForValue.build();
            onChanged();
          } else {
            postgresqlSourceBuilder_.setMessage(builderForValue.build());
          }
          sourceCase_ = 10;
          return this;
        }
        /**
         * <pre>
         * PostgreSQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
         */
        public Builder mergePostgresqlSource(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource value) {
          if (postgresqlSourceBuilder_ == null) {
            if (sourceCase_ == 10 &&
                source_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.getDefaultInstance()) {
              source_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.newBuilder((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) source_)
                  .mergeFrom(value).buildPartial();
            } else {
              source_ = value;
            }
            onChanged();
          } else {
            if (sourceCase_ == 10) {
              postgresqlSourceBuilder_.mergeFrom(value);
            }
            postgresqlSourceBuilder_.setMessage(value);
          }
          sourceCase_ = 10;
          return this;
        }
        /**
         * <pre>
         * PostgreSQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
         */
        public Builder clearPostgresqlSource() {
          if (postgresqlSourceBuilder_ == null) {
            if (sourceCase_ == 10) {
              sourceCase_ = 0;
              source_ = null;
              onChanged();
            }
          } else {
            if (sourceCase_ == 10) {
              sourceCase_ = 0;
              source_ = null;
            }
            postgresqlSourceBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * PostgreSQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.Builder getPostgresqlSourceBuilder() {
          return getPostgresqlSourceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * PostgreSQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSourceOrBuilder getPostgresqlSourceOrBuilder() {
          if ((sourceCase_ == 10) && (postgresqlSourceBuilder_ != null)) {
            return postgresqlSourceBuilder_.getMessageOrBuilder();
          } else {
            if (sourceCase_ == 10) {
              return (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) source_;
            }
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * PostgreSQL source for the dictionary.
         * </pre>
         *
         * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource postgresql_source = 10;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSourceOrBuilder> 
            getPostgresqlSourceFieldBuilder() {
          if (postgresqlSourceBuilder_ == null) {
            if (!(sourceCase_ == 10)) {
              source_ = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.getDefaultInstance();
            }
            postgresqlSourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSourceOrBuilder>(
                    (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.PostgresqlSource) source_,
                    getParentForChildren(),
                    isClean());
            source_ = null;
          }
          sourceCase_ = 10;
          onChanged();;
          return postgresqlSourceBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary)
      }

      // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary)
      private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary();
      }

      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ExternalDictionary>
          PARSER = new com.google.protobuf.AbstractParser<ExternalDictionary>() {
        @java.lang.Override
        public ExternalDictionary parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ExternalDictionary(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ExternalDictionary> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ExternalDictionary> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface GraphiteRollupOrBuilder extends
        // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Name for the specified combination of settings for Graphite rollup.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
       */
      java.lang.String getName();
      /**
       * <pre>
       * Name for the specified combination of settings for Graphite rollup.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       * Pattern to use for the rollup.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
       */
      java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern> 
          getPatternsList();
      /**
       * <pre>
       * Pattern to use for the rollup.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern getPatterns(int index);
      /**
       * <pre>
       * Pattern to use for the rollup.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
       */
      int getPatternsCount();
      /**
       * <pre>
       * Pattern to use for the rollup.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
       */
      java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.PatternOrBuilder> 
          getPatternsOrBuilderList();
      /**
       * <pre>
       * Pattern to use for the rollup.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
       */
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.PatternOrBuilder getPatternsOrBuilder(
          int index);
    }
    /**
     * <pre>
     * Rollup settings for the GraphiteMergeTree table engine.
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup}
     */
    public  static final class GraphiteRollup extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup)
        GraphiteRollupOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use GraphiteRollup.newBuilder() to construct.
      private GraphiteRollup(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private GraphiteRollup() {
        name_ = "";
        patterns_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private GraphiteRollup(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                name_ = s;
                break;
              }
              case 18: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  patterns_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern>();
                  mutable_bitField0_ |= 0x00000002;
                }
                patterns_.add(
                    input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.parser(), extensionRegistry));
                break;
              }
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            patterns_ = java.util.Collections.unmodifiableList(patterns_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder.class);
      }

      public interface PatternOrBuilder extends
          // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Pattern for metric names.
         * </pre>
         *
         * <code>string regexp = 1;</code>
         */
        java.lang.String getRegexp();
        /**
         * <pre>
         * Pattern for metric names.
         * </pre>
         *
         * <code>string regexp = 1;</code>
         */
        com.google.protobuf.ByteString
            getRegexpBytes();

        /**
         * <pre>
         * Name of the aggregating function to apply to data of the age specified in [retention].
         * </pre>
         *
         * <code>string function = 2 [(.yandex.cloud.required) = true];</code>
         */
        java.lang.String getFunction();
        /**
         * <pre>
         * Name of the aggregating function to apply to data of the age specified in [retention].
         * </pre>
         *
         * <code>string function = 2 [(.yandex.cloud.required) = true];</code>
         */
        com.google.protobuf.ByteString
            getFunctionBytes();

        /**
         * <pre>
         * Age of data to use for thinning.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention> 
            getRetentionList();
        /**
         * <pre>
         * Age of data to use for thinning.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention getRetention(int index);
        /**
         * <pre>
         * Age of data to use for thinning.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        int getRetentionCount();
        /**
         * <pre>
         * Age of data to use for thinning.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.RetentionOrBuilder> 
            getRetentionOrBuilderList();
        /**
         * <pre>
         * Age of data to use for thinning.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.RetentionOrBuilder getRetentionOrBuilder(
            int index);
      }
      /**
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern}
       */
      public  static final class Pattern extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern)
          PatternOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use Pattern.newBuilder() to construct.
        private Pattern(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private Pattern() {
          regexp_ = "";
          function_ = "";
          retention_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private Pattern(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  java.lang.String s = input.readStringRequireUtf8();

                  regexp_ = s;
                  break;
                }
                case 18: {
                  java.lang.String s = input.readStringRequireUtf8();

                  function_ = s;
                  break;
                }
                case 26: {
                  if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    retention_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention>();
                    mutable_bitField0_ |= 0x00000004;
                  }
                  retention_.add(
                      input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.parser(), extensionRegistry));
                  break;
                }
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              retention_ = java.util.Collections.unmodifiableList(retention_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder.class);
        }

        public interface RetentionOrBuilder extends
            // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention)
            com.google.protobuf.MessageOrBuilder {

          /**
           * <pre>
           * Minimum age of the data in seconds.
           * </pre>
           *
           * <code>int64 age = 1 [(.yandex.cloud.value) = "&gt;0"];</code>
           */
          long getAge();

          /**
           * <pre>
           * Precision of determining the age of the data, in seconds.
           * </pre>
           *
           * <code>int64 precision = 2 [(.yandex.cloud.value) = "&gt;0"];</code>
           */
          long getPrecision();
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention}
         */
        public  static final class Retention extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention)
            RetentionOrBuilder {
        private static final long serialVersionUID = 0L;
          // Use Retention.newBuilder() to construct.
          private Retention(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
          }
          private Retention() {
            age_ = 0L;
            precision_ = 0L;
          }

          @java.lang.Override
          public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
            return this.unknownFields;
          }
          private Retention(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 8: {

                    age_ = input.readInt64();
                    break;
                  }
                  case 16: {

                    precision_ = input.readInt64();
                    break;
                  }
                  default: {
                    if (!parseUnknownFieldProto3(
                        input, unknownFields, extensionRegistry, tag)) {
                      done = true;
                    }
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(
                  e).setUnfinishedMessage(this);
            } finally {
              this.unknownFields = unknownFields.build();
              makeExtensionsImmutable();
            }
          }
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_Retention_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_Retention_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder.class);
          }

          public static final int AGE_FIELD_NUMBER = 1;
          private long age_;
          /**
           * <pre>
           * Minimum age of the data in seconds.
           * </pre>
           *
           * <code>int64 age = 1 [(.yandex.cloud.value) = "&gt;0"];</code>
           */
          public long getAge() {
            return age_;
          }

          public static final int PRECISION_FIELD_NUMBER = 2;
          private long precision_;
          /**
           * <pre>
           * Precision of determining the age of the data, in seconds.
           * </pre>
           *
           * <code>int64 precision = 2 [(.yandex.cloud.value) = "&gt;0"];</code>
           */
          public long getPrecision() {
            return precision_;
          }

          private byte memoizedIsInitialized = -1;
          @java.lang.Override
          public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
          }

          @java.lang.Override
          public void writeTo(com.google.protobuf.CodedOutputStream output)
                              throws java.io.IOException {
            if (age_ != 0L) {
              output.writeInt64(1, age_);
            }
            if (precision_ != 0L) {
              output.writeInt64(2, precision_);
            }
            unknownFields.writeTo(output);
          }

          @java.lang.Override
          public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (age_ != 0L) {
              size += com.google.protobuf.CodedOutputStream
                .computeInt64Size(1, age_);
            }
            if (precision_ != 0L) {
              size += com.google.protobuf.CodedOutputStream
                .computeInt64Size(2, precision_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
          }

          @java.lang.Override
          public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
             return true;
            }
            if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention)) {
              return super.equals(obj);
            }
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention) obj;

            boolean result = true;
            result = result && (getAge()
                == other.getAge());
            result = result && (getPrecision()
                == other.getPrecision());
            result = result && unknownFields.equals(other.unknownFields);
            return result;
          }

          @java.lang.Override
          public int hashCode() {
            if (memoizedHashCode != 0) {
              return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + AGE_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getAge());
            hash = (37 * hash) + PRECISION_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getPrecision());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
          }

          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseFrom(
              java.nio.ByteBuffer data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseFrom(
              byte[] data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }

          @java.lang.Override
          public Builder newBuilderForType() { return newBuilder(); }
          public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
          }
          public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
          }
          @java.lang.Override
          public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
          }

          @java.lang.Override
          protected Builder newBuilderForType(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
          }
          /**
           * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention}
           */
          public static final class Builder extends
              com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
              // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention)
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.RetentionOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_Retention_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
                internalGetFieldAccessorTable() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_Retention_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder.class);
            }

            // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.newBuilder()
            private Builder() {
              maybeForceBuilderInitialization();
            }

            private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
              super(parent);
              maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
              if (com.google.protobuf.GeneratedMessageV3
                      .alwaysUseFieldBuilders) {
              }
            }
            @java.lang.Override
            public Builder clear() {
              super.clear();
              age_ = 0L;

              precision_ = 0L;

              return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_Retention_descriptor;
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention getDefaultInstanceForType() {
              return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.getDefaultInstance();
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention build() {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention result = buildPartial();
              if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
              }
              return result;
            }

            @java.lang.Override
            public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention buildPartial() {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention(this);
              result.age_ = age_;
              result.precision_ = precision_;
              onBuilt();
              return result;
            }

            @java.lang.Override
            public Builder clone() {
              return (Builder) super.clone();
            }
            @java.lang.Override
            public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return (Builder) super.setField(field, value);
            }
            @java.lang.Override
            public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
              return (Builder) super.clearField(field);
            }
            @java.lang.Override
            public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
              return (Builder) super.clearOneof(oneof);
            }
            @java.lang.Override
            public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, java.lang.Object value) {
              return (Builder) super.setRepeatedField(field, index, value);
            }
            @java.lang.Override
            public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return (Builder) super.addRepeatedField(field, value);
            }
            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
              if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention) {
                return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention)other);
              } else {
                super.mergeFrom(other);
                return this;
              }
            }

            public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention other) {
              if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.getDefaultInstance()) return this;
              if (other.getAge() != 0L) {
                setAge(other.getAge());
              }
              if (other.getPrecision() != 0L) {
                setPrecision(other.getPrecision());
              }
              this.mergeUnknownFields(other.unknownFields);
              onChanged();
              return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
              return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention parsedMessage = null;
              try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention) e.getUnfinishedMessage();
                throw e.unwrapIOException();
              } finally {
                if (parsedMessage != null) {
                  mergeFrom(parsedMessage);
                }
              }
              return this;
            }

            private long age_ ;
            /**
             * <pre>
             * Minimum age of the data in seconds.
             * </pre>
             *
             * <code>int64 age = 1 [(.yandex.cloud.value) = "&gt;0"];</code>
             */
            public long getAge() {
              return age_;
            }
            /**
             * <pre>
             * Minimum age of the data in seconds.
             * </pre>
             *
             * <code>int64 age = 1 [(.yandex.cloud.value) = "&gt;0"];</code>
             */
            public Builder setAge(long value) {
              
              age_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Minimum age of the data in seconds.
             * </pre>
             *
             * <code>int64 age = 1 [(.yandex.cloud.value) = "&gt;0"];</code>
             */
            public Builder clearAge() {
              
              age_ = 0L;
              onChanged();
              return this;
            }

            private long precision_ ;
            /**
             * <pre>
             * Precision of determining the age of the data, in seconds.
             * </pre>
             *
             * <code>int64 precision = 2 [(.yandex.cloud.value) = "&gt;0"];</code>
             */
            public long getPrecision() {
              return precision_;
            }
            /**
             * <pre>
             * Precision of determining the age of the data, in seconds.
             * </pre>
             *
             * <code>int64 precision = 2 [(.yandex.cloud.value) = "&gt;0"];</code>
             */
            public Builder setPrecision(long value) {
              
              precision_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Precision of determining the age of the data, in seconds.
             * </pre>
             *
             * <code>int64 precision = 2 [(.yandex.cloud.value) = "&gt;0"];</code>
             */
            public Builder clearPrecision() {
              
              precision_ = 0L;
              onChanged();
              return this;
            }
            @java.lang.Override
            public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.setUnknownFieldsProto3(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention)
          }

          // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention)
          private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention DEFAULT_INSTANCE;
          static {
            DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention();
          }

          public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention getDefaultInstance() {
            return DEFAULT_INSTANCE;
          }

          private static final com.google.protobuf.Parser<Retention>
              PARSER = new com.google.protobuf.AbstractParser<Retention>() {
            @java.lang.Override
            public Retention parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              return new Retention(input, extensionRegistry);
            }
          };

          public static com.google.protobuf.Parser<Retention> parser() {
            return PARSER;
          }

          @java.lang.Override
          public com.google.protobuf.Parser<Retention> getParserForType() {
            return PARSER;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
          }

        }

        private int bitField0_;
        public static final int REGEXP_FIELD_NUMBER = 1;
        private volatile java.lang.Object regexp_;
        /**
         * <pre>
         * Pattern for metric names.
         * </pre>
         *
         * <code>string regexp = 1;</code>
         */
        public java.lang.String getRegexp() {
          java.lang.Object ref = regexp_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            regexp_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Pattern for metric names.
         * </pre>
         *
         * <code>string regexp = 1;</code>
         */
        public com.google.protobuf.ByteString
            getRegexpBytes() {
          java.lang.Object ref = regexp_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            regexp_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int FUNCTION_FIELD_NUMBER = 2;
        private volatile java.lang.Object function_;
        /**
         * <pre>
         * Name of the aggregating function to apply to data of the age specified in [retention].
         * </pre>
         *
         * <code>string function = 2 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getFunction() {
          java.lang.Object ref = function_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            function_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Name of the aggregating function to apply to data of the age specified in [retention].
         * </pre>
         *
         * <code>string function = 2 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getFunctionBytes() {
          java.lang.Object ref = function_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            function_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int RETENTION_FIELD_NUMBER = 3;
        private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention> retention_;
        /**
         * <pre>
         * Age of data to use for thinning.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention> getRetentionList() {
          return retention_;
        }
        /**
         * <pre>
         * Age of data to use for thinning.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.RetentionOrBuilder> 
            getRetentionOrBuilderList() {
          return retention_;
        }
        /**
         * <pre>
         * Age of data to use for thinning.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public int getRetentionCount() {
          return retention_.size();
        }
        /**
         * <pre>
         * Age of data to use for thinning.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention getRetention(int index) {
          return retention_.get(index);
        }
        /**
         * <pre>
         * Age of data to use for thinning.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.RetentionOrBuilder getRetentionOrBuilder(
            int index) {
          return retention_.get(index);
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!getRegexpBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, regexp_);
          }
          if (!getFunctionBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, function_);
          }
          for (int i = 0; i < retention_.size(); i++) {
            output.writeMessage(3, retention_.get(i));
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!getRegexpBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, regexp_);
          }
          if (!getFunctionBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, function_);
          }
          for (int i = 0; i < retention_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(3, retention_.get(i));
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern)) {
            return super.equals(obj);
          }
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern) obj;

          boolean result = true;
          result = result && getRegexp()
              .equals(other.getRegexp());
          result = result && getFunction()
              .equals(other.getFunction());
          result = result && getRetentionList()
              .equals(other.getRetentionList());
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + REGEXP_FIELD_NUMBER;
          hash = (53 * hash) + getRegexp().hashCode();
          hash = (37 * hash) + FUNCTION_FIELD_NUMBER;
          hash = (53 * hash) + getFunction().hashCode();
          if (getRetentionCount() > 0) {
            hash = (37 * hash) + RETENTION_FIELD_NUMBER;
            hash = (53 * hash) + getRetentionList().hashCode();
          }
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern)
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.PatternOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder.class);
          }

          // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
              getRetentionFieldBuilder();
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            regexp_ = "";

            function_ = "";

            if (retentionBuilder_ == null) {
              retention_ = java.util.Collections.emptyList();
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              retentionBuilder_.clear();
            }
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_descriptor;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern getDefaultInstanceForType() {
            return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.getDefaultInstance();
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern build() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern buildPartial() {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            result.regexp_ = regexp_;
            result.function_ = function_;
            if (retentionBuilder_ == null) {
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                retention_ = java.util.Collections.unmodifiableList(retention_);
                bitField0_ = (bitField0_ & ~0x00000004);
              }
              result.retention_ = retention_;
            } else {
              result.retention_ = retentionBuilder_.build();
            }
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return (Builder) super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern) {
              return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern other) {
            if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.getDefaultInstance()) return this;
            if (!other.getRegexp().isEmpty()) {
              regexp_ = other.regexp_;
              onChanged();
            }
            if (!other.getFunction().isEmpty()) {
              function_ = other.function_;
              onChanged();
            }
            if (retentionBuilder_ == null) {
              if (!other.retention_.isEmpty()) {
                if (retention_.isEmpty()) {
                  retention_ = other.retention_;
                  bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                  ensureRetentionIsMutable();
                  retention_.addAll(other.retention_);
                }
                onChanged();
              }
            } else {
              if (!other.retention_.isEmpty()) {
                if (retentionBuilder_.isEmpty()) {
                  retentionBuilder_.dispose();
                  retentionBuilder_ = null;
                  retention_ = other.retention_;
                  bitField0_ = (bitField0_ & ~0x00000004);
                  retentionBuilder_ = 
                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                       getRetentionFieldBuilder() : null;
                } else {
                  retentionBuilder_.addAllMessages(other.retention_);
                }
              }
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          private java.lang.Object regexp_ = "";
          /**
           * <pre>
           * Pattern for metric names.
           * </pre>
           *
           * <code>string regexp = 1;</code>
           */
          public java.lang.String getRegexp() {
            java.lang.Object ref = regexp_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              regexp_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Pattern for metric names.
           * </pre>
           *
           * <code>string regexp = 1;</code>
           */
          public com.google.protobuf.ByteString
              getRegexpBytes() {
            java.lang.Object ref = regexp_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              regexp_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Pattern for metric names.
           * </pre>
           *
           * <code>string regexp = 1;</code>
           */
          public Builder setRegexp(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            regexp_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Pattern for metric names.
           * </pre>
           *
           * <code>string regexp = 1;</code>
           */
          public Builder clearRegexp() {
            
            regexp_ = getDefaultInstance().getRegexp();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Pattern for metric names.
           * </pre>
           *
           * <code>string regexp = 1;</code>
           */
          public Builder setRegexpBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            regexp_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object function_ = "";
          /**
           * <pre>
           * Name of the aggregating function to apply to data of the age specified in [retention].
           * </pre>
           *
           * <code>string function = 2 [(.yandex.cloud.required) = true];</code>
           */
          public java.lang.String getFunction() {
            java.lang.Object ref = function_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              function_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Name of the aggregating function to apply to data of the age specified in [retention].
           * </pre>
           *
           * <code>string function = 2 [(.yandex.cloud.required) = true];</code>
           */
          public com.google.protobuf.ByteString
              getFunctionBytes() {
            java.lang.Object ref = function_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              function_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Name of the aggregating function to apply to data of the age specified in [retention].
           * </pre>
           *
           * <code>string function = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setFunction(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            function_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the aggregating function to apply to data of the age specified in [retention].
           * </pre>
           *
           * <code>string function = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder clearFunction() {
            
            function_ = getDefaultInstance().getFunction();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Name of the aggregating function to apply to data of the age specified in [retention].
           * </pre>
           *
           * <code>string function = 2 [(.yandex.cloud.required) = true];</code>
           */
          public Builder setFunctionBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            function_ = value;
            onChanged();
            return this;
          }

          private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention> retention_ =
            java.util.Collections.emptyList();
          private void ensureRetentionIsMutable() {
            if (!((bitField0_ & 0x00000004) == 0x00000004)) {
              retention_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention>(retention_);
              bitField0_ |= 0x00000004;
             }
          }

          private com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.RetentionOrBuilder> retentionBuilder_;

          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention> getRetentionList() {
            if (retentionBuilder_ == null) {
              return java.util.Collections.unmodifiableList(retention_);
            } else {
              return retentionBuilder_.getMessageList();
            }
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public int getRetentionCount() {
            if (retentionBuilder_ == null) {
              return retention_.size();
            } else {
              return retentionBuilder_.getCount();
            }
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention getRetention(int index) {
            if (retentionBuilder_ == null) {
              return retention_.get(index);
            } else {
              return retentionBuilder_.getMessage(index);
            }
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder setRetention(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention value) {
            if (retentionBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureRetentionIsMutable();
              retention_.set(index, value);
              onChanged();
            } else {
              retentionBuilder_.setMessage(index, value);
            }
            return this;
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder setRetention(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder builderForValue) {
            if (retentionBuilder_ == null) {
              ensureRetentionIsMutable();
              retention_.set(index, builderForValue.build());
              onChanged();
            } else {
              retentionBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addRetention(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention value) {
            if (retentionBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureRetentionIsMutable();
              retention_.add(value);
              onChanged();
            } else {
              retentionBuilder_.addMessage(value);
            }
            return this;
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addRetention(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention value) {
            if (retentionBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureRetentionIsMutable();
              retention_.add(index, value);
              onChanged();
            } else {
              retentionBuilder_.addMessage(index, value);
            }
            return this;
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addRetention(
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder builderForValue) {
            if (retentionBuilder_ == null) {
              ensureRetentionIsMutable();
              retention_.add(builderForValue.build());
              onChanged();
            } else {
              retentionBuilder_.addMessage(builderForValue.build());
            }
            return this;
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addRetention(
              int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder builderForValue) {
            if (retentionBuilder_ == null) {
              ensureRetentionIsMutable();
              retention_.add(index, builderForValue.build());
              onChanged();
            } else {
              retentionBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder addAllRetention(
              java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention> values) {
            if (retentionBuilder_ == null) {
              ensureRetentionIsMutable();
              com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, retention_);
              onChanged();
            } else {
              retentionBuilder_.addAllMessages(values);
            }
            return this;
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder clearRetention() {
            if (retentionBuilder_ == null) {
              retention_ = java.util.Collections.emptyList();
              bitField0_ = (bitField0_ & ~0x00000004);
              onChanged();
            } else {
              retentionBuilder_.clear();
            }
            return this;
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public Builder removeRetention(int index) {
            if (retentionBuilder_ == null) {
              ensureRetentionIsMutable();
              retention_.remove(index);
              onChanged();
            } else {
              retentionBuilder_.remove(index);
            }
            return this;
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder getRetentionBuilder(
              int index) {
            return getRetentionFieldBuilder().getBuilder(index);
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.RetentionOrBuilder getRetentionOrBuilder(
              int index) {
            if (retentionBuilder_ == null) {
              return retention_.get(index);  } else {
              return retentionBuilder_.getMessageOrBuilder(index);
            }
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.RetentionOrBuilder> 
               getRetentionOrBuilderList() {
            if (retentionBuilder_ != null) {
              return retentionBuilder_.getMessageOrBuilderList();
            } else {
              return java.util.Collections.unmodifiableList(retention_);
            }
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder addRetentionBuilder() {
            return getRetentionFieldBuilder().addBuilder(
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.getDefaultInstance());
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder addRetentionBuilder(
              int index) {
            return getRetentionFieldBuilder().addBuilder(
                index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.getDefaultInstance());
          }
          /**
           * <pre>
           * Age of data to use for thinning.
           * </pre>
           *
           * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention retention = 3 [(.yandex.cloud.size) = "&gt;0"];</code>
           */
          public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder> 
               getRetentionBuilderList() {
            return getRetentionFieldBuilder().getBuilderList();
          }
          private com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.RetentionOrBuilder> 
              getRetentionFieldBuilder() {
            if (retentionBuilder_ == null) {
              retentionBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Retention.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.RetentionOrBuilder>(
                      retention_,
                      ((bitField0_ & 0x00000004) == 0x00000004),
                      getParentForChildren(),
                      isClean());
              retention_ = null;
            }
            return retentionBuilder_;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern)
        }

        // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern)
        private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern();
        }

        public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Pattern>
            PARSER = new com.google.protobuf.AbstractParser<Pattern>() {
          @java.lang.Override
          public Pattern parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Pattern(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<Pattern> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Pattern> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object name_;
      /**
       * <pre>
       * Name for the specified combination of settings for Graphite rollup.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * Name for the specified combination of settings for Graphite rollup.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int PATTERNS_FIELD_NUMBER = 2;
      private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern> patterns_;
      /**
       * <pre>
       * Pattern to use for the rollup.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern> getPatternsList() {
        return patterns_;
      }
      /**
       * <pre>
       * Pattern to use for the rollup.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
       */
      public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.PatternOrBuilder> 
          getPatternsOrBuilderList() {
        return patterns_;
      }
      /**
       * <pre>
       * Pattern to use for the rollup.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
       */
      public int getPatternsCount() {
        return patterns_.size();
      }
      /**
       * <pre>
       * Pattern to use for the rollup.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern getPatterns(int index) {
        return patterns_.get(index);
      }
      /**
       * <pre>
       * Pattern to use for the rollup.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.PatternOrBuilder getPatternsOrBuilder(
          int index) {
        return patterns_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getNameBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        for (int i = 0; i < patterns_.size(); i++) {
          output.writeMessage(2, patterns_.get(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getNameBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        for (int i = 0; i < patterns_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, patterns_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup)) {
          return super.equals(obj);
        }
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup) obj;

        boolean result = true;
        result = result && getName()
            .equals(other.getName());
        result = result && getPatternsList()
            .equals(other.getPatternsList());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        if (getPatternsCount() > 0) {
          hash = (37 * hash) + PATTERNS_FIELD_NUMBER;
          hash = (53 * hash) + getPatternsList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Rollup settings for the GraphiteMergeTree table engine.
       * </pre>
       *
       * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup)
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollupOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder.class);
        }

        // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getPatternsFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          name_ = "";

          if (patternsBuilder_ == null) {
            patterns_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            patternsBuilder_.clear();
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_descriptor;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup getDefaultInstanceForType() {
          return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.getDefaultInstance();
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup build() {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup buildPartial() {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.name_ = name_;
          if (patternsBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              patterns_ = java.util.Collections.unmodifiableList(patterns_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.patterns_ = patterns_;
          } else {
            result.patterns_ = patternsBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return (Builder) super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup) {
            return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup other) {
          if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.getDefaultInstance()) return this;
          if (!other.getName().isEmpty()) {
            name_ = other.name_;
            onChanged();
          }
          if (patternsBuilder_ == null) {
            if (!other.patterns_.isEmpty()) {
              if (patterns_.isEmpty()) {
                patterns_ = other.patterns_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensurePatternsIsMutable();
                patterns_.addAll(other.patterns_);
              }
              onChanged();
            }
          } else {
            if (!other.patterns_.isEmpty()) {
              if (patternsBuilder_.isEmpty()) {
                patternsBuilder_.dispose();
                patternsBuilder_ = null;
                patterns_ = other.patterns_;
                bitField0_ = (bitField0_ & ~0x00000002);
                patternsBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getPatternsFieldBuilder() : null;
              } else {
                patternsBuilder_.addAllMessages(other.patterns_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object name_ = "";
        /**
         * <pre>
         * Name for the specified combination of settings for Graphite rollup.
         * </pre>
         *
         * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Name for the specified combination of settings for Graphite rollup.
         * </pre>
         *
         * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Name for the specified combination of settings for Graphite rollup.
         * </pre>
         *
         * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Name for the specified combination of settings for Graphite rollup.
         * </pre>
         *
         * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
         */
        public Builder clearName() {
          
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Name for the specified combination of settings for Graphite rollup.
         * </pre>
         *
         * <code>string name = 1 [(.yandex.cloud.required) = true];</code>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          name_ = value;
          onChanged();
          return this;
        }

        private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern> patterns_ =
          java.util.Collections.emptyList();
        private void ensurePatternsIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            patterns_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern>(patterns_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.PatternOrBuilder> patternsBuilder_;

        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern> getPatternsList() {
          if (patternsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(patterns_);
          } else {
            return patternsBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public int getPatternsCount() {
          if (patternsBuilder_ == null) {
            return patterns_.size();
          } else {
            return patternsBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern getPatterns(int index) {
          if (patternsBuilder_ == null) {
            return patterns_.get(index);
          } else {
            return patternsBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public Builder setPatterns(
            int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern value) {
          if (patternsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePatternsIsMutable();
            patterns_.set(index, value);
            onChanged();
          } else {
            patternsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public Builder setPatterns(
            int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder builderForValue) {
          if (patternsBuilder_ == null) {
            ensurePatternsIsMutable();
            patterns_.set(index, builderForValue.build());
            onChanged();
          } else {
            patternsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public Builder addPatterns(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern value) {
          if (patternsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePatternsIsMutable();
            patterns_.add(value);
            onChanged();
          } else {
            patternsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public Builder addPatterns(
            int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern value) {
          if (patternsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePatternsIsMutable();
            patterns_.add(index, value);
            onChanged();
          } else {
            patternsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public Builder addPatterns(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder builderForValue) {
          if (patternsBuilder_ == null) {
            ensurePatternsIsMutable();
            patterns_.add(builderForValue.build());
            onChanged();
          } else {
            patternsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public Builder addPatterns(
            int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder builderForValue) {
          if (patternsBuilder_ == null) {
            ensurePatternsIsMutable();
            patterns_.add(index, builderForValue.build());
            onChanged();
          } else {
            patternsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public Builder addAllPatterns(
            java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern> values) {
          if (patternsBuilder_ == null) {
            ensurePatternsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, patterns_);
            onChanged();
          } else {
            patternsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public Builder clearPatterns() {
          if (patternsBuilder_ == null) {
            patterns_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            patternsBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public Builder removePatterns(int index) {
          if (patternsBuilder_ == null) {
            ensurePatternsIsMutable();
            patterns_.remove(index);
            onChanged();
          } else {
            patternsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder getPatternsBuilder(
            int index) {
          return getPatternsFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.PatternOrBuilder getPatternsOrBuilder(
            int index) {
          if (patternsBuilder_ == null) {
            return patterns_.get(index);  } else {
            return patternsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.PatternOrBuilder> 
             getPatternsOrBuilderList() {
          if (patternsBuilder_ != null) {
            return patternsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(patterns_);
          }
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder addPatternsBuilder() {
          return getPatternsFieldBuilder().addBuilder(
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.getDefaultInstance());
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder addPatternsBuilder(
            int index) {
          return getPatternsFieldBuilder().addBuilder(
              index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.getDefaultInstance());
        }
        /**
         * <pre>
         * Pattern to use for the rollup.
         * </pre>
         *
         * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern patterns = 2 [(.yandex.cloud.size) = "&gt;0"];</code>
         */
        public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder> 
             getPatternsBuilderList() {
          return getPatternsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.PatternOrBuilder> 
            getPatternsFieldBuilder() {
          if (patternsBuilder_ == null) {
            patternsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Pattern.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.PatternOrBuilder>(
                    patterns_,
                    ((bitField0_ & 0x00000002) == 0x00000002),
                    getParentForChildren(),
                    isClean());
            patterns_ = null;
          }
          return patternsBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup)
      }

      // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup)
      private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup();
      }

      public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<GraphiteRollup>
          PARSER = new com.google.protobuf.AbstractParser<GraphiteRollup>() {
        @java.lang.Override
        public GraphiteRollup parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new GraphiteRollup(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<GraphiteRollup> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<GraphiteRollup> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int LOG_LEVEL_FIELD_NUMBER = 1;
    private int logLevel_;
    /**
     * <pre>
     * Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel log_level = 1;</code>
     */
    public int getLogLevelValue() {
      return logLevel_;
    }
    /**
     * <pre>
     * Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel log_level = 1;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel getLogLevel() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel result = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel.valueOf(logLevel_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel.UNRECOGNIZED : result;
    }

    public static final int MERGE_TREE_FIELD_NUMBER = 2;
    private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree mergeTree_;
    /**
     * <pre>
     * Settings for the MergeTree engine.
     * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
     */
    public boolean hasMergeTree() {
      return mergeTree_ != null;
    }
    /**
     * <pre>
     * Settings for the MergeTree engine.
     * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree getMergeTree() {
      return mergeTree_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.getDefaultInstance() : mergeTree_;
    }
    /**
     * <pre>
     * Settings for the MergeTree engine.
     * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTreeOrBuilder getMergeTreeOrBuilder() {
      return getMergeTree();
    }

    public static final int COMPRESSION_FIELD_NUMBER = 3;
    private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression> compression_;
    /**
     * <pre>
     * Compression settings for the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
     */
    public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression> getCompressionList() {
      return compression_;
    }
    /**
     * <pre>
     * Compression settings for the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
     */
    public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.CompressionOrBuilder> 
        getCompressionOrBuilderList() {
      return compression_;
    }
    /**
     * <pre>
     * Compression settings for the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
     */
    public int getCompressionCount() {
      return compression_.size();
    }
    /**
     * <pre>
     * Compression settings for the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression getCompression(int index) {
      return compression_.get(index);
    }
    /**
     * <pre>
     * Compression settings for the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.CompressionOrBuilder getCompressionOrBuilder(
        int index) {
      return compression_.get(index);
    }

    public static final int DICTIONARIES_FIELD_NUMBER = 4;
    private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary> dictionaries_;
    /**
     * <pre>
     * Configuration of external dictionaries to be used by the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
     */
    public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary> getDictionariesList() {
      return dictionaries_;
    }
    /**
     * <pre>
     * Configuration of external dictionaries to be used by the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
     */
    public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionaryOrBuilder> 
        getDictionariesOrBuilderList() {
      return dictionaries_;
    }
    /**
     * <pre>
     * Configuration of external dictionaries to be used by the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
     */
    public int getDictionariesCount() {
      return dictionaries_.size();
    }
    /**
     * <pre>
     * Configuration of external dictionaries to be used by the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary getDictionaries(int index) {
      return dictionaries_.get(index);
    }
    /**
     * <pre>
     * Configuration of external dictionaries to be used by the ClickHouse cluster.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionaryOrBuilder getDictionariesOrBuilder(
        int index) {
      return dictionaries_.get(index);
    }

    public static final int GRAPHITE_ROLLUP_FIELD_NUMBER = 5;
    private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup> graphiteRollup_;
    /**
     * <pre>
     * Settings for thinning Graphite data.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
     */
    public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup> getGraphiteRollupList() {
      return graphiteRollup_;
    }
    /**
     * <pre>
     * Settings for thinning Graphite data.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
     */
    public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollupOrBuilder> 
        getGraphiteRollupOrBuilderList() {
      return graphiteRollup_;
    }
    /**
     * <pre>
     * Settings for thinning Graphite data.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
     */
    public int getGraphiteRollupCount() {
      return graphiteRollup_.size();
    }
    /**
     * <pre>
     * Settings for thinning Graphite data.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup getGraphiteRollup(int index) {
      return graphiteRollup_.get(index);
    }
    /**
     * <pre>
     * Settings for thinning Graphite data.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollupOrBuilder getGraphiteRollupOrBuilder(
        int index) {
      return graphiteRollup_.get(index);
    }

    public static final int MAX_CONNECTIONS_FIELD_NUMBER = 6;
    private com.google.protobuf.Int64Value maxConnections_;
    /**
     * <pre>
     * Maximum number of inbound connections.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    public boolean hasMaxConnections() {
      return maxConnections_ != null;
    }
    /**
     * <pre>
     * Maximum number of inbound connections.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    public com.google.protobuf.Int64Value getMaxConnections() {
      return maxConnections_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
    }
    /**
     * <pre>
     * Maximum number of inbound connections.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder() {
      return getMaxConnections();
    }

    public static final int MAX_CONCURRENT_QUERIES_FIELD_NUMBER = 7;
    private com.google.protobuf.Int64Value maxConcurrentQueries_;
    /**
     * <pre>
     * Maximum number of simultaneously processed requests.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    public boolean hasMaxConcurrentQueries() {
      return maxConcurrentQueries_ != null;
    }
    /**
     * <pre>
     * Maximum number of simultaneously processed requests.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    public com.google.protobuf.Int64Value getMaxConcurrentQueries() {
      return maxConcurrentQueries_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConcurrentQueries_;
    }
    /**
     * <pre>
     * Maximum number of simultaneously processed requests.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getMaxConcurrentQueriesOrBuilder() {
      return getMaxConcurrentQueries();
    }

    public static final int KEEP_ALIVE_TIMEOUT_FIELD_NUMBER = 8;
    private com.google.protobuf.Int64Value keepAliveTimeout_;
    /**
     * <pre>
     * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
     */
    public boolean hasKeepAliveTimeout() {
      return keepAliveTimeout_ != null;
    }
    /**
     * <pre>
     * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
     */
    public com.google.protobuf.Int64Value getKeepAliveTimeout() {
      return keepAliveTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : keepAliveTimeout_;
    }
    /**
     * <pre>
     * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getKeepAliveTimeoutOrBuilder() {
      return getKeepAliveTimeout();
    }

    public static final int UNCOMPRESSED_CACHE_SIZE_FIELD_NUMBER = 9;
    private com.google.protobuf.Int64Value uncompressedCacheSize_;
    /**
     * <pre>
     * Cache size (in bytes) for uncompressed data used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
     */
    public boolean hasUncompressedCacheSize() {
      return uncompressedCacheSize_ != null;
    }
    /**
     * <pre>
     * Cache size (in bytes) for uncompressed data used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
     */
    public com.google.protobuf.Int64Value getUncompressedCacheSize() {
      return uncompressedCacheSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : uncompressedCacheSize_;
    }
    /**
     * <pre>
     * Cache size (in bytes) for uncompressed data used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getUncompressedCacheSizeOrBuilder() {
      return getUncompressedCacheSize();
    }

    public static final int MARK_CACHE_SIZE_FIELD_NUMBER = 10;
    private com.google.protobuf.Int64Value markCacheSize_;
    /**
     * <pre>
     * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
     */
    public boolean hasMarkCacheSize() {
      return markCacheSize_ != null;
    }
    /**
     * <pre>
     * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
     */
    public com.google.protobuf.Int64Value getMarkCacheSize() {
      return markCacheSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : markCacheSize_;
    }
    /**
     * <pre>
     * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getMarkCacheSizeOrBuilder() {
      return getMarkCacheSize();
    }

    public static final int MAX_TABLE_SIZE_TO_DROP_FIELD_NUMBER = 11;
    private com.google.protobuf.Int64Value maxTableSizeToDrop_;
    /**
     * <pre>
     * Maximum size of the table that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
     */
    public boolean hasMaxTableSizeToDrop() {
      return maxTableSizeToDrop_ != null;
    }
    /**
     * <pre>
     * Maximum size of the table that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
     */
    public com.google.protobuf.Int64Value getMaxTableSizeToDrop() {
      return maxTableSizeToDrop_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxTableSizeToDrop_;
    }
    /**
     * <pre>
     * Maximum size of the table that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getMaxTableSizeToDropOrBuilder() {
      return getMaxTableSizeToDrop();
    }

    public static final int MAX_PARTITION_SIZE_TO_DROP_FIELD_NUMBER = 13;
    private com.google.protobuf.Int64Value maxPartitionSizeToDrop_;
    /**
     * <pre>
     * Maximum size of the partition that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
     */
    public boolean hasMaxPartitionSizeToDrop() {
      return maxPartitionSizeToDrop_ != null;
    }
    /**
     * <pre>
     * Maximum size of the partition that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
     */
    public com.google.protobuf.Int64Value getMaxPartitionSizeToDrop() {
      return maxPartitionSizeToDrop_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxPartitionSizeToDrop_;
    }
    /**
     * <pre>
     * Maximum size of the partition that can be deleted using a DROP query.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getMaxPartitionSizeToDropOrBuilder() {
      return getMaxPartitionSizeToDrop();
    }

    public static final int BUILTIN_DICTIONARIES_RELOAD_INTERVAL_FIELD_NUMBER = 12;
    private com.google.protobuf.Int64Value builtinDictionariesReloadInterval_;
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasBuiltinDictionariesReloadInterval() {
      return builtinDictionariesReloadInterval_ != null;
    }
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.Int64Value getBuiltinDictionariesReloadInterval() {
      return builtinDictionariesReloadInterval_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : builtinDictionariesReloadInterval_;
    }
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.Int64ValueOrBuilder getBuiltinDictionariesReloadIntervalOrBuilder() {
      return getBuiltinDictionariesReloadInterval();
    }

    public static final int TIMEZONE_FIELD_NUMBER = 14;
    private volatile java.lang.Object timezone_;
    /**
     * <pre>
     * The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
     * </pre>
     *
     * <code>string timezone = 14;</code>
     */
    public java.lang.String getTimezone() {
      java.lang.Object ref = timezone_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        timezone_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
     * </pre>
     *
     * <code>string timezone = 14;</code>
     */
    public com.google.protobuf.ByteString
        getTimezoneBytes() {
      java.lang.Object ref = timezone_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        timezone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int GEOBASE_URI_FIELD_NUMBER = 15;
    private volatile java.lang.Object geobaseUri_;
    /**
     * <pre>
     * Address of the archive with the user geobase in Object Storage.
     * </pre>
     *
     * <code>string geobase_uri = 15;</code>
     */
    public java.lang.String getGeobaseUri() {
      java.lang.Object ref = geobaseUri_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        geobaseUri_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Address of the archive with the user geobase in Object Storage.
     * </pre>
     *
     * <code>string geobase_uri = 15;</code>
     */
    public com.google.protobuf.ByteString
        getGeobaseUriBytes() {
      java.lang.Object ref = geobaseUri_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        geobaseUri_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (logLevel_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel.LOG_LEVEL_UNSPECIFIED.getNumber()) {
        output.writeEnum(1, logLevel_);
      }
      if (mergeTree_ != null) {
        output.writeMessage(2, getMergeTree());
      }
      for (int i = 0; i < compression_.size(); i++) {
        output.writeMessage(3, compression_.get(i));
      }
      for (int i = 0; i < dictionaries_.size(); i++) {
        output.writeMessage(4, dictionaries_.get(i));
      }
      for (int i = 0; i < graphiteRollup_.size(); i++) {
        output.writeMessage(5, graphiteRollup_.get(i));
      }
      if (maxConnections_ != null) {
        output.writeMessage(6, getMaxConnections());
      }
      if (maxConcurrentQueries_ != null) {
        output.writeMessage(7, getMaxConcurrentQueries());
      }
      if (keepAliveTimeout_ != null) {
        output.writeMessage(8, getKeepAliveTimeout());
      }
      if (uncompressedCacheSize_ != null) {
        output.writeMessage(9, getUncompressedCacheSize());
      }
      if (markCacheSize_ != null) {
        output.writeMessage(10, getMarkCacheSize());
      }
      if (maxTableSizeToDrop_ != null) {
        output.writeMessage(11, getMaxTableSizeToDrop());
      }
      if (builtinDictionariesReloadInterval_ != null) {
        output.writeMessage(12, getBuiltinDictionariesReloadInterval());
      }
      if (maxPartitionSizeToDrop_ != null) {
        output.writeMessage(13, getMaxPartitionSizeToDrop());
      }
      if (!getTimezoneBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 14, timezone_);
      }
      if (!getGeobaseUriBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 15, geobaseUri_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (logLevel_ != yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel.LOG_LEVEL_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, logLevel_);
      }
      if (mergeTree_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMergeTree());
      }
      for (int i = 0; i < compression_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, compression_.get(i));
      }
      for (int i = 0; i < dictionaries_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, dictionaries_.get(i));
      }
      for (int i = 0; i < graphiteRollup_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, graphiteRollup_.get(i));
      }
      if (maxConnections_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getMaxConnections());
      }
      if (maxConcurrentQueries_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getMaxConcurrentQueries());
      }
      if (keepAliveTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getKeepAliveTimeout());
      }
      if (uncompressedCacheSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getUncompressedCacheSize());
      }
      if (markCacheSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getMarkCacheSize());
      }
      if (maxTableSizeToDrop_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getMaxTableSizeToDrop());
      }
      if (builtinDictionariesReloadInterval_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getBuiltinDictionariesReloadInterval());
      }
      if (maxPartitionSizeToDrop_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getMaxPartitionSizeToDrop());
      }
      if (!getTimezoneBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, timezone_);
      }
      if (!getGeobaseUriBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(15, geobaseUri_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig) obj;

      boolean result = true;
      result = result && logLevel_ == other.logLevel_;
      result = result && (hasMergeTree() == other.hasMergeTree());
      if (hasMergeTree()) {
        result = result && getMergeTree()
            .equals(other.getMergeTree());
      }
      result = result && getCompressionList()
          .equals(other.getCompressionList());
      result = result && getDictionariesList()
          .equals(other.getDictionariesList());
      result = result && getGraphiteRollupList()
          .equals(other.getGraphiteRollupList());
      result = result && (hasMaxConnections() == other.hasMaxConnections());
      if (hasMaxConnections()) {
        result = result && getMaxConnections()
            .equals(other.getMaxConnections());
      }
      result = result && (hasMaxConcurrentQueries() == other.hasMaxConcurrentQueries());
      if (hasMaxConcurrentQueries()) {
        result = result && getMaxConcurrentQueries()
            .equals(other.getMaxConcurrentQueries());
      }
      result = result && (hasKeepAliveTimeout() == other.hasKeepAliveTimeout());
      if (hasKeepAliveTimeout()) {
        result = result && getKeepAliveTimeout()
            .equals(other.getKeepAliveTimeout());
      }
      result = result && (hasUncompressedCacheSize() == other.hasUncompressedCacheSize());
      if (hasUncompressedCacheSize()) {
        result = result && getUncompressedCacheSize()
            .equals(other.getUncompressedCacheSize());
      }
      result = result && (hasMarkCacheSize() == other.hasMarkCacheSize());
      if (hasMarkCacheSize()) {
        result = result && getMarkCacheSize()
            .equals(other.getMarkCacheSize());
      }
      result = result && (hasMaxTableSizeToDrop() == other.hasMaxTableSizeToDrop());
      if (hasMaxTableSizeToDrop()) {
        result = result && getMaxTableSizeToDrop()
            .equals(other.getMaxTableSizeToDrop());
      }
      result = result && (hasMaxPartitionSizeToDrop() == other.hasMaxPartitionSizeToDrop());
      if (hasMaxPartitionSizeToDrop()) {
        result = result && getMaxPartitionSizeToDrop()
            .equals(other.getMaxPartitionSizeToDrop());
      }
      result = result && (hasBuiltinDictionariesReloadInterval() == other.hasBuiltinDictionariesReloadInterval());
      if (hasBuiltinDictionariesReloadInterval()) {
        result = result && getBuiltinDictionariesReloadInterval()
            .equals(other.getBuiltinDictionariesReloadInterval());
      }
      result = result && getTimezone()
          .equals(other.getTimezone());
      result = result && getGeobaseUri()
          .equals(other.getGeobaseUri());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + LOG_LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + logLevel_;
      if (hasMergeTree()) {
        hash = (37 * hash) + MERGE_TREE_FIELD_NUMBER;
        hash = (53 * hash) + getMergeTree().hashCode();
      }
      if (getCompressionCount() > 0) {
        hash = (37 * hash) + COMPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getCompressionList().hashCode();
      }
      if (getDictionariesCount() > 0) {
        hash = (37 * hash) + DICTIONARIES_FIELD_NUMBER;
        hash = (53 * hash) + getDictionariesList().hashCode();
      }
      if (getGraphiteRollupCount() > 0) {
        hash = (37 * hash) + GRAPHITE_ROLLUP_FIELD_NUMBER;
        hash = (53 * hash) + getGraphiteRollupList().hashCode();
      }
      if (hasMaxConnections()) {
        hash = (37 * hash) + MAX_CONNECTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxConnections().hashCode();
      }
      if (hasMaxConcurrentQueries()) {
        hash = (37 * hash) + MAX_CONCURRENT_QUERIES_FIELD_NUMBER;
        hash = (53 * hash) + getMaxConcurrentQueries().hashCode();
      }
      if (hasKeepAliveTimeout()) {
        hash = (37 * hash) + KEEP_ALIVE_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getKeepAliveTimeout().hashCode();
      }
      if (hasUncompressedCacheSize()) {
        hash = (37 * hash) + UNCOMPRESSED_CACHE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getUncompressedCacheSize().hashCode();
      }
      if (hasMarkCacheSize()) {
        hash = (37 * hash) + MARK_CACHE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMarkCacheSize().hashCode();
      }
      if (hasMaxTableSizeToDrop()) {
        hash = (37 * hash) + MAX_TABLE_SIZE_TO_DROP_FIELD_NUMBER;
        hash = (53 * hash) + getMaxTableSizeToDrop().hashCode();
      }
      if (hasMaxPartitionSizeToDrop()) {
        hash = (37 * hash) + MAX_PARTITION_SIZE_TO_DROP_FIELD_NUMBER;
        hash = (53 * hash) + getMaxPartitionSizeToDrop().hashCode();
      }
      if (hasBuiltinDictionariesReloadInterval()) {
        hash = (37 * hash) + BUILTIN_DICTIONARIES_RELOAD_INTERVAL_FIELD_NUMBER;
        hash = (53 * hash) + getBuiltinDictionariesReloadInterval().hashCode();
      }
      hash = (37 * hash) + TIMEZONE_FIELD_NUMBER;
      hash = (53 * hash) + getTimezone().hashCode();
      hash = (37 * hash) + GEOBASE_URI_FIELD_NUMBER;
      hash = (53 * hash) + getGeobaseUri().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ClickHouse configuration options. Detailed description for each set of options
     * is available in [ClickHouse documentation](https://clickhouse.yandex/docs/ru/operations/server_settings/settings/).
     * Any options not listed here are not supported.
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig)
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCompressionFieldBuilder();
          getDictionariesFieldBuilder();
          getGraphiteRollupFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        logLevel_ = 0;

        if (mergeTreeBuilder_ == null) {
          mergeTree_ = null;
        } else {
          mergeTree_ = null;
          mergeTreeBuilder_ = null;
        }
        if (compressionBuilder_ == null) {
          compression_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          compressionBuilder_.clear();
        }
        if (dictionariesBuilder_ == null) {
          dictionaries_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          dictionariesBuilder_.clear();
        }
        if (graphiteRollupBuilder_ == null) {
          graphiteRollup_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          graphiteRollupBuilder_.clear();
        }
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = null;
        } else {
          maxConnections_ = null;
          maxConnectionsBuilder_ = null;
        }
        if (maxConcurrentQueriesBuilder_ == null) {
          maxConcurrentQueries_ = null;
        } else {
          maxConcurrentQueries_ = null;
          maxConcurrentQueriesBuilder_ = null;
        }
        if (keepAliveTimeoutBuilder_ == null) {
          keepAliveTimeout_ = null;
        } else {
          keepAliveTimeout_ = null;
          keepAliveTimeoutBuilder_ = null;
        }
        if (uncompressedCacheSizeBuilder_ == null) {
          uncompressedCacheSize_ = null;
        } else {
          uncompressedCacheSize_ = null;
          uncompressedCacheSizeBuilder_ = null;
        }
        if (markCacheSizeBuilder_ == null) {
          markCacheSize_ = null;
        } else {
          markCacheSize_ = null;
          markCacheSizeBuilder_ = null;
        }
        if (maxTableSizeToDropBuilder_ == null) {
          maxTableSizeToDrop_ = null;
        } else {
          maxTableSizeToDrop_ = null;
          maxTableSizeToDropBuilder_ = null;
        }
        if (maxPartitionSizeToDropBuilder_ == null) {
          maxPartitionSizeToDrop_ = null;
        } else {
          maxPartitionSizeToDrop_ = null;
          maxPartitionSizeToDropBuilder_ = null;
        }
        if (builtinDictionariesReloadIntervalBuilder_ == null) {
          builtinDictionariesReloadInterval_ = null;
        } else {
          builtinDictionariesReloadInterval_ = null;
          builtinDictionariesReloadIntervalBuilder_ = null;
        }
        timezone_ = "";

        geobaseUri_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig build() {
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig buildPartial() {
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.logLevel_ = logLevel_;
        if (mergeTreeBuilder_ == null) {
          result.mergeTree_ = mergeTree_;
        } else {
          result.mergeTree_ = mergeTreeBuilder_.build();
        }
        if (compressionBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            compression_ = java.util.Collections.unmodifiableList(compression_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.compression_ = compression_;
        } else {
          result.compression_ = compressionBuilder_.build();
        }
        if (dictionariesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            dictionaries_ = java.util.Collections.unmodifiableList(dictionaries_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.dictionaries_ = dictionaries_;
        } else {
          result.dictionaries_ = dictionariesBuilder_.build();
        }
        if (graphiteRollupBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            graphiteRollup_ = java.util.Collections.unmodifiableList(graphiteRollup_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.graphiteRollup_ = graphiteRollup_;
        } else {
          result.graphiteRollup_ = graphiteRollupBuilder_.build();
        }
        if (maxConnectionsBuilder_ == null) {
          result.maxConnections_ = maxConnections_;
        } else {
          result.maxConnections_ = maxConnectionsBuilder_.build();
        }
        if (maxConcurrentQueriesBuilder_ == null) {
          result.maxConcurrentQueries_ = maxConcurrentQueries_;
        } else {
          result.maxConcurrentQueries_ = maxConcurrentQueriesBuilder_.build();
        }
        if (keepAliveTimeoutBuilder_ == null) {
          result.keepAliveTimeout_ = keepAliveTimeout_;
        } else {
          result.keepAliveTimeout_ = keepAliveTimeoutBuilder_.build();
        }
        if (uncompressedCacheSizeBuilder_ == null) {
          result.uncompressedCacheSize_ = uncompressedCacheSize_;
        } else {
          result.uncompressedCacheSize_ = uncompressedCacheSizeBuilder_.build();
        }
        if (markCacheSizeBuilder_ == null) {
          result.markCacheSize_ = markCacheSize_;
        } else {
          result.markCacheSize_ = markCacheSizeBuilder_.build();
        }
        if (maxTableSizeToDropBuilder_ == null) {
          result.maxTableSizeToDrop_ = maxTableSizeToDrop_;
        } else {
          result.maxTableSizeToDrop_ = maxTableSizeToDropBuilder_.build();
        }
        if (maxPartitionSizeToDropBuilder_ == null) {
          result.maxPartitionSizeToDrop_ = maxPartitionSizeToDrop_;
        } else {
          result.maxPartitionSizeToDrop_ = maxPartitionSizeToDropBuilder_.build();
        }
        if (builtinDictionariesReloadIntervalBuilder_ == null) {
          result.builtinDictionariesReloadInterval_ = builtinDictionariesReloadInterval_;
        } else {
          result.builtinDictionariesReloadInterval_ = builtinDictionariesReloadIntervalBuilder_.build();
        }
        result.timezone_ = timezone_;
        result.geobaseUri_ = geobaseUri_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig) {
          return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig other) {
        if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance()) return this;
        if (other.logLevel_ != 0) {
          setLogLevelValue(other.getLogLevelValue());
        }
        if (other.hasMergeTree()) {
          mergeMergeTree(other.getMergeTree());
        }
        if (compressionBuilder_ == null) {
          if (!other.compression_.isEmpty()) {
            if (compression_.isEmpty()) {
              compression_ = other.compression_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureCompressionIsMutable();
              compression_.addAll(other.compression_);
            }
            onChanged();
          }
        } else {
          if (!other.compression_.isEmpty()) {
            if (compressionBuilder_.isEmpty()) {
              compressionBuilder_.dispose();
              compressionBuilder_ = null;
              compression_ = other.compression_;
              bitField0_ = (bitField0_ & ~0x00000004);
              compressionBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCompressionFieldBuilder() : null;
            } else {
              compressionBuilder_.addAllMessages(other.compression_);
            }
          }
        }
        if (dictionariesBuilder_ == null) {
          if (!other.dictionaries_.isEmpty()) {
            if (dictionaries_.isEmpty()) {
              dictionaries_ = other.dictionaries_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureDictionariesIsMutable();
              dictionaries_.addAll(other.dictionaries_);
            }
            onChanged();
          }
        } else {
          if (!other.dictionaries_.isEmpty()) {
            if (dictionariesBuilder_.isEmpty()) {
              dictionariesBuilder_.dispose();
              dictionariesBuilder_ = null;
              dictionaries_ = other.dictionaries_;
              bitField0_ = (bitField0_ & ~0x00000008);
              dictionariesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDictionariesFieldBuilder() : null;
            } else {
              dictionariesBuilder_.addAllMessages(other.dictionaries_);
            }
          }
        }
        if (graphiteRollupBuilder_ == null) {
          if (!other.graphiteRollup_.isEmpty()) {
            if (graphiteRollup_.isEmpty()) {
              graphiteRollup_ = other.graphiteRollup_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureGraphiteRollupIsMutable();
              graphiteRollup_.addAll(other.graphiteRollup_);
            }
            onChanged();
          }
        } else {
          if (!other.graphiteRollup_.isEmpty()) {
            if (graphiteRollupBuilder_.isEmpty()) {
              graphiteRollupBuilder_.dispose();
              graphiteRollupBuilder_ = null;
              graphiteRollup_ = other.graphiteRollup_;
              bitField0_ = (bitField0_ & ~0x00000010);
              graphiteRollupBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getGraphiteRollupFieldBuilder() : null;
            } else {
              graphiteRollupBuilder_.addAllMessages(other.graphiteRollup_);
            }
          }
        }
        if (other.hasMaxConnections()) {
          mergeMaxConnections(other.getMaxConnections());
        }
        if (other.hasMaxConcurrentQueries()) {
          mergeMaxConcurrentQueries(other.getMaxConcurrentQueries());
        }
        if (other.hasKeepAliveTimeout()) {
          mergeKeepAliveTimeout(other.getKeepAliveTimeout());
        }
        if (other.hasUncompressedCacheSize()) {
          mergeUncompressedCacheSize(other.getUncompressedCacheSize());
        }
        if (other.hasMarkCacheSize()) {
          mergeMarkCacheSize(other.getMarkCacheSize());
        }
        if (other.hasMaxTableSizeToDrop()) {
          mergeMaxTableSizeToDrop(other.getMaxTableSizeToDrop());
        }
        if (other.hasMaxPartitionSizeToDrop()) {
          mergeMaxPartitionSizeToDrop(other.getMaxPartitionSizeToDrop());
        }
        if (other.hasBuiltinDictionariesReloadInterval()) {
          mergeBuiltinDictionariesReloadInterval(other.getBuiltinDictionariesReloadInterval());
        }
        if (!other.getTimezone().isEmpty()) {
          timezone_ = other.timezone_;
          onChanged();
        }
        if (!other.getGeobaseUri().isEmpty()) {
          geobaseUri_ = other.geobaseUri_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int logLevel_ = 0;
      /**
       * <pre>
       * Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel log_level = 1;</code>
       */
      public int getLogLevelValue() {
        return logLevel_;
      }
      /**
       * <pre>
       * Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel log_level = 1;</code>
       */
      public Builder setLogLevelValue(int value) {
        logLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel log_level = 1;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel getLogLevel() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel result = yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel.valueOf(logLevel_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel log_level = 1;</code>
       */
      public Builder setLogLevel(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.LogLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        logLevel_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel log_level = 1;</code>
       */
      public Builder clearLogLevel() {
        
        logLevel_ = 0;
        onChanged();
        return this;
      }

      private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree mergeTree_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTreeOrBuilder> mergeTreeBuilder_;
      /**
       * <pre>
       * Settings for the MergeTree engine.
       * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
       */
      public boolean hasMergeTree() {
        return mergeTreeBuilder_ != null || mergeTree_ != null;
      }
      /**
       * <pre>
       * Settings for the MergeTree engine.
       * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree getMergeTree() {
        if (mergeTreeBuilder_ == null) {
          return mergeTree_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.getDefaultInstance() : mergeTree_;
        } else {
          return mergeTreeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Settings for the MergeTree engine.
       * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
       */
      public Builder setMergeTree(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree value) {
        if (mergeTreeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mergeTree_ = value;
          onChanged();
        } else {
          mergeTreeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Settings for the MergeTree engine.
       * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
       */
      public Builder setMergeTree(
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.Builder builderForValue) {
        if (mergeTreeBuilder_ == null) {
          mergeTree_ = builderForValue.build();
          onChanged();
        } else {
          mergeTreeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Settings for the MergeTree engine.
       * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
       */
      public Builder mergeMergeTree(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree value) {
        if (mergeTreeBuilder_ == null) {
          if (mergeTree_ != null) {
            mergeTree_ =
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.newBuilder(mergeTree_).mergeFrom(value).buildPartial();
          } else {
            mergeTree_ = value;
          }
          onChanged();
        } else {
          mergeTreeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Settings for the MergeTree engine.
       * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
       */
      public Builder clearMergeTree() {
        if (mergeTreeBuilder_ == null) {
          mergeTree_ = null;
          onChanged();
        } else {
          mergeTree_ = null;
          mergeTreeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Settings for the MergeTree engine.
       * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.Builder getMergeTreeBuilder() {
        
        onChanged();
        return getMergeTreeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Settings for the MergeTree engine.
       * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTreeOrBuilder getMergeTreeOrBuilder() {
        if (mergeTreeBuilder_ != null) {
          return mergeTreeBuilder_.getMessageOrBuilder();
        } else {
          return mergeTree_ == null ?
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.getDefaultInstance() : mergeTree_;
        }
      }
      /**
       * <pre>
       * Settings for the MergeTree engine.
       * See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree merge_tree = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTreeOrBuilder> 
          getMergeTreeFieldBuilder() {
        if (mergeTreeBuilder_ == null) {
          mergeTreeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTree.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.MergeTreeOrBuilder>(
                  getMergeTree(),
                  getParentForChildren(),
                  isClean());
          mergeTree_ = null;
        }
        return mergeTreeBuilder_;
      }

      private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression> compression_ =
        java.util.Collections.emptyList();
      private void ensureCompressionIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          compression_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression>(compression_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.CompressionOrBuilder> compressionBuilder_;

      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression> getCompressionList() {
        if (compressionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(compression_);
        } else {
          return compressionBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public int getCompressionCount() {
        if (compressionBuilder_ == null) {
          return compression_.size();
        } else {
          return compressionBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression getCompression(int index) {
        if (compressionBuilder_ == null) {
          return compression_.get(index);
        } else {
          return compressionBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public Builder setCompression(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression value) {
        if (compressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompressionIsMutable();
          compression_.set(index, value);
          onChanged();
        } else {
          compressionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public Builder setCompression(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder builderForValue) {
        if (compressionBuilder_ == null) {
          ensureCompressionIsMutable();
          compression_.set(index, builderForValue.build());
          onChanged();
        } else {
          compressionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public Builder addCompression(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression value) {
        if (compressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompressionIsMutable();
          compression_.add(value);
          onChanged();
        } else {
          compressionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public Builder addCompression(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression value) {
        if (compressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompressionIsMutable();
          compression_.add(index, value);
          onChanged();
        } else {
          compressionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public Builder addCompression(
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder builderForValue) {
        if (compressionBuilder_ == null) {
          ensureCompressionIsMutable();
          compression_.add(builderForValue.build());
          onChanged();
        } else {
          compressionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public Builder addCompression(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder builderForValue) {
        if (compressionBuilder_ == null) {
          ensureCompressionIsMutable();
          compression_.add(index, builderForValue.build());
          onChanged();
        } else {
          compressionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public Builder addAllCompression(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression> values) {
        if (compressionBuilder_ == null) {
          ensureCompressionIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, compression_);
          onChanged();
        } else {
          compressionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public Builder clearCompression() {
        if (compressionBuilder_ == null) {
          compression_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          compressionBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public Builder removeCompression(int index) {
        if (compressionBuilder_ == null) {
          ensureCompressionIsMutable();
          compression_.remove(index);
          onChanged();
        } else {
          compressionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder getCompressionBuilder(
          int index) {
        return getCompressionFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.CompressionOrBuilder getCompressionOrBuilder(
          int index) {
        if (compressionBuilder_ == null) {
          return compression_.get(index);  } else {
          return compressionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.CompressionOrBuilder> 
           getCompressionOrBuilderList() {
        if (compressionBuilder_ != null) {
          return compressionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(compression_);
        }
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder addCompressionBuilder() {
        return getCompressionFieldBuilder().addBuilder(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.getDefaultInstance());
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder addCompressionBuilder(
          int index) {
        return getCompressionFieldBuilder().addBuilder(
            index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.getDefaultInstance());
      }
      /**
       * <pre>
       * Compression settings for the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression compression = 3;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder> 
           getCompressionBuilderList() {
        return getCompressionFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.CompressionOrBuilder> 
          getCompressionFieldBuilder() {
        if (compressionBuilder_ == null) {
          compressionBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Compression.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.CompressionOrBuilder>(
                  compression_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          compression_ = null;
        }
        return compressionBuilder_;
      }

      private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary> dictionaries_ =
        java.util.Collections.emptyList();
      private void ensureDictionariesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          dictionaries_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary>(dictionaries_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionaryOrBuilder> dictionariesBuilder_;

      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary> getDictionariesList() {
        if (dictionariesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dictionaries_);
        } else {
          return dictionariesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public int getDictionariesCount() {
        if (dictionariesBuilder_ == null) {
          return dictionaries_.size();
        } else {
          return dictionariesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary getDictionaries(int index) {
        if (dictionariesBuilder_ == null) {
          return dictionaries_.get(index);
        } else {
          return dictionariesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public Builder setDictionaries(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary value) {
        if (dictionariesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDictionariesIsMutable();
          dictionaries_.set(index, value);
          onChanged();
        } else {
          dictionariesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public Builder setDictionaries(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder builderForValue) {
        if (dictionariesBuilder_ == null) {
          ensureDictionariesIsMutable();
          dictionaries_.set(index, builderForValue.build());
          onChanged();
        } else {
          dictionariesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public Builder addDictionaries(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary value) {
        if (dictionariesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDictionariesIsMutable();
          dictionaries_.add(value);
          onChanged();
        } else {
          dictionariesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public Builder addDictionaries(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary value) {
        if (dictionariesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDictionariesIsMutable();
          dictionaries_.add(index, value);
          onChanged();
        } else {
          dictionariesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public Builder addDictionaries(
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder builderForValue) {
        if (dictionariesBuilder_ == null) {
          ensureDictionariesIsMutable();
          dictionaries_.add(builderForValue.build());
          onChanged();
        } else {
          dictionariesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public Builder addDictionaries(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder builderForValue) {
        if (dictionariesBuilder_ == null) {
          ensureDictionariesIsMutable();
          dictionaries_.add(index, builderForValue.build());
          onChanged();
        } else {
          dictionariesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public Builder addAllDictionaries(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary> values) {
        if (dictionariesBuilder_ == null) {
          ensureDictionariesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dictionaries_);
          onChanged();
        } else {
          dictionariesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public Builder clearDictionaries() {
        if (dictionariesBuilder_ == null) {
          dictionaries_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          dictionariesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public Builder removeDictionaries(int index) {
        if (dictionariesBuilder_ == null) {
          ensureDictionariesIsMutable();
          dictionaries_.remove(index);
          onChanged();
        } else {
          dictionariesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder getDictionariesBuilder(
          int index) {
        return getDictionariesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionaryOrBuilder getDictionariesOrBuilder(
          int index) {
        if (dictionariesBuilder_ == null) {
          return dictionaries_.get(index);  } else {
          return dictionariesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionaryOrBuilder> 
           getDictionariesOrBuilderList() {
        if (dictionariesBuilder_ != null) {
          return dictionariesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dictionaries_);
        }
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder addDictionariesBuilder() {
        return getDictionariesFieldBuilder().addBuilder(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.getDefaultInstance());
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder addDictionariesBuilder(
          int index) {
        return getDictionariesFieldBuilder().addBuilder(
            index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.getDefaultInstance());
      }
      /**
       * <pre>
       * Configuration of external dictionaries to be used by the ClickHouse cluster.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary dictionaries = 4;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder> 
           getDictionariesBuilderList() {
        return getDictionariesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionaryOrBuilder> 
          getDictionariesFieldBuilder() {
        if (dictionariesBuilder_ == null) {
          dictionariesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionary.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.ExternalDictionaryOrBuilder>(
                  dictionaries_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          dictionaries_ = null;
        }
        return dictionariesBuilder_;
      }

      private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup> graphiteRollup_ =
        java.util.Collections.emptyList();
      private void ensureGraphiteRollupIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          graphiteRollup_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup>(graphiteRollup_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollupOrBuilder> graphiteRollupBuilder_;

      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup> getGraphiteRollupList() {
        if (graphiteRollupBuilder_ == null) {
          return java.util.Collections.unmodifiableList(graphiteRollup_);
        } else {
          return graphiteRollupBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public int getGraphiteRollupCount() {
        if (graphiteRollupBuilder_ == null) {
          return graphiteRollup_.size();
        } else {
          return graphiteRollupBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup getGraphiteRollup(int index) {
        if (graphiteRollupBuilder_ == null) {
          return graphiteRollup_.get(index);
        } else {
          return graphiteRollupBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public Builder setGraphiteRollup(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup value) {
        if (graphiteRollupBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGraphiteRollupIsMutable();
          graphiteRollup_.set(index, value);
          onChanged();
        } else {
          graphiteRollupBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public Builder setGraphiteRollup(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder builderForValue) {
        if (graphiteRollupBuilder_ == null) {
          ensureGraphiteRollupIsMutable();
          graphiteRollup_.set(index, builderForValue.build());
          onChanged();
        } else {
          graphiteRollupBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public Builder addGraphiteRollup(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup value) {
        if (graphiteRollupBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGraphiteRollupIsMutable();
          graphiteRollup_.add(value);
          onChanged();
        } else {
          graphiteRollupBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public Builder addGraphiteRollup(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup value) {
        if (graphiteRollupBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGraphiteRollupIsMutable();
          graphiteRollup_.add(index, value);
          onChanged();
        } else {
          graphiteRollupBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public Builder addGraphiteRollup(
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder builderForValue) {
        if (graphiteRollupBuilder_ == null) {
          ensureGraphiteRollupIsMutable();
          graphiteRollup_.add(builderForValue.build());
          onChanged();
        } else {
          graphiteRollupBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public Builder addGraphiteRollup(
          int index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder builderForValue) {
        if (graphiteRollupBuilder_ == null) {
          ensureGraphiteRollupIsMutable();
          graphiteRollup_.add(index, builderForValue.build());
          onChanged();
        } else {
          graphiteRollupBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public Builder addAllGraphiteRollup(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup> values) {
        if (graphiteRollupBuilder_ == null) {
          ensureGraphiteRollupIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, graphiteRollup_);
          onChanged();
        } else {
          graphiteRollupBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public Builder clearGraphiteRollup() {
        if (graphiteRollupBuilder_ == null) {
          graphiteRollup_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          graphiteRollupBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public Builder removeGraphiteRollup(int index) {
        if (graphiteRollupBuilder_ == null) {
          ensureGraphiteRollupIsMutable();
          graphiteRollup_.remove(index);
          onChanged();
        } else {
          graphiteRollupBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder getGraphiteRollupBuilder(
          int index) {
        return getGraphiteRollupFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollupOrBuilder getGraphiteRollupOrBuilder(
          int index) {
        if (graphiteRollupBuilder_ == null) {
          return graphiteRollup_.get(index);  } else {
          return graphiteRollupBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollupOrBuilder> 
           getGraphiteRollupOrBuilderList() {
        if (graphiteRollupBuilder_ != null) {
          return graphiteRollupBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(graphiteRollup_);
        }
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder addGraphiteRollupBuilder() {
        return getGraphiteRollupFieldBuilder().addBuilder(
            yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.getDefaultInstance());
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder addGraphiteRollupBuilder(
          int index) {
        return getGraphiteRollupFieldBuilder().addBuilder(
            index, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.getDefaultInstance());
      }
      /**
       * <pre>
       * Settings for thinning Graphite data.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup graphite_rollup = 5;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder> 
           getGraphiteRollupBuilderList() {
        return getGraphiteRollupFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollupOrBuilder> 
          getGraphiteRollupFieldBuilder() {
        if (graphiteRollupBuilder_ == null) {
          graphiteRollupBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollup.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.GraphiteRollupOrBuilder>(
                  graphiteRollup_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          graphiteRollup_ = null;
        }
        return graphiteRollupBuilder_;
      }

      private com.google.protobuf.Int64Value maxConnections_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxConnectionsBuilder_;
      /**
       * <pre>
       * Maximum number of inbound connections.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public boolean hasMaxConnections() {
        return maxConnectionsBuilder_ != null || maxConnections_ != null;
      }
      /**
       * <pre>
       * Maximum number of inbound connections.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public com.google.protobuf.Int64Value getMaxConnections() {
        if (maxConnectionsBuilder_ == null) {
          return maxConnections_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
        } else {
          return maxConnectionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Maximum number of inbound connections.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public Builder setMaxConnections(com.google.protobuf.Int64Value value) {
        if (maxConnectionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxConnections_ = value;
          onChanged();
        } else {
          maxConnectionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum number of inbound connections.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public Builder setMaxConnections(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = builderForValue.build();
          onChanged();
        } else {
          maxConnectionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Maximum number of inbound connections.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public Builder mergeMaxConnections(com.google.protobuf.Int64Value value) {
        if (maxConnectionsBuilder_ == null) {
          if (maxConnections_ != null) {
            maxConnections_ =
              com.google.protobuf.Int64Value.newBuilder(maxConnections_).mergeFrom(value).buildPartial();
          } else {
            maxConnections_ = value;
          }
          onChanged();
        } else {
          maxConnectionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum number of inbound connections.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public Builder clearMaxConnections() {
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = null;
          onChanged();
        } else {
          maxConnections_ = null;
          maxConnectionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Maximum number of inbound connections.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxConnectionsBuilder() {
        
        onChanged();
        return getMaxConnectionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Maximum number of inbound connections.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder() {
        if (maxConnectionsBuilder_ != null) {
          return maxConnectionsBuilder_.getMessageOrBuilder();
        } else {
          return maxConnections_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
        }
      }
      /**
       * <pre>
       * Maximum number of inbound connections.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 6 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxConnectionsFieldBuilder() {
        if (maxConnectionsBuilder_ == null) {
          maxConnectionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxConnections(),
                  getParentForChildren(),
                  isClean());
          maxConnections_ = null;
        }
        return maxConnectionsBuilder_;
      }

      private com.google.protobuf.Int64Value maxConcurrentQueries_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxConcurrentQueriesBuilder_;
      /**
       * <pre>
       * Maximum number of simultaneously processed requests.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public boolean hasMaxConcurrentQueries() {
        return maxConcurrentQueriesBuilder_ != null || maxConcurrentQueries_ != null;
      }
      /**
       * <pre>
       * Maximum number of simultaneously processed requests.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public com.google.protobuf.Int64Value getMaxConcurrentQueries() {
        if (maxConcurrentQueriesBuilder_ == null) {
          return maxConcurrentQueries_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConcurrentQueries_;
        } else {
          return maxConcurrentQueriesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Maximum number of simultaneously processed requests.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public Builder setMaxConcurrentQueries(com.google.protobuf.Int64Value value) {
        if (maxConcurrentQueriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxConcurrentQueries_ = value;
          onChanged();
        } else {
          maxConcurrentQueriesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum number of simultaneously processed requests.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public Builder setMaxConcurrentQueries(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxConcurrentQueriesBuilder_ == null) {
          maxConcurrentQueries_ = builderForValue.build();
          onChanged();
        } else {
          maxConcurrentQueriesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Maximum number of simultaneously processed requests.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public Builder mergeMaxConcurrentQueries(com.google.protobuf.Int64Value value) {
        if (maxConcurrentQueriesBuilder_ == null) {
          if (maxConcurrentQueries_ != null) {
            maxConcurrentQueries_ =
              com.google.protobuf.Int64Value.newBuilder(maxConcurrentQueries_).mergeFrom(value).buildPartial();
          } else {
            maxConcurrentQueries_ = value;
          }
          onChanged();
        } else {
          maxConcurrentQueriesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum number of simultaneously processed requests.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public Builder clearMaxConcurrentQueries() {
        if (maxConcurrentQueriesBuilder_ == null) {
          maxConcurrentQueries_ = null;
          onChanged();
        } else {
          maxConcurrentQueries_ = null;
          maxConcurrentQueriesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Maximum number of simultaneously processed requests.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxConcurrentQueriesBuilder() {
        
        onChanged();
        return getMaxConcurrentQueriesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Maximum number of simultaneously processed requests.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxConcurrentQueriesOrBuilder() {
        if (maxConcurrentQueriesBuilder_ != null) {
          return maxConcurrentQueriesBuilder_.getMessageOrBuilder();
        } else {
          return maxConcurrentQueries_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxConcurrentQueries_;
        }
      }
      /**
       * <pre>
       * Maximum number of simultaneously processed requests.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries = 7 [(.yandex.cloud.value) = "&gt;=10"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxConcurrentQueriesFieldBuilder() {
        if (maxConcurrentQueriesBuilder_ == null) {
          maxConcurrentQueriesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxConcurrentQueries(),
                  getParentForChildren(),
                  isClean());
          maxConcurrentQueries_ = null;
        }
        return maxConcurrentQueriesBuilder_;
      }

      private com.google.protobuf.Int64Value keepAliveTimeout_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> keepAliveTimeoutBuilder_;
      /**
       * <pre>
       * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
       */
      public boolean hasKeepAliveTimeout() {
        return keepAliveTimeoutBuilder_ != null || keepAliveTimeout_ != null;
      }
      /**
       * <pre>
       * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
       */
      public com.google.protobuf.Int64Value getKeepAliveTimeout() {
        if (keepAliveTimeoutBuilder_ == null) {
          return keepAliveTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : keepAliveTimeout_;
        } else {
          return keepAliveTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
       */
      public Builder setKeepAliveTimeout(com.google.protobuf.Int64Value value) {
        if (keepAliveTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keepAliveTimeout_ = value;
          onChanged();
        } else {
          keepAliveTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
       */
      public Builder setKeepAliveTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (keepAliveTimeoutBuilder_ == null) {
          keepAliveTimeout_ = builderForValue.build();
          onChanged();
        } else {
          keepAliveTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
       */
      public Builder mergeKeepAliveTimeout(com.google.protobuf.Int64Value value) {
        if (keepAliveTimeoutBuilder_ == null) {
          if (keepAliveTimeout_ != null) {
            keepAliveTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(keepAliveTimeout_).mergeFrom(value).buildPartial();
          } else {
            keepAliveTimeout_ = value;
          }
          onChanged();
        } else {
          keepAliveTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
       */
      public Builder clearKeepAliveTimeout() {
        if (keepAliveTimeoutBuilder_ == null) {
          keepAliveTimeout_ = null;
          onChanged();
        } else {
          keepAliveTimeout_ = null;
          keepAliveTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
       */
      public com.google.protobuf.Int64Value.Builder getKeepAliveTimeoutBuilder() {
        
        onChanged();
        return getKeepAliveTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getKeepAliveTimeoutOrBuilder() {
        if (keepAliveTimeoutBuilder_ != null) {
          return keepAliveTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return keepAliveTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : keepAliveTimeout_;
        }
      }
      /**
       * <pre>
       * Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value keep_alive_timeout = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getKeepAliveTimeoutFieldBuilder() {
        if (keepAliveTimeoutBuilder_ == null) {
          keepAliveTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getKeepAliveTimeout(),
                  getParentForChildren(),
                  isClean());
          keepAliveTimeout_ = null;
        }
        return keepAliveTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value uncompressedCacheSize_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> uncompressedCacheSizeBuilder_;
      /**
       * <pre>
       * Cache size (in bytes) for uncompressed data used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
       */
      public boolean hasUncompressedCacheSize() {
        return uncompressedCacheSizeBuilder_ != null || uncompressedCacheSize_ != null;
      }
      /**
       * <pre>
       * Cache size (in bytes) for uncompressed data used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
       */
      public com.google.protobuf.Int64Value getUncompressedCacheSize() {
        if (uncompressedCacheSizeBuilder_ == null) {
          return uncompressedCacheSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : uncompressedCacheSize_;
        } else {
          return uncompressedCacheSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Cache size (in bytes) for uncompressed data used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
       */
      public Builder setUncompressedCacheSize(com.google.protobuf.Int64Value value) {
        if (uncompressedCacheSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          uncompressedCacheSize_ = value;
          onChanged();
        } else {
          uncompressedCacheSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Cache size (in bytes) for uncompressed data used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
       */
      public Builder setUncompressedCacheSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (uncompressedCacheSizeBuilder_ == null) {
          uncompressedCacheSize_ = builderForValue.build();
          onChanged();
        } else {
          uncompressedCacheSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Cache size (in bytes) for uncompressed data used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
       */
      public Builder mergeUncompressedCacheSize(com.google.protobuf.Int64Value value) {
        if (uncompressedCacheSizeBuilder_ == null) {
          if (uncompressedCacheSize_ != null) {
            uncompressedCacheSize_ =
              com.google.protobuf.Int64Value.newBuilder(uncompressedCacheSize_).mergeFrom(value).buildPartial();
          } else {
            uncompressedCacheSize_ = value;
          }
          onChanged();
        } else {
          uncompressedCacheSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Cache size (in bytes) for uncompressed data used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
       */
      public Builder clearUncompressedCacheSize() {
        if (uncompressedCacheSizeBuilder_ == null) {
          uncompressedCacheSize_ = null;
          onChanged();
        } else {
          uncompressedCacheSize_ = null;
          uncompressedCacheSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Cache size (in bytes) for uncompressed data used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
       */
      public com.google.protobuf.Int64Value.Builder getUncompressedCacheSizeBuilder() {
        
        onChanged();
        return getUncompressedCacheSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Cache size (in bytes) for uncompressed data used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getUncompressedCacheSizeOrBuilder() {
        if (uncompressedCacheSizeBuilder_ != null) {
          return uncompressedCacheSizeBuilder_.getMessageOrBuilder();
        } else {
          return uncompressedCacheSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : uncompressedCacheSize_;
        }
      }
      /**
       * <pre>
       * Cache size (in bytes) for uncompressed data used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value uncompressed_cache_size = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getUncompressedCacheSizeFieldBuilder() {
        if (uncompressedCacheSizeBuilder_ == null) {
          uncompressedCacheSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getUncompressedCacheSize(),
                  getParentForChildren(),
                  isClean());
          uncompressedCacheSize_ = null;
        }
        return uncompressedCacheSizeBuilder_;
      }

      private com.google.protobuf.Int64Value markCacheSize_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> markCacheSizeBuilder_;
      /**
       * <pre>
       * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
       */
      public boolean hasMarkCacheSize() {
        return markCacheSizeBuilder_ != null || markCacheSize_ != null;
      }
      /**
       * <pre>
       * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
       */
      public com.google.protobuf.Int64Value getMarkCacheSize() {
        if (markCacheSizeBuilder_ == null) {
          return markCacheSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : markCacheSize_;
        } else {
          return markCacheSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
       */
      public Builder setMarkCacheSize(com.google.protobuf.Int64Value value) {
        if (markCacheSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          markCacheSize_ = value;
          onChanged();
        } else {
          markCacheSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
       */
      public Builder setMarkCacheSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (markCacheSizeBuilder_ == null) {
          markCacheSize_ = builderForValue.build();
          onChanged();
        } else {
          markCacheSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
       */
      public Builder mergeMarkCacheSize(com.google.protobuf.Int64Value value) {
        if (markCacheSizeBuilder_ == null) {
          if (markCacheSize_ != null) {
            markCacheSize_ =
              com.google.protobuf.Int64Value.newBuilder(markCacheSize_).mergeFrom(value).buildPartial();
          } else {
            markCacheSize_ = value;
          }
          onChanged();
        } else {
          markCacheSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
       */
      public Builder clearMarkCacheSize() {
        if (markCacheSizeBuilder_ == null) {
          markCacheSize_ = null;
          onChanged();
        } else {
          markCacheSize_ = null;
          markCacheSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMarkCacheSizeBuilder() {
        
        onChanged();
        return getMarkCacheSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMarkCacheSizeOrBuilder() {
        if (markCacheSizeBuilder_ != null) {
          return markCacheSizeBuilder_.getMessageOrBuilder();
        } else {
          return markCacheSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : markCacheSize_;
        }
      }
      /**
       * <pre>
       * Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mark_cache_size = 10 [(.yandex.cloud.value) = "&gt;5368709120"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMarkCacheSizeFieldBuilder() {
        if (markCacheSizeBuilder_ == null) {
          markCacheSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMarkCacheSize(),
                  getParentForChildren(),
                  isClean());
          markCacheSize_ = null;
        }
        return markCacheSizeBuilder_;
      }

      private com.google.protobuf.Int64Value maxTableSizeToDrop_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxTableSizeToDropBuilder_;
      /**
       * <pre>
       * Maximum size of the table that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
       */
      public boolean hasMaxTableSizeToDrop() {
        return maxTableSizeToDropBuilder_ != null || maxTableSizeToDrop_ != null;
      }
      /**
       * <pre>
       * Maximum size of the table that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
       */
      public com.google.protobuf.Int64Value getMaxTableSizeToDrop() {
        if (maxTableSizeToDropBuilder_ == null) {
          return maxTableSizeToDrop_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxTableSizeToDrop_;
        } else {
          return maxTableSizeToDropBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Maximum size of the table that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
       */
      public Builder setMaxTableSizeToDrop(com.google.protobuf.Int64Value value) {
        if (maxTableSizeToDropBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxTableSizeToDrop_ = value;
          onChanged();
        } else {
          maxTableSizeToDropBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum size of the table that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
       */
      public Builder setMaxTableSizeToDrop(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxTableSizeToDropBuilder_ == null) {
          maxTableSizeToDrop_ = builderForValue.build();
          onChanged();
        } else {
          maxTableSizeToDropBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Maximum size of the table that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
       */
      public Builder mergeMaxTableSizeToDrop(com.google.protobuf.Int64Value value) {
        if (maxTableSizeToDropBuilder_ == null) {
          if (maxTableSizeToDrop_ != null) {
            maxTableSizeToDrop_ =
              com.google.protobuf.Int64Value.newBuilder(maxTableSizeToDrop_).mergeFrom(value).buildPartial();
          } else {
            maxTableSizeToDrop_ = value;
          }
          onChanged();
        } else {
          maxTableSizeToDropBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum size of the table that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
       */
      public Builder clearMaxTableSizeToDrop() {
        if (maxTableSizeToDropBuilder_ == null) {
          maxTableSizeToDrop_ = null;
          onChanged();
        } else {
          maxTableSizeToDrop_ = null;
          maxTableSizeToDropBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Maximum size of the table that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxTableSizeToDropBuilder() {
        
        onChanged();
        return getMaxTableSizeToDropFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Maximum size of the table that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxTableSizeToDropOrBuilder() {
        if (maxTableSizeToDropBuilder_ != null) {
          return maxTableSizeToDropBuilder_.getMessageOrBuilder();
        } else {
          return maxTableSizeToDrop_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxTableSizeToDrop_;
        }
      }
      /**
       * <pre>
       * Maximum size of the table that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_table_size_to_drop = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxTableSizeToDropFieldBuilder() {
        if (maxTableSizeToDropBuilder_ == null) {
          maxTableSizeToDropBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxTableSizeToDrop(),
                  getParentForChildren(),
                  isClean());
          maxTableSizeToDrop_ = null;
        }
        return maxTableSizeToDropBuilder_;
      }

      private com.google.protobuf.Int64Value maxPartitionSizeToDrop_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxPartitionSizeToDropBuilder_;
      /**
       * <pre>
       * Maximum size of the partition that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
       */
      public boolean hasMaxPartitionSizeToDrop() {
        return maxPartitionSizeToDropBuilder_ != null || maxPartitionSizeToDrop_ != null;
      }
      /**
       * <pre>
       * Maximum size of the partition that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
       */
      public com.google.protobuf.Int64Value getMaxPartitionSizeToDrop() {
        if (maxPartitionSizeToDropBuilder_ == null) {
          return maxPartitionSizeToDrop_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxPartitionSizeToDrop_;
        } else {
          return maxPartitionSizeToDropBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Maximum size of the partition that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
       */
      public Builder setMaxPartitionSizeToDrop(com.google.protobuf.Int64Value value) {
        if (maxPartitionSizeToDropBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxPartitionSizeToDrop_ = value;
          onChanged();
        } else {
          maxPartitionSizeToDropBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum size of the partition that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
       */
      public Builder setMaxPartitionSizeToDrop(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxPartitionSizeToDropBuilder_ == null) {
          maxPartitionSizeToDrop_ = builderForValue.build();
          onChanged();
        } else {
          maxPartitionSizeToDropBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Maximum size of the partition that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
       */
      public Builder mergeMaxPartitionSizeToDrop(com.google.protobuf.Int64Value value) {
        if (maxPartitionSizeToDropBuilder_ == null) {
          if (maxPartitionSizeToDrop_ != null) {
            maxPartitionSizeToDrop_ =
              com.google.protobuf.Int64Value.newBuilder(maxPartitionSizeToDrop_).mergeFrom(value).buildPartial();
          } else {
            maxPartitionSizeToDrop_ = value;
          }
          onChanged();
        } else {
          maxPartitionSizeToDropBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum size of the partition that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
       */
      public Builder clearMaxPartitionSizeToDrop() {
        if (maxPartitionSizeToDropBuilder_ == null) {
          maxPartitionSizeToDrop_ = null;
          onChanged();
        } else {
          maxPartitionSizeToDrop_ = null;
          maxPartitionSizeToDropBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Maximum size of the partition that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxPartitionSizeToDropBuilder() {
        
        onChanged();
        return getMaxPartitionSizeToDropFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Maximum size of the partition that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxPartitionSizeToDropOrBuilder() {
        if (maxPartitionSizeToDropBuilder_ != null) {
          return maxPartitionSizeToDropBuilder_.getMessageOrBuilder();
        } else {
          return maxPartitionSizeToDrop_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxPartitionSizeToDrop_;
        }
      }
      /**
       * <pre>
       * Maximum size of the partition that can be deleted using a DROP query.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partition_size_to_drop = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxPartitionSizeToDropFieldBuilder() {
        if (maxPartitionSizeToDropBuilder_ == null) {
          maxPartitionSizeToDropBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxPartitionSizeToDrop(),
                  getParentForChildren(),
                  isClean());
          maxPartitionSizeToDrop_ = null;
        }
        return maxPartitionSizeToDropBuilder_;
      }

      private com.google.protobuf.Int64Value builtinDictionariesReloadInterval_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> builtinDictionariesReloadIntervalBuilder_;
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasBuiltinDictionariesReloadInterval() {
        return builtinDictionariesReloadIntervalBuilder_ != null || builtinDictionariesReloadInterval_ != null;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.protobuf.Int64Value getBuiltinDictionariesReloadInterval() {
        if (builtinDictionariesReloadIntervalBuilder_ == null) {
          return builtinDictionariesReloadInterval_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : builtinDictionariesReloadInterval_;
        } else {
          return builtinDictionariesReloadIntervalBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setBuiltinDictionariesReloadInterval(com.google.protobuf.Int64Value value) {
        if (builtinDictionariesReloadIntervalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          builtinDictionariesReloadInterval_ = value;
          onChanged();
        } else {
          builtinDictionariesReloadIntervalBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setBuiltinDictionariesReloadInterval(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (builtinDictionariesReloadIntervalBuilder_ == null) {
          builtinDictionariesReloadInterval_ = builderForValue.build();
          onChanged();
        } else {
          builtinDictionariesReloadIntervalBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeBuiltinDictionariesReloadInterval(com.google.protobuf.Int64Value value) {
        if (builtinDictionariesReloadIntervalBuilder_ == null) {
          if (builtinDictionariesReloadInterval_ != null) {
            builtinDictionariesReloadInterval_ =
              com.google.protobuf.Int64Value.newBuilder(builtinDictionariesReloadInterval_).mergeFrom(value).buildPartial();
          } else {
            builtinDictionariesReloadInterval_ = value;
          }
          onChanged();
        } else {
          builtinDictionariesReloadIntervalBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearBuiltinDictionariesReloadInterval() {
        if (builtinDictionariesReloadIntervalBuilder_ == null) {
          builtinDictionariesReloadInterval_ = null;
          onChanged();
        } else {
          builtinDictionariesReloadInterval_ = null;
          builtinDictionariesReloadIntervalBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.protobuf.Int64Value.Builder getBuiltinDictionariesReloadIntervalBuilder() {
        
        onChanged();
        return getBuiltinDictionariesReloadIntervalFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.protobuf.Int64ValueOrBuilder getBuiltinDictionariesReloadIntervalOrBuilder() {
        if (builtinDictionariesReloadIntervalBuilder_ != null) {
          return builtinDictionariesReloadIntervalBuilder_.getMessageOrBuilder();
        } else {
          return builtinDictionariesReloadInterval_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : builtinDictionariesReloadInterval_;
        }
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getBuiltinDictionariesReloadIntervalFieldBuilder() {
        if (builtinDictionariesReloadIntervalBuilder_ == null) {
          builtinDictionariesReloadIntervalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getBuiltinDictionariesReloadInterval(),
                  getParentForChildren(),
                  isClean());
          builtinDictionariesReloadInterval_ = null;
        }
        return builtinDictionariesReloadIntervalBuilder_;
      }

      private java.lang.Object timezone_ = "";
      /**
       * <pre>
       * The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
       * </pre>
       *
       * <code>string timezone = 14;</code>
       */
      public java.lang.String getTimezone() {
        java.lang.Object ref = timezone_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          timezone_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
       * </pre>
       *
       * <code>string timezone = 14;</code>
       */
      public com.google.protobuf.ByteString
          getTimezoneBytes() {
        java.lang.Object ref = timezone_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          timezone_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
       * </pre>
       *
       * <code>string timezone = 14;</code>
       */
      public Builder setTimezone(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        timezone_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
       * </pre>
       *
       * <code>string timezone = 14;</code>
       */
      public Builder clearTimezone() {
        
        timezone_ = getDefaultInstance().getTimezone();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
       * </pre>
       *
       * <code>string timezone = 14;</code>
       */
      public Builder setTimezoneBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        timezone_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object geobaseUri_ = "";
      /**
       * <pre>
       * Address of the archive with the user geobase in Object Storage.
       * </pre>
       *
       * <code>string geobase_uri = 15;</code>
       */
      public java.lang.String getGeobaseUri() {
        java.lang.Object ref = geobaseUri_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          geobaseUri_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Address of the archive with the user geobase in Object Storage.
       * </pre>
       *
       * <code>string geobase_uri = 15;</code>
       */
      public com.google.protobuf.ByteString
          getGeobaseUriBytes() {
        java.lang.Object ref = geobaseUri_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          geobaseUri_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Address of the archive with the user geobase in Object Storage.
       * </pre>
       *
       * <code>string geobase_uri = 15;</code>
       */
      public Builder setGeobaseUri(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        geobaseUri_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Address of the archive with the user geobase in Object Storage.
       * </pre>
       *
       * <code>string geobase_uri = 15;</code>
       */
      public Builder clearGeobaseUri() {
        
        geobaseUri_ = getDefaultInstance().getGeobaseUri();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Address of the archive with the user geobase in Object Storage.
       * </pre>
       *
       * <code>string geobase_uri = 15;</code>
       */
      public Builder setGeobaseUriBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        geobaseUri_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig)
    private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig();
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ClickhouseConfig>
        PARSER = new com.google.protobuf.AbstractParser<ClickhouseConfig>() {
      @java.lang.Override
      public ClickhouseConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClickhouseConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ClickhouseConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClickhouseConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClickhouseConfigSetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Effective settings for a ClickHouse cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
     */
    boolean hasEffectiveConfig();
    /**
     * <pre>
     * Effective settings for a ClickHouse cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getEffectiveConfig();
    /**
     * <pre>
     * Effective settings for a ClickHouse cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder getEffectiveConfigOrBuilder();

    /**
     * <pre>
     * User-defined settings for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
     */
    boolean hasUserConfig();
    /**
     * <pre>
     * User-defined settings for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getUserConfig();
    /**
     * <pre>
     * User-defined settings for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder getUserConfigOrBuilder();

    /**
     * <pre>
     * Default configuration for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
     */
    boolean hasDefaultConfig();
    /**
     * <pre>
     * Default configuration for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getDefaultConfig();
    /**
     * <pre>
     * Default configuration for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder getDefaultConfigOrBuilder();
  }
  /**
   * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet}
   */
  public  static final class ClickhouseConfigSet extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet)
      ClickhouseConfigSetOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ClickhouseConfigSet.newBuilder() to construct.
    private ClickhouseConfigSet(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ClickhouseConfigSet() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ClickhouseConfigSet(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder subBuilder = null;
              if (effectiveConfig_ != null) {
                subBuilder = effectiveConfig_.toBuilder();
              }
              effectiveConfig_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(effectiveConfig_);
                effectiveConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder subBuilder = null;
              if (userConfig_ != null) {
                subBuilder = userConfig_.toBuilder();
              }
              userConfig_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userConfig_);
                userConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder subBuilder = null;
              if (defaultConfig_ != null) {
                subBuilder = defaultConfig_.toBuilder();
              }
              defaultConfig_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(defaultConfig_);
                defaultConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfigSet_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfigSet_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet.Builder.class);
    }

    public static final int EFFECTIVE_CONFIG_FIELD_NUMBER = 1;
    private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig effectiveConfig_;
    /**
     * <pre>
     * Effective settings for a ClickHouse cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
     */
    public boolean hasEffectiveConfig() {
      return effectiveConfig_ != null;
    }
    /**
     * <pre>
     * Effective settings for a ClickHouse cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getEffectiveConfig() {
      return effectiveConfig_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance() : effectiveConfig_;
    }
    /**
     * <pre>
     * Effective settings for a ClickHouse cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder getEffectiveConfigOrBuilder() {
      return getEffectiveConfig();
    }

    public static final int USER_CONFIG_FIELD_NUMBER = 2;
    private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig userConfig_;
    /**
     * <pre>
     * User-defined settings for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
     */
    public boolean hasUserConfig() {
      return userConfig_ != null;
    }
    /**
     * <pre>
     * User-defined settings for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getUserConfig() {
      return userConfig_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance() : userConfig_;
    }
    /**
     * <pre>
     * User-defined settings for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder getUserConfigOrBuilder() {
      return getUserConfig();
    }

    public static final int DEFAULT_CONFIG_FIELD_NUMBER = 3;
    private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig defaultConfig_;
    /**
     * <pre>
     * Default configuration for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
     */
    public boolean hasDefaultConfig() {
      return defaultConfig_ != null;
    }
    /**
     * <pre>
     * Default configuration for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getDefaultConfig() {
      return defaultConfig_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance() : defaultConfig_;
    }
    /**
     * <pre>
     * Default configuration for a ClickHouse cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
     */
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder getDefaultConfigOrBuilder() {
      return getDefaultConfig();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (effectiveConfig_ != null) {
        output.writeMessage(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        output.writeMessage(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        output.writeMessage(3, getDefaultConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (effectiveConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDefaultConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet other = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet) obj;

      boolean result = true;
      result = result && (hasEffectiveConfig() == other.hasEffectiveConfig());
      if (hasEffectiveConfig()) {
        result = result && getEffectiveConfig()
            .equals(other.getEffectiveConfig());
      }
      result = result && (hasUserConfig() == other.hasUserConfig());
      if (hasUserConfig()) {
        result = result && getUserConfig()
            .equals(other.getUserConfig());
      }
      result = result && (hasDefaultConfig() == other.hasDefaultConfig());
      if (hasDefaultConfig()) {
        result = result && getDefaultConfig()
            .equals(other.getDefaultConfig());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEffectiveConfig()) {
        hash = (37 * hash) + EFFECTIVE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getEffectiveConfig().hashCode();
      }
      if (hasUserConfig()) {
        hash = (37 * hash) + USER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getUserConfig().hashCode();
      }
      if (hasDefaultConfig()) {
        hash = (37 * hash) + DEFAULT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getDefaultConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet)
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfigSet_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfigSet_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet.class, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfigSet_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet build() {
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet buildPartial() {
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet result = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet(this);
        if (effectiveConfigBuilder_ == null) {
          result.effectiveConfig_ = effectiveConfig_;
        } else {
          result.effectiveConfig_ = effectiveConfigBuilder_.build();
        }
        if (userConfigBuilder_ == null) {
          result.userConfig_ = userConfig_;
        } else {
          result.userConfig_ = userConfigBuilder_.build();
        }
        if (defaultConfigBuilder_ == null) {
          result.defaultConfig_ = defaultConfig_;
        } else {
          result.defaultConfig_ = defaultConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet) {
          return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet other) {
        if (other == yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet.getDefaultInstance()) return this;
        if (other.hasEffectiveConfig()) {
          mergeEffectiveConfig(other.getEffectiveConfig());
        }
        if (other.hasUserConfig()) {
          mergeUserConfig(other.getUserConfig());
        }
        if (other.hasDefaultConfig()) {
          mergeDefaultConfig(other.getDefaultConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig effectiveConfig_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder> effectiveConfigBuilder_;
      /**
       * <pre>
       * Effective settings for a ClickHouse cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
       */
      public boolean hasEffectiveConfig() {
        return effectiveConfigBuilder_ != null || effectiveConfig_ != null;
      }
      /**
       * <pre>
       * Effective settings for a ClickHouse cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          return effectiveConfig_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance() : effectiveConfig_;
        } else {
          return effectiveConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Effective settings for a ClickHouse cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
       */
      public Builder setEffectiveConfig(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig value) {
        if (effectiveConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          effectiveConfig_ = value;
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a ClickHouse cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
       */
      public Builder setEffectiveConfig(
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder builderForValue) {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = builderForValue.build();
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a ClickHouse cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
       */
      public Builder mergeEffectiveConfig(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig value) {
        if (effectiveConfigBuilder_ == null) {
          if (effectiveConfig_ != null) {
            effectiveConfig_ =
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.newBuilder(effectiveConfig_).mergeFrom(value).buildPartial();
          } else {
            effectiveConfig_ = value;
          }
          onChanged();
        } else {
          effectiveConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a ClickHouse cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
       */
      public Builder clearEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
          onChanged();
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a ClickHouse cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder getEffectiveConfigBuilder() {
        
        onChanged();
        return getEffectiveConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Effective settings for a ClickHouse cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder getEffectiveConfigOrBuilder() {
        if (effectiveConfigBuilder_ != null) {
          return effectiveConfigBuilder_.getMessageOrBuilder();
        } else {
          return effectiveConfig_ == null ?
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance() : effectiveConfig_;
        }
      }
      /**
       * <pre>
       * Effective settings for a ClickHouse cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig effective_config = 1 [(.yandex.cloud.required) = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder> 
          getEffectiveConfigFieldBuilder() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder>(
                  getEffectiveConfig(),
                  getParentForChildren(),
                  isClean());
          effectiveConfig_ = null;
        }
        return effectiveConfigBuilder_;
      }

      private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig userConfig_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder> userConfigBuilder_;
      /**
       * <pre>
       * User-defined settings for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
       */
      public boolean hasUserConfig() {
        return userConfigBuilder_ != null || userConfig_ != null;
      }
      /**
       * <pre>
       * User-defined settings for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getUserConfig() {
        if (userConfigBuilder_ == null) {
          return userConfig_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance() : userConfig_;
        } else {
          return userConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * User-defined settings for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
       */
      public Builder setUserConfig(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig value) {
        if (userConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userConfig_ = value;
          onChanged();
        } else {
          userConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
       */
      public Builder setUserConfig(
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder builderForValue) {
        if (userConfigBuilder_ == null) {
          userConfig_ = builderForValue.build();
          onChanged();
        } else {
          userConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
       */
      public Builder mergeUserConfig(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig value) {
        if (userConfigBuilder_ == null) {
          if (userConfig_ != null) {
            userConfig_ =
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.newBuilder(userConfig_).mergeFrom(value).buildPartial();
          } else {
            userConfig_ = value;
          }
          onChanged();
        } else {
          userConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
       */
      public Builder clearUserConfig() {
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
          onChanged();
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder getUserConfigBuilder() {
        
        onChanged();
        return getUserConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * User-defined settings for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder getUserConfigOrBuilder() {
        if (userConfigBuilder_ != null) {
          return userConfigBuilder_.getMessageOrBuilder();
        } else {
          return userConfig_ == null ?
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance() : userConfig_;
        }
      }
      /**
       * <pre>
       * User-defined settings for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig user_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder> 
          getUserConfigFieldBuilder() {
        if (userConfigBuilder_ == null) {
          userConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder>(
                  getUserConfig(),
                  getParentForChildren(),
                  isClean());
          userConfig_ = null;
        }
        return userConfigBuilder_;
      }

      private yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig defaultConfig_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder> defaultConfigBuilder_;
      /**
       * <pre>
       * Default configuration for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
       */
      public boolean hasDefaultConfig() {
        return defaultConfigBuilder_ != null || defaultConfig_ != null;
      }
      /**
       * <pre>
       * Default configuration for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig getDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          return defaultConfig_ == null ? yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance() : defaultConfig_;
        } else {
          return defaultConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Default configuration for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
       */
      public Builder setDefaultConfig(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig value) {
        if (defaultConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          defaultConfig_ = value;
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
       */
      public Builder setDefaultConfig(
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder builderForValue) {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = builderForValue.build();
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
       */
      public Builder mergeDefaultConfig(yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig value) {
        if (defaultConfigBuilder_ == null) {
          if (defaultConfig_ != null) {
            defaultConfig_ =
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.newBuilder(defaultConfig_).mergeFrom(value).buildPartial();
          } else {
            defaultConfig_ = value;
          }
          onChanged();
        } else {
          defaultConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
       */
      public Builder clearDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
          onChanged();
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder getDefaultConfigBuilder() {
        
        onChanged();
        return getDefaultConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Default configuration for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder getDefaultConfigOrBuilder() {
        if (defaultConfigBuilder_ != null) {
          return defaultConfigBuilder_.getMessageOrBuilder();
        } else {
          return defaultConfig_ == null ?
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.getDefaultInstance() : defaultConfig_;
        }
      }
      /**
       * <pre>
       * Default configuration for a ClickHouse cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig default_config = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder> 
          getDefaultConfigFieldBuilder() {
        if (defaultConfigBuilder_ == null) {
          defaultConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfig.Builder, yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigOrBuilder>(
                  getDefaultConfig(),
                  getParentForChildren(),
                  isClean());
          defaultConfig_ = null;
        }
        return defaultConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet)
    private static final yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet();
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ClickhouseConfigSet>
        PARSER = new com.google.protobuf.AbstractParser<ClickhouseConfigSet>() {
      @java.lang.Override
      public ClickhouseConfigSet parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClickhouseConfigSet(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ClickhouseConfigSet> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClickhouseConfigSet> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.config.Clickhouse.ClickhouseConfigSet getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_MergeTree_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_MergeTree_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_Compression_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_Compression_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_HttpSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_HttpSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_ClickhouseSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_ClickhouseSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MongodbSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MongodbSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_PostgresqlSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_PostgresqlSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Attribute_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Attribute_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Id_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Id_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Key_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Key_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Layout_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Layout_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Range_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Range_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_Retention_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_Retention_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfigSet_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfigSet_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n6yandex/cloud/mdb/clickhouse/v1/config/" +
      "clickhouse.proto\022%yandex.cloud.mdb.click" +
      "house.v1.config\032\036google/protobuf/wrapper" +
      "s.proto\032\035yandex/cloud/validation.proto\"\377" +
      "+\n\020ClickhouseConfig\022S\n\tlog_level\030\001 \001(\0162@" +
      ".yandex.cloud.mdb.clickhouse.v1.config.C" +
      "lickhouseConfig.LogLevel\022U\n\nmerge_tree\030\002" +
      " \001(\0132A.yandex.cloud.mdb.clickhouse.v1.co" +
      "nfig.ClickhouseConfig.MergeTree\022X\n\013compr" +
      "ession\030\003 \003(\0132C.yandex.cloud.mdb.clickhou" +
      "se.v1.config.ClickhouseConfig.Compressio" +
      "n\022`\n\014dictionaries\030\004 \003(\0132J.yandex.cloud.m" +
      "db.clickhouse.v1.config.ClickhouseConfig" +
      ".ExternalDictionary\022_\n\017graphite_rollup\030\005" +
      " \003(\0132F.yandex.cloud.mdb.clickhouse.v1.co" +
      "nfig.ClickhouseConfig.GraphiteRollup\022>\n\017" +
      "max_connections\030\006 \001(\0132\033.google.protobuf." +
      "Int64ValueB\010\372\3071\004>=10\022E\n\026max_concurrent_q" +
      "ueries\030\007 \001(\0132\033.google.protobuf.Int64Valu" +
      "eB\010\372\3071\004>=10\0227\n\022keep_alive_timeout\030\010 \001(\0132" +
      "\033.google.protobuf.Int64Value\022<\n\027uncompre" +
      "ssed_cache_size\030\t \001(\0132\033.google.protobuf." +
      "Int64Value\022E\n\017mark_cache_size\030\n \001(\0132\033.go" +
      "ogle.protobuf.Int64ValueB\017\372\3071\013>536870912" +
      "0\022;\n\026max_table_size_to_drop\030\013 \001(\0132\033.goog" +
      "le.protobuf.Int64Value\022?\n\032max_partition_" +
      "size_to_drop\030\r \001(\0132\033.google.protobuf.Int" +
      "64Value\022M\n$builtin_dictionaries_reload_i" +
      "nterval\030\014 \001(\0132\033.google.protobuf.Int64Val" +
      "ueB\002\030\001\022\020\n\010timezone\030\016 \001(\t\022\023\n\013geobase_uri\030" +
      "\017 \001(\t\032\212\004\n\tMergeTree\022D\n\037replicated_dedupl" +
      "ication_window\030\001 \001(\0132\033.google.protobuf.I" +
      "nt64Value\022L\n\'replicated_deduplication_wi" +
      "ndow_seconds\030\002 \001(\0132\033.google.protobuf.Int" +
      "64Value\022:\n\025parts_to_delay_insert\030\003 \001(\0132\033" +
      ".google.protobuf.Int64Value\022:\n\025parts_to_" +
      "throw_insert\030\004 \001(\0132\033.google.protobuf.Int" +
      "64Value\022C\n\036max_replicated_merges_in_queu" +
      "e\030\005 \001(\0132\033.google.protobuf.Int64Value\022^\n9" +
      "number_of_free_entries_in_pool_to_lower_" +
      "max_size_of_merge\030\006 \001(\0132\033.google.protobu" +
      "f.Int64Value\022L\n\'max_bytes_to_merge_at_mi" +
      "n_space_in_pool\030\007 \001(\0132\033.google.protobuf." +
      "Int64Value\032\333\001\n\013Compression\022Z\n\006method\030\001 \001" +
      "(\0162J.yandex.cloud.mdb.clickhouse.v1.conf" +
      "ig.ClickhouseConfig.Compression.Method\022\036" +
      "\n\rmin_part_size\030\002 \001(\003B\007\372\3071\003>=1\022\033\n\023min_pa" +
      "rt_size_ratio\030\003 \001(\001\"3\n\006Method\022\026\n\022METHOD_" +
      "UNSPECIFIED\020\000\022\007\n\003LZ4\020\001\022\010\n\004ZSTD\020\002\032\240\032\n\022Ext" +
      "ernalDictionary\022\022\n\004name\030\001 \001(\tB\004\350\3071\001\022m\n\ts" +
      "tructure\030\002 \001(\0132T.yandex.cloud.mdb.clickh" +
      "ouse.v1.config.ClickhouseConfig.External" +
      "Dictionary.StructureB\004\350\3071\001\022g\n\006layout\030\003 \001" +
      "(\0132Q.yandex.cloud.mdb.clickhouse.v1.conf" +
      "ig.ClickhouseConfig.ExternalDictionary.L" +
      "ayoutB\004\350\3071\001\022\030\n\016fixed_lifetime\030\004 \001(\003H\000\022j\n" +
      "\016lifetime_range\030\005 \001(\0132P.yandex.cloud.mdb" +
      ".clickhouse.v1.config.ClickhouseConfig.E" +
      "xternalDictionary.RangeH\000\022l\n\013http_source" +
      "\030\006 \001(\0132U.yandex.cloud.mdb.clickhouse.v1." +
      "config.ClickhouseConfig.ExternalDictiona" +
      "ry.HttpSourceH\001\022n\n\014mysql_source\030\007 \001(\0132V." +
      "yandex.cloud.mdb.clickhouse.v1.config.Cl" +
      "ickhouseConfig.ExternalDictionary.MysqlS" +
      "ourceH\001\022x\n\021clickhouse_source\030\010 \001(\0132[.yan" +
      "dex.cloud.mdb.clickhouse.v1.config.Click" +
      "houseConfig.ExternalDictionary.Clickhous" +
      "eSourceH\001\022r\n\016mongodb_source\030\t \001(\0132X.yand" +
      "ex.cloud.mdb.clickhouse.v1.config.Clickh" +
      "ouseConfig.ExternalDictionary.MongodbSou" +
      "rceH\001\022x\n\021postgresql_source\030\n \001(\0132[.yande" +
      "x.cloud.mdb.clickhouse.v1.config.Clickho" +
      "useConfig.ExternalDictionary.PostgresqlS" +
      "ourceH\001\0325\n\nHttpSource\022\021\n\003url\030\001 \001(\tB\004\350\3071\001" +
      "\022\024\n\006format\030\002 \001(\tB\004\350\3071\001\032\223\003\n\013MysqlSource\022\020" +
      "\n\002db\030\001 \001(\tB\004\350\3071\001\022\023\n\005table\030\002 \001(\tB\004\350\3071\001\022\031\n" +
      "\004port\030\003 \001(\003B\013\372\3071\0070-65535\022\014\n\004user\030\004 \001(\t\022\020" +
      "\n\010password\030\005 \001(\t\022x\n\010replicas\030\006 \003(\0132^.yan" +
      "dex.cloud.mdb.clickhouse.v1.config.Click" +
      "houseConfig.ExternalDictionary.MysqlSour" +
      "ce.ReplicaB\006\202\3101\002>0\022\r\n\005where\030\007 \001(\t\022\030\n\020inv" +
      "alidate_query\030\010 \001(\t\032\177\n\007Replica\022\033\n\004host\030\001" +
      " \001(\tB\r\350\3071\001\212\3101\005<=253\022\034\n\010priority\030\002 \001(\003B\n\350" +
      "\3071\001\372\3071\002>0\022\031\n\004port\030\003 \001(\003B\013\372\3071\0070-65535\022\014\n\004" +
      "user\030\004 \001(\t\022\020\n\010password\030\005 \001(\t\032\246\001\n\020Clickho" +
      "useSource\022\020\n\002db\030\001 \001(\tB\004\350\3071\001\022\023\n\005table\030\002 \001" +
      "(\tB\004\350\3071\001\022\033\n\004host\030\003 \001(\tB\r\350\3071\001\212\3101\005<=253\022\031\n" +
      "\004port\030\004 \001(\003B\013\372\3071\0070-65535\022\022\n\004user\030\005 \001(\tB\004" +
      "\350\3071\001\022\020\n\010password\030\006 \001(\t\022\r\n\005where\030\007 \001(\t\032\231\001" +
      "\n\rMongodbSource\022\020\n\002db\030\001 \001(\tB\004\350\3071\001\022\030\n\ncol" +
      "lection\030\002 \001(\tB\004\350\3071\001\022\033\n\004host\030\003 \001(\tB\r\350\3071\001\212" +
      "\3101\005<=253\022\031\n\004port\030\004 \001(\003B\013\372\3071\0070-65535\022\022\n\004u" +
      "ser\030\005 \001(\tB\004\350\3071\001\022\020\n\010password\030\006 \001(\t\032\213\003\n\020Po" +
      "stgresqlSource\022\020\n\002db\030\001 \001(\tB\004\350\3071\001\022\023\n\005tabl" +
      "e\030\002 \001(\tB\004\350\3071\001\022\025\n\005hosts\030\003 \003(\tB\006\202\3101\002>0\022\031\n\004" +
      "port\030\004 \001(\003B\013\372\3071\0070-65535\022\022\n\004user\030\005 \001(\tB\004\350" +
      "\3071\001\022\020\n\010password\030\006 \001(\t\022\030\n\020invalidate_quer" +
      "y\030\007 \001(\t\022u\n\010ssl_mode\030\010 \001(\0162c.yandex.cloud" +
      ".mdb.clickhouse.v1.config.ClickhouseConf" +
      "ig.ExternalDictionary.PostgresqlSource.S" +
      "slMode\"g\n\007SslMode\022\030\n\024SSL_MODE_UNSPECIFIE" +
      "D\020\000\022\013\n\007DISABLE\020\001\022\t\n\005ALLOW\020\002\022\n\n\006PREFER\020\003\022" +
      "\r\n\tVERIFY_CA\020\004\022\017\n\013VERIFY_FULL\020\005\032\336\006\n\tStru" +
      "cture\022c\n\002id\030\001 \001(\0132W.yandex.cloud.mdb.cli" +
      "ckhouse.v1.config.ClickhouseConfig.Exter" +
      "nalDictionary.Structure.Id\022e\n\003key\030\003 \001(\0132" +
      "X.yandex.cloud.mdb.clickhouse.v1.config." +
      "ClickhouseConfig.ExternalDictionary.Stru" +
      "cture.Key\022q\n\trange_min\030\004 \001(\0132^.yandex.cl" +
      "oud.mdb.clickhouse.v1.config.ClickhouseC" +
      "onfig.ExternalDictionary.Structure.Attri" +
      "bute\022q\n\trange_max\030\005 \001(\0132^.yandex.cloud.m" +
      "db.clickhouse.v1.config.ClickhouseConfig" +
      ".ExternalDictionary.Structure.Attribute\022" +
      "z\n\nattributes\030\002 \003(\0132^.yandex.cloud.mdb.c" +
      "lickhouse.v1.config.ClickhouseConfig.Ext" +
      "ernalDictionary.Structure.AttributeB\006\202\3101" +
      "\002>0\032\204\001\n\tAttribute\022\022\n\004name\030\001 \001(\tB\004\350\3071\001\022\022\n" +
      "\004type\030\002 \001(\tB\004\350\3071\001\022\022\n\nnull_value\030\003 \001(\t\022\022\n" +
      "\nexpression\030\004 \001(\t\022\024\n\014hierarchical\030\005 \001(\010\022" +
      "\021\n\tinjective\030\006 \001(\010\032\030\n\002Id\022\022\n\004name\030\001 \001(\tB\004" +
      "\350\3071\001\032\201\001\n\003Key\022z\n\nattributes\030\001 \003(\0132^.yande" +
      "x.cloud.mdb.clickhouse.v1.config.Clickho" +
      "useConfig.ExternalDictionary.Structure.A" +
      "ttributeB\006\202\3101\002>0\032\213\002\n\006Layout\022j\n\004type\030\001 \001(" +
      "\0162V.yandex.cloud.mdb.clickhouse.v1.confi" +
      "g.ClickhouseConfig.ExternalDictionary.La" +
      "yout.TypeB\004\350\3071\001\022\025\n\rsize_in_cells\030\002 \001(\003\"~" +
      "\n\004Type\022\024\n\020TYPE_UNSPECIFIED\020\000\022\010\n\004FLAT\020\001\022\n" +
      "\n\006HASHED\020\002\022\026\n\022COMPLEX_KEY_HASHED\020\003\022\020\n\014RA" +
      "NGE_HASHED\020\004\022\t\n\005CACHE\020\005\022\025\n\021COMPLEX_KEY_C" +
      "ACHE\020\006\032!\n\005Range\022\013\n\003min\030\001 \001(\003\022\013\n\003max\030\002 \001(" +
      "\003B\020\n\010lifetime\022\004\300\3011\001B\016\n\006source\022\004\300\3011\001\032\364\002\n\016" +
      "GraphiteRollup\022\022\n\004name\030\001 \001(\tB\004\350\3071\001\022h\n\010pa" +
      "tterns\030\002 \003(\0132N.yandex.cloud.mdb.clickhou" +
      "se.v1.config.ClickhouseConfig.GraphiteRo" +
      "llup.PatternB\006\202\3101\002>0\032\343\001\n\007Pattern\022\016\n\006rege" +
      "xp\030\001 \001(\t\022\026\n\010function\030\002 \001(\tB\004\350\3071\001\022s\n\trete" +
      "ntion\030\003 \003(\0132X.yandex.cloud.mdb.clickhous" +
      "e.v1.config.ClickhouseConfig.GraphiteRol" +
      "lup.Pattern.RetentionB\006\202\3101\002>0\032;\n\tRetenti" +
      "on\022\023\n\003age\030\001 \001(\003B\006\372\3071\002>0\022\031\n\tprecision\030\002 \001" +
      "(\003B\006\372\3071\002>0\"d\n\010LogLevel\022\031\n\025LOG_LEVEL_UNSP" +
      "ECIFIED\020\000\022\t\n\005TRACE\020\001\022\t\n\005DEBUG\020\002\022\017\n\013INFOR" +
      "MATION\020\003\022\013\n\007WARNING\020\004\022\t\n\005ERROR\020\005\"\215\002\n\023Cli" +
      "ckhouseConfigSet\022W\n\020effective_config\030\001 \001" +
      "(\01327.yandex.cloud.mdb.clickhouse.v1.conf" +
      "ig.ClickhouseConfigB\004\350\3071\001\022L\n\013user_config" +
      "\030\002 \001(\01327.yandex.cloud.mdb.clickhouse.v1." +
      "config.ClickhouseConfig\022O\n\016default_confi" +
      "g\030\003 \001(\01327.yandex.cloud.mdb.clickhouse.v1" +
      ".config.ClickhouseConfigB\201\001\n)yandex.clou" +
      "d.api.mdb.clickhouse.v1.configZTgithub.c" +
      "om/yandex-cloud/go-genproto/yandex/cloud" +
      "/mdb/clickhouse/v1/config;clickhouseb\006pr" +
      "oto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.WrappersProto.getDescriptor(),
          yandex.cloud.api.Validation.getDescriptor(),
        }, assigner);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_descriptor,
        new java.lang.String[] { "LogLevel", "MergeTree", "Compression", "Dictionaries", "GraphiteRollup", "MaxConnections", "MaxConcurrentQueries", "KeepAliveTimeout", "UncompressedCacheSize", "MarkCacheSize", "MaxTableSizeToDrop", "MaxPartitionSizeToDrop", "BuiltinDictionariesReloadInterval", "Timezone", "GeobaseUri", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_MergeTree_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_descriptor.getNestedTypes().get(0);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_MergeTree_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_MergeTree_descriptor,
        new java.lang.String[] { "ReplicatedDeduplicationWindow", "ReplicatedDeduplicationWindowSeconds", "PartsToDelayInsert", "PartsToThrowInsert", "MaxReplicatedMergesInQueue", "NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge", "MaxBytesToMergeAtMinSpaceInPool", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_Compression_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_descriptor.getNestedTypes().get(1);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_Compression_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_Compression_descriptor,
        new java.lang.String[] { "Method", "MinPartSize", "MinPartSizeRatio", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_descriptor.getNestedTypes().get(2);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor,
        new java.lang.String[] { "Name", "Structure", "Layout", "FixedLifetime", "LifetimeRange", "HttpSource", "MysqlSource", "ClickhouseSource", "MongodbSource", "PostgresqlSource", "Lifetime", "Source", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_HttpSource_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor.getNestedTypes().get(0);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_HttpSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_HttpSource_descriptor,
        new java.lang.String[] { "Url", "Format", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor.getNestedTypes().get(1);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_descriptor,
        new java.lang.String[] { "Db", "Table", "Port", "User", "Password", "Replicas", "Where", "InvalidateQuery", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_descriptor.getNestedTypes().get(0);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica_descriptor,
        new java.lang.String[] { "Host", "Priority", "Port", "User", "Password", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_ClickhouseSource_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor.getNestedTypes().get(2);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_ClickhouseSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_ClickhouseSource_descriptor,
        new java.lang.String[] { "Db", "Table", "Host", "Port", "User", "Password", "Where", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MongodbSource_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor.getNestedTypes().get(3);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MongodbSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_MongodbSource_descriptor,
        new java.lang.String[] { "Db", "Collection", "Host", "Port", "User", "Password", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_PostgresqlSource_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor.getNestedTypes().get(4);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_PostgresqlSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_PostgresqlSource_descriptor,
        new java.lang.String[] { "Db", "Table", "Hosts", "Port", "User", "Password", "InvalidateQuery", "SslMode", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor.getNestedTypes().get(5);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_descriptor,
        new java.lang.String[] { "Id", "Key", "RangeMin", "RangeMax", "Attributes", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Attribute_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_descriptor.getNestedTypes().get(0);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Attribute_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Attribute_descriptor,
        new java.lang.String[] { "Name", "Type", "NullValue", "Expression", "Hierarchical", "Injective", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Id_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_descriptor.getNestedTypes().get(1);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Id_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Id_descriptor,
        new java.lang.String[] { "Name", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Key_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_descriptor.getNestedTypes().get(2);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Key_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Structure_Key_descriptor,
        new java.lang.String[] { "Attributes", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Layout_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor.getNestedTypes().get(6);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Layout_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Layout_descriptor,
        new java.lang.String[] { "Type", "SizeInCells", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Range_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_descriptor.getNestedTypes().get(7);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Range_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_ExternalDictionary_Range_descriptor,
        new java.lang.String[] { "Min", "Max", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_descriptor.getNestedTypes().get(3);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_descriptor,
        new java.lang.String[] { "Name", "Patterns", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_descriptor.getNestedTypes().get(0);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_descriptor,
        new java.lang.String[] { "Regexp", "Function", "Retention", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_Retention_descriptor =
      internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_descriptor.getNestedTypes().get(0);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_Retention_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfig_GraphiteRollup_Pattern_Retention_descriptor,
        new java.lang.String[] { "Age", "Precision", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfigSet_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfigSet_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_config_ClickhouseConfigSet_descriptor,
        new java.lang.String[] { "EffectiveConfig", "UserConfig", "DefaultConfig", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(yandex.cloud.api.Validation.exactlyOne);
    registry.add(yandex.cloud.api.Validation.length);
    registry.add(yandex.cloud.api.Validation.required);
    registry.add(yandex.cloud.api.Validation.size);
    registry.add(yandex.cloud.api.Validation.value);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.WrappersProto.getDescriptor();
    yandex.cloud.api.Validation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yandex/cloud/mdb/kafka/v1/common.proto

package yandex.cloud.api.mdb.kafka.v1;

public final class Common {
  private Common() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code yandex.cloud.mdb.kafka.v1.CompressionType}
   */
  public enum CompressionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COMPRESSION_TYPE_UNSPECIFIED = 0;</code>
     */
    COMPRESSION_TYPE_UNSPECIFIED(0),
    /**
     * <pre>
     * no codec (uncompressed).
     * </pre>
     *
     * <code>COMPRESSION_TYPE_UNCOMPRESSED = 1;</code>
     */
    COMPRESSION_TYPE_UNCOMPRESSED(1),
    /**
     * <pre>
     * Zstandard codec.
     * </pre>
     *
     * <code>COMPRESSION_TYPE_ZSTD = 2;</code>
     */
    COMPRESSION_TYPE_ZSTD(2),
    /**
     * <pre>
     * LZ4 codec.
     * </pre>
     *
     * <code>COMPRESSION_TYPE_LZ4 = 3;</code>
     */
    COMPRESSION_TYPE_LZ4(3),
    /**
     * <pre>
     * Snappy codec.
     * </pre>
     *
     * <code>COMPRESSION_TYPE_SNAPPY = 4;</code>
     */
    COMPRESSION_TYPE_SNAPPY(4),
    /**
     * <pre>
     * GZip codec.
     * </pre>
     *
     * <code>COMPRESSION_TYPE_GZIP = 5;</code>
     */
    COMPRESSION_TYPE_GZIP(5),
    /**
     * <pre>
     * the codec to use is set by a producer (can be any of `ZSTD`, `LZ4`, `GZIP` or `SNAPPY` codecs).
     * </pre>
     *
     * <code>COMPRESSION_TYPE_PRODUCER = 6;</code>
     */
    COMPRESSION_TYPE_PRODUCER(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>COMPRESSION_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int COMPRESSION_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * no codec (uncompressed).
     * </pre>
     *
     * <code>COMPRESSION_TYPE_UNCOMPRESSED = 1;</code>
     */
    public static final int COMPRESSION_TYPE_UNCOMPRESSED_VALUE = 1;
    /**
     * <pre>
     * Zstandard codec.
     * </pre>
     *
     * <code>COMPRESSION_TYPE_ZSTD = 2;</code>
     */
    public static final int COMPRESSION_TYPE_ZSTD_VALUE = 2;
    /**
     * <pre>
     * LZ4 codec.
     * </pre>
     *
     * <code>COMPRESSION_TYPE_LZ4 = 3;</code>
     */
    public static final int COMPRESSION_TYPE_LZ4_VALUE = 3;
    /**
     * <pre>
     * Snappy codec.
     * </pre>
     *
     * <code>COMPRESSION_TYPE_SNAPPY = 4;</code>
     */
    public static final int COMPRESSION_TYPE_SNAPPY_VALUE = 4;
    /**
     * <pre>
     * GZip codec.
     * </pre>
     *
     * <code>COMPRESSION_TYPE_GZIP = 5;</code>
     */
    public static final int COMPRESSION_TYPE_GZIP_VALUE = 5;
    /**
     * <pre>
     * the codec to use is set by a producer (can be any of `ZSTD`, `LZ4`, `GZIP` or `SNAPPY` codecs).
     * </pre>
     *
     * <code>COMPRESSION_TYPE_PRODUCER = 6;</code>
     */
    public static final int COMPRESSION_TYPE_PRODUCER_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CompressionType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CompressionType forNumber(int value) {
      switch (value) {
        case 0: return COMPRESSION_TYPE_UNSPECIFIED;
        case 1: return COMPRESSION_TYPE_UNCOMPRESSED;
        case 2: return COMPRESSION_TYPE_ZSTD;
        case 3: return COMPRESSION_TYPE_LZ4;
        case 4: return COMPRESSION_TYPE_SNAPPY;
        case 5: return COMPRESSION_TYPE_GZIP;
        case 6: return COMPRESSION_TYPE_PRODUCER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CompressionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CompressionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CompressionType>() {
            public CompressionType findValueByNumber(int number) {
              return CompressionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.kafka.v1.Common.getDescriptor().getEnumTypes().get(0);
    }

    private static final CompressionType[] VALUES = values();

    public static CompressionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CompressionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.kafka.v1.CompressionType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n&yandex/cloud/mdb/kafka/v1/common.proto" +
      "\022\031yandex.cloud.mdb.kafka.v1*\342\001\n\017Compress" +
      "ionType\022 \n\034COMPRESSION_TYPE_UNSPECIFIED\020" +
      "\000\022!\n\035COMPRESSION_TYPE_UNCOMPRESSED\020\001\022\031\n\025" +
      "COMPRESSION_TYPE_ZSTD\020\002\022\030\n\024COMPRESSION_T" +
      "YPE_LZ4\020\003\022\033\n\027COMPRESSION_TYPE_SNAPPY\020\004\022\031" +
      "\n\025COMPRESSION_TYPE_GZIP\020\005\022\035\n\031COMPRESSION" +
      "_TYPE_PRODUCER\020\006Bd\n\035yandex.cloud.api.mdb" +
      ".kafka.v1ZCgithub.com/yandex-cloud/go-ge" +
      "nproto/yandex/cloud/mdb/kafka/v1;kafkab\006" +
      "proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
